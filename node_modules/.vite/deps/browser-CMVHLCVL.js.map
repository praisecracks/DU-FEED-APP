{
  "version": 3,
  "sources": ["../../yaml/browser/dist/index.js", "../../yaml/browser/dist/nodes/identity.js", "../../yaml/browser/dist/visit.js", "../../yaml/browser/dist/doc/directives.js", "../../yaml/browser/dist/doc/anchors.js", "../../yaml/browser/dist/doc/applyReviver.js", "../../yaml/browser/dist/nodes/toJS.js", "../../yaml/browser/dist/nodes/Node.js", "../../yaml/browser/dist/nodes/Alias.js", "../../yaml/browser/dist/nodes/Scalar.js", "../../yaml/browser/dist/doc/createNode.js", "../../yaml/browser/dist/nodes/Collection.js", "../../yaml/browser/dist/stringify/stringifyComment.js", "../../yaml/browser/dist/stringify/foldFlowLines.js", "../../yaml/browser/dist/stringify/stringifyString.js", "../../yaml/browser/dist/stringify/stringify.js", "../../yaml/browser/dist/stringify/stringifyPair.js", "../../yaml/browser/dist/log.js", "../../yaml/browser/dist/schema/yaml-1.1/merge.js", "../../yaml/browser/dist/nodes/addPairToJSMap.js", "../../yaml/browser/dist/nodes/Pair.js", "../../yaml/browser/dist/stringify/stringifyCollection.js", "../../yaml/browser/dist/nodes/YAMLMap.js", "../../yaml/browser/dist/schema/common/map.js", "../../yaml/browser/dist/nodes/YAMLSeq.js", "../../yaml/browser/dist/schema/common/seq.js", "../../yaml/browser/dist/schema/common/string.js", "../../yaml/browser/dist/schema/common/null.js", "../../yaml/browser/dist/schema/core/bool.js", "../../yaml/browser/dist/stringify/stringifyNumber.js", "../../yaml/browser/dist/schema/core/float.js", "../../yaml/browser/dist/schema/core/int.js", "../../yaml/browser/dist/schema/core/schema.js", "../../yaml/browser/dist/schema/json/schema.js", "../../yaml/browser/dist/schema/yaml-1.1/binary.js", "../../yaml/browser/dist/schema/yaml-1.1/pairs.js", "../../yaml/browser/dist/schema/yaml-1.1/omap.js", "../../yaml/browser/dist/schema/yaml-1.1/bool.js", "../../yaml/browser/dist/schema/yaml-1.1/float.js", "../../yaml/browser/dist/schema/yaml-1.1/int.js", "../../yaml/browser/dist/schema/yaml-1.1/set.js", "../../yaml/browser/dist/schema/yaml-1.1/timestamp.js", "../../yaml/browser/dist/schema/yaml-1.1/schema.js", "../../yaml/browser/dist/schema/tags.js", "../../yaml/browser/dist/schema/Schema.js", "../../yaml/browser/dist/stringify/stringifyDocument.js", "../../yaml/browser/dist/doc/Document.js", "../../yaml/browser/dist/errors.js", "../../yaml/browser/dist/compose/resolve-props.js", "../../yaml/browser/dist/compose/util-contains-newline.js", "../../yaml/browser/dist/compose/util-flow-indent-check.js", "../../yaml/browser/dist/compose/util-map-includes.js", "../../yaml/browser/dist/compose/resolve-block-map.js", "../../yaml/browser/dist/compose/resolve-block-seq.js", "../../yaml/browser/dist/compose/resolve-end.js", "../../yaml/browser/dist/compose/resolve-flow-collection.js", "../../yaml/browser/dist/compose/compose-collection.js", "../../yaml/browser/dist/compose/resolve-block-scalar.js", "../../yaml/browser/dist/compose/resolve-flow-scalar.js", "../../yaml/browser/dist/compose/compose-scalar.js", "../../yaml/browser/dist/compose/util-empty-scalar-position.js", "../../yaml/browser/dist/compose/compose-node.js", "../../yaml/browser/dist/compose/compose-doc.js", "../../yaml/browser/dist/compose/composer.js", "../../yaml/browser/dist/parse/cst.js", "../../yaml/browser/dist/parse/cst-scalar.js", "../../yaml/browser/dist/parse/cst-stringify.js", "../../yaml/browser/dist/parse/cst-visit.js", "../../yaml/browser/dist/parse/lexer.js", "../../yaml/browser/dist/parse/line-counter.js", "../../yaml/browser/dist/parse/parser.js", "../../yaml/browser/dist/public-api.js", "../../yaml/browser/index.js"],
  "sourcesContent": ["export { Composer } from './compose/composer.js';\r\nexport { Document } from './doc/Document.js';\r\nexport { Schema } from './schema/Schema.js';\r\nexport { YAMLError, YAMLParseError, YAMLWarning } from './errors.js';\r\nexport { Alias } from './nodes/Alias.js';\r\nexport { isAlias, isCollection, isDocument, isMap, isNode, isPair, isScalar, isSeq } from './nodes/identity.js';\r\nexport { Pair } from './nodes/Pair.js';\r\nexport { Scalar } from './nodes/Scalar.js';\r\nexport { YAMLMap } from './nodes/YAMLMap.js';\r\nexport { YAMLSeq } from './nodes/YAMLSeq.js';\r\nimport * as cst from './parse/cst.js';\r\nexport { cst as CST };\r\nexport { Lexer } from './parse/lexer.js';\r\nexport { LineCounter } from './parse/line-counter.js';\r\nexport { Parser } from './parse/parser.js';\r\nexport { parse, parseAllDocuments, parseDocument, stringify } from './public-api.js';\r\nexport { visit, visitAsync } from './visit.js';\r\n", "const ALIAS = Symbol.for('yaml.alias');\r\nconst DOC = Symbol.for('yaml.document');\r\nconst MAP = Symbol.for('yaml.map');\r\nconst PAIR = Symbol.for('yaml.pair');\r\nconst SCALAR = Symbol.for('yaml.scalar');\r\nconst SEQ = Symbol.for('yaml.seq');\r\nconst NODE_TYPE = Symbol.for('yaml.node.type');\r\nconst isAlias = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;\r\nconst isDocument = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;\r\nconst isMap = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;\r\nconst isPair = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;\r\nconst isScalar = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;\r\nconst isSeq = (node) => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;\r\nfunction isCollection(node) {\r\n    if (node && typeof node === 'object')\r\n        switch (node[NODE_TYPE]) {\r\n            case MAP:\r\n            case SEQ:\r\n                return true;\r\n        }\r\n    return false;\r\n}\r\nfunction isNode(node) {\r\n    if (node && typeof node === 'object')\r\n        switch (node[NODE_TYPE]) {\r\n            case ALIAS:\r\n            case MAP:\r\n            case SCALAR:\r\n            case SEQ:\r\n                return true;\r\n        }\r\n    return false;\r\n}\r\nconst hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;\r\n\r\nexport { ALIAS, DOC, MAP, NODE_TYPE, PAIR, SCALAR, SEQ, hasAnchor, isAlias, isCollection, isDocument, isMap, isNode, isPair, isScalar, isSeq };\r\n", "import { isDocument, isNode, isPair, isCollection, isMap, isSeq, isScalar, isAlias } from './nodes/identity.js';\r\n\r\nconst BREAK = Symbol('break visit');\r\nconst SKIP = Symbol('skip children');\r\nconst REMOVE = Symbol('remove node');\r\n/**\r\n * Apply a visitor to an AST node or document.\r\n *\r\n * Walks through the tree (depth-first) starting from `node`, calling a\r\n * `visitor` function with three arguments:\r\n *   - `key`: For sequence values and map `Pair`, the node's index in the\r\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\r\n *     `null` for the root node.\r\n *   - `node`: The current node.\r\n *   - `path`: The ancestry of the current node.\r\n *\r\n * The return value of the visitor may be used to control the traversal:\r\n *   - `undefined` (default): Do nothing and continue\r\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\r\n *     sibling\r\n *   - `visit.BREAK`: Terminate traversal completely\r\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\r\n *   - `Node`: Replace the current node, then continue by visiting it\r\n *   - `number`: While iterating the items of a sequence or map, set the index\r\n *     of the next step. This is useful especially if the index of the current\r\n *     node has changed.\r\n *\r\n * If `visitor` is a single function, it will be called with all values\r\n * encountered in the tree, including e.g. `null` values. Alternatively,\r\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\r\n * `Alias` and `Scalar` node. To define the same visitor function for more than\r\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\r\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\r\n * specific defined one will be used for each node.\r\n */\r\nfunction visit(node, visitor) {\r\n    const visitor_ = initVisitor(visitor);\r\n    if (isDocument(node)) {\r\n        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));\r\n        if (cd === REMOVE)\r\n            node.contents = null;\r\n    }\r\n    else\r\n        visit_(null, node, visitor_, Object.freeze([]));\r\n}\r\n// Without the `as symbol` casts, TS declares these in the `visit`\r\n// namespace using `var`, but then complains about that because\r\n// `unique symbol` must be `const`.\r\n/** Terminate visit traversal completely */\r\nvisit.BREAK = BREAK;\r\n/** Do not visit the children of the current node */\r\nvisit.SKIP = SKIP;\r\n/** Remove the current node */\r\nvisit.REMOVE = REMOVE;\r\nfunction visit_(key, node, visitor, path) {\r\n    const ctrl = callVisitor(key, node, visitor, path);\r\n    if (isNode(ctrl) || isPair(ctrl)) {\r\n        replaceNode(key, path, ctrl);\r\n        return visit_(key, ctrl, visitor, path);\r\n    }\r\n    if (typeof ctrl !== 'symbol') {\r\n        if (isCollection(node)) {\r\n            path = Object.freeze(path.concat(node));\r\n            for (let i = 0; i < node.items.length; ++i) {\r\n                const ci = visit_(i, node.items[i], visitor, path);\r\n                if (typeof ci === 'number')\r\n                    i = ci - 1;\r\n                else if (ci === BREAK)\r\n                    return BREAK;\r\n                else if (ci === REMOVE) {\r\n                    node.items.splice(i, 1);\r\n                    i -= 1;\r\n                }\r\n            }\r\n        }\r\n        else if (isPair(node)) {\r\n            path = Object.freeze(path.concat(node));\r\n            const ck = visit_('key', node.key, visitor, path);\r\n            if (ck === BREAK)\r\n                return BREAK;\r\n            else if (ck === REMOVE)\r\n                node.key = null;\r\n            const cv = visit_('value', node.value, visitor, path);\r\n            if (cv === BREAK)\r\n                return BREAK;\r\n            else if (cv === REMOVE)\r\n                node.value = null;\r\n        }\r\n    }\r\n    return ctrl;\r\n}\r\n/**\r\n * Apply an async visitor to an AST node or document.\r\n *\r\n * Walks through the tree (depth-first) starting from `node`, calling a\r\n * `visitor` function with three arguments:\r\n *   - `key`: For sequence values and map `Pair`, the node's index in the\r\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\r\n *     `null` for the root node.\r\n *   - `node`: The current node.\r\n *   - `path`: The ancestry of the current node.\r\n *\r\n * The return value of the visitor may be used to control the traversal:\r\n *   - `Promise`: Must resolve to one of the following values\r\n *   - `undefined` (default): Do nothing and continue\r\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\r\n *     sibling\r\n *   - `visit.BREAK`: Terminate traversal completely\r\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\r\n *   - `Node`: Replace the current node, then continue by visiting it\r\n *   - `number`: While iterating the items of a sequence or map, set the index\r\n *     of the next step. This is useful especially if the index of the current\r\n *     node has changed.\r\n *\r\n * If `visitor` is a single function, it will be called with all values\r\n * encountered in the tree, including e.g. `null` values. Alternatively,\r\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\r\n * `Alias` and `Scalar` node. To define the same visitor function for more than\r\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\r\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\r\n * specific defined one will be used for each node.\r\n */\r\nasync function visitAsync(node, visitor) {\r\n    const visitor_ = initVisitor(visitor);\r\n    if (isDocument(node)) {\r\n        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));\r\n        if (cd === REMOVE)\r\n            node.contents = null;\r\n    }\r\n    else\r\n        await visitAsync_(null, node, visitor_, Object.freeze([]));\r\n}\r\n// Without the `as symbol` casts, TS declares these in the `visit`\r\n// namespace using `var`, but then complains about that because\r\n// `unique symbol` must be `const`.\r\n/** Terminate visit traversal completely */\r\nvisitAsync.BREAK = BREAK;\r\n/** Do not visit the children of the current node */\r\nvisitAsync.SKIP = SKIP;\r\n/** Remove the current node */\r\nvisitAsync.REMOVE = REMOVE;\r\nasync function visitAsync_(key, node, visitor, path) {\r\n    const ctrl = await callVisitor(key, node, visitor, path);\r\n    if (isNode(ctrl) || isPair(ctrl)) {\r\n        replaceNode(key, path, ctrl);\r\n        return visitAsync_(key, ctrl, visitor, path);\r\n    }\r\n    if (typeof ctrl !== 'symbol') {\r\n        if (isCollection(node)) {\r\n            path = Object.freeze(path.concat(node));\r\n            for (let i = 0; i < node.items.length; ++i) {\r\n                const ci = await visitAsync_(i, node.items[i], visitor, path);\r\n                if (typeof ci === 'number')\r\n                    i = ci - 1;\r\n                else if (ci === BREAK)\r\n                    return BREAK;\r\n                else if (ci === REMOVE) {\r\n                    node.items.splice(i, 1);\r\n                    i -= 1;\r\n                }\r\n            }\r\n        }\r\n        else if (isPair(node)) {\r\n            path = Object.freeze(path.concat(node));\r\n            const ck = await visitAsync_('key', node.key, visitor, path);\r\n            if (ck === BREAK)\r\n                return BREAK;\r\n            else if (ck === REMOVE)\r\n                node.key = null;\r\n            const cv = await visitAsync_('value', node.value, visitor, path);\r\n            if (cv === BREAK)\r\n                return BREAK;\r\n            else if (cv === REMOVE)\r\n                node.value = null;\r\n        }\r\n    }\r\n    return ctrl;\r\n}\r\nfunction initVisitor(visitor) {\r\n    if (typeof visitor === 'object' &&\r\n        (visitor.Collection || visitor.Node || visitor.Value)) {\r\n        return Object.assign({\r\n            Alias: visitor.Node,\r\n            Map: visitor.Node,\r\n            Scalar: visitor.Node,\r\n            Seq: visitor.Node\r\n        }, visitor.Value && {\r\n            Map: visitor.Value,\r\n            Scalar: visitor.Value,\r\n            Seq: visitor.Value\r\n        }, visitor.Collection && {\r\n            Map: visitor.Collection,\r\n            Seq: visitor.Collection\r\n        }, visitor);\r\n    }\r\n    return visitor;\r\n}\r\nfunction callVisitor(key, node, visitor, path) {\r\n    if (typeof visitor === 'function')\r\n        return visitor(key, node, path);\r\n    if (isMap(node))\r\n        return visitor.Map?.(key, node, path);\r\n    if (isSeq(node))\r\n        return visitor.Seq?.(key, node, path);\r\n    if (isPair(node))\r\n        return visitor.Pair?.(key, node, path);\r\n    if (isScalar(node))\r\n        return visitor.Scalar?.(key, node, path);\r\n    if (isAlias(node))\r\n        return visitor.Alias?.(key, node, path);\r\n    return undefined;\r\n}\r\nfunction replaceNode(key, path, node) {\r\n    const parent = path[path.length - 1];\r\n    if (isCollection(parent)) {\r\n        parent.items[key] = node;\r\n    }\r\n    else if (isPair(parent)) {\r\n        if (key === 'key')\r\n            parent.key = node;\r\n        else\r\n            parent.value = node;\r\n    }\r\n    else if (isDocument(parent)) {\r\n        parent.contents = node;\r\n    }\r\n    else {\r\n        const pt = isAlias(parent) ? 'alias' : 'scalar';\r\n        throw new Error(`Cannot replace node with ${pt} parent`);\r\n    }\r\n}\r\n\r\nexport { visit, visitAsync };\r\n", "import { isNode } from '../nodes/identity.js';\r\nimport { visit } from '../visit.js';\r\n\r\nconst escapeChars = {\r\n    '!': '%21',\r\n    ',': '%2C',\r\n    '[': '%5B',\r\n    ']': '%5D',\r\n    '{': '%7B',\r\n    '}': '%7D'\r\n};\r\nconst escapeTagName = (tn) => tn.replace(/[!,[\\]{}]/g, ch => escapeChars[ch]);\r\nclass Directives {\r\n    constructor(yaml, tags) {\r\n        /**\r\n         * The directives-end/doc-start marker `---`. If `null`, a marker may still be\r\n         * included in the document's stringified representation.\r\n         */\r\n        this.docStart = null;\r\n        /** The doc-end marker `...`.  */\r\n        this.docEnd = false;\r\n        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);\r\n        this.tags = Object.assign({}, Directives.defaultTags, tags);\r\n    }\r\n    clone() {\r\n        const copy = new Directives(this.yaml, this.tags);\r\n        copy.docStart = this.docStart;\r\n        return copy;\r\n    }\r\n    /**\r\n     * During parsing, get a Directives instance for the current document and\r\n     * update the stream state according to the current version's spec.\r\n     */\r\n    atDocument() {\r\n        const res = new Directives(this.yaml, this.tags);\r\n        switch (this.yaml.version) {\r\n            case '1.1':\r\n                this.atNextDocument = true;\r\n                break;\r\n            case '1.2':\r\n                this.atNextDocument = false;\r\n                this.yaml = {\r\n                    explicit: Directives.defaultYaml.explicit,\r\n                    version: '1.2'\r\n                };\r\n                this.tags = Object.assign({}, Directives.defaultTags);\r\n                break;\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * @param onError - May be called even if the action was successful\r\n     * @returns `true` on success\r\n     */\r\n    add(line, onError) {\r\n        if (this.atNextDocument) {\r\n            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };\r\n            this.tags = Object.assign({}, Directives.defaultTags);\r\n            this.atNextDocument = false;\r\n        }\r\n        const parts = line.trim().split(/[ \\t]+/);\r\n        const name = parts.shift();\r\n        switch (name) {\r\n            case '%TAG': {\r\n                if (parts.length !== 2) {\r\n                    onError(0, '%TAG directive should contain exactly two parts');\r\n                    if (parts.length < 2)\r\n                        return false;\r\n                }\r\n                const [handle, prefix] = parts;\r\n                this.tags[handle] = prefix;\r\n                return true;\r\n            }\r\n            case '%YAML': {\r\n                this.yaml.explicit = true;\r\n                if (parts.length !== 1) {\r\n                    onError(0, '%YAML directive should contain exactly one part');\r\n                    return false;\r\n                }\r\n                const [version] = parts;\r\n                if (version === '1.1' || version === '1.2') {\r\n                    this.yaml.version = version;\r\n                    return true;\r\n                }\r\n                else {\r\n                    const isValid = /^\\d+\\.\\d+$/.test(version);\r\n                    onError(6, `Unsupported YAML version ${version}`, isValid);\r\n                    return false;\r\n                }\r\n            }\r\n            default:\r\n                onError(0, `Unknown directive ${name}`, true);\r\n                return false;\r\n        }\r\n    }\r\n    /**\r\n     * Resolves a tag, matching handles to those defined in %TAG directives.\r\n     *\r\n     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a\r\n     *   `'!local'` tag, or `null` if unresolvable.\r\n     */\r\n    tagName(source, onError) {\r\n        if (source === '!')\r\n            return '!'; // non-specific tag\r\n        if (source[0] !== '!') {\r\n            onError(`Not a valid tag: ${source}`);\r\n            return null;\r\n        }\r\n        if (source[1] === '<') {\r\n            const verbatim = source.slice(2, -1);\r\n            if (verbatim === '!' || verbatim === '!!') {\r\n                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);\r\n                return null;\r\n            }\r\n            if (source[source.length - 1] !== '>')\r\n                onError('Verbatim tags must end with a >');\r\n            return verbatim;\r\n        }\r\n        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);\r\n        if (!suffix)\r\n            onError(`The ${source} tag has no suffix`);\r\n        const prefix = this.tags[handle];\r\n        if (prefix) {\r\n            try {\r\n                return prefix + decodeURIComponent(suffix);\r\n            }\r\n            catch (error) {\r\n                onError(String(error));\r\n                return null;\r\n            }\r\n        }\r\n        if (handle === '!')\r\n            return source; // local tag\r\n        onError(`Could not resolve tag: ${source}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * Given a fully resolved tag, returns its printable string form,\r\n     * taking into account current tag prefixes and defaults.\r\n     */\r\n    tagString(tag) {\r\n        for (const [handle, prefix] of Object.entries(this.tags)) {\r\n            if (tag.startsWith(prefix))\r\n                return handle + escapeTagName(tag.substring(prefix.length));\r\n        }\r\n        return tag[0] === '!' ? tag : `!<${tag}>`;\r\n    }\r\n    toString(doc) {\r\n        const lines = this.yaml.explicit\r\n            ? [`%YAML ${this.yaml.version || '1.2'}`]\r\n            : [];\r\n        const tagEntries = Object.entries(this.tags);\r\n        let tagNames;\r\n        if (doc && tagEntries.length > 0 && isNode(doc.contents)) {\r\n            const tags = {};\r\n            visit(doc.contents, (_key, node) => {\r\n                if (isNode(node) && node.tag)\r\n                    tags[node.tag] = true;\r\n            });\r\n            tagNames = Object.keys(tags);\r\n        }\r\n        else\r\n            tagNames = [];\r\n        for (const [handle, prefix] of tagEntries) {\r\n            if (handle === '!!' && prefix === 'tag:yaml.org,2002:')\r\n                continue;\r\n            if (!doc || tagNames.some(tn => tn.startsWith(prefix)))\r\n                lines.push(`%TAG ${handle} ${prefix}`);\r\n        }\r\n        return lines.join('\\n');\r\n    }\r\n}\r\nDirectives.defaultYaml = { explicit: false, version: '1.2' };\r\nDirectives.defaultTags = { '!!': 'tag:yaml.org,2002:' };\r\n\r\nexport { Directives };\r\n", "import { isScalar, isCollection } from '../nodes/identity.js';\r\nimport { visit } from '../visit.js';\r\n\r\n/**\r\n * Verify that the input string is a valid anchor.\r\n *\r\n * Will throw on errors.\r\n */\r\nfunction anchorIsValid(anchor) {\r\n    if (/[\\x00-\\x19\\s,[\\]{}]/.test(anchor)) {\r\n        const sa = JSON.stringify(anchor);\r\n        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;\r\n        throw new Error(msg);\r\n    }\r\n    return true;\r\n}\r\nfunction anchorNames(root) {\r\n    const anchors = new Set();\r\n    visit(root, {\r\n        Value(_key, node) {\r\n            if (node.anchor)\r\n                anchors.add(node.anchor);\r\n        }\r\n    });\r\n    return anchors;\r\n}\r\n/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */\r\nfunction findNewAnchor(prefix, exclude) {\r\n    for (let i = 1; true; ++i) {\r\n        const name = `${prefix}${i}`;\r\n        if (!exclude.has(name))\r\n            return name;\r\n    }\r\n}\r\nfunction createNodeAnchors(doc, prefix) {\r\n    const aliasObjects = [];\r\n    const sourceObjects = new Map();\r\n    let prevAnchors = null;\r\n    return {\r\n        onAnchor: (source) => {\r\n            aliasObjects.push(source);\r\n            prevAnchors ?? (prevAnchors = anchorNames(doc));\r\n            const anchor = findNewAnchor(prefix, prevAnchors);\r\n            prevAnchors.add(anchor);\r\n            return anchor;\r\n        },\r\n        /**\r\n         * With circular references, the source node is only resolved after all\r\n         * of its child nodes are. This is why anchors are set only after all of\r\n         * the nodes have been created.\r\n         */\r\n        setAnchors: () => {\r\n            for (const source of aliasObjects) {\r\n                const ref = sourceObjects.get(source);\r\n                if (typeof ref === 'object' &&\r\n                    ref.anchor &&\r\n                    (isScalar(ref.node) || isCollection(ref.node))) {\r\n                    ref.node.anchor = ref.anchor;\r\n                }\r\n                else {\r\n                    const error = new Error('Failed to resolve repeated object (this should not happen)');\r\n                    error.source = source;\r\n                    throw error;\r\n                }\r\n            }\r\n        },\r\n        sourceObjects\r\n    };\r\n}\r\n\r\nexport { anchorIsValid, anchorNames, createNodeAnchors, findNewAnchor };\r\n", "/**\r\n * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,\r\n * in section 24.5.1.1 \"Runtime Semantics: InternalizeJSONProperty\" of the\r\n * 2021 edition: https://tc39.es/ecma262/#sec-json.parse\r\n *\r\n * Includes extensions for handling Map and Set objects.\r\n */\r\nfunction applyReviver(reviver, obj, key, val) {\r\n    if (val && typeof val === 'object') {\r\n        if (Array.isArray(val)) {\r\n            for (let i = 0, len = val.length; i < len; ++i) {\r\n                const v0 = val[i];\r\n                const v1 = applyReviver(reviver, val, String(i), v0);\r\n                // eslint-disable-next-line @typescript-eslint/no-array-delete\r\n                if (v1 === undefined)\r\n                    delete val[i];\r\n                else if (v1 !== v0)\r\n                    val[i] = v1;\r\n            }\r\n        }\r\n        else if (val instanceof Map) {\r\n            for (const k of Array.from(val.keys())) {\r\n                const v0 = val.get(k);\r\n                const v1 = applyReviver(reviver, val, k, v0);\r\n                if (v1 === undefined)\r\n                    val.delete(k);\r\n                else if (v1 !== v0)\r\n                    val.set(k, v1);\r\n            }\r\n        }\r\n        else if (val instanceof Set) {\r\n            for (const v0 of Array.from(val)) {\r\n                const v1 = applyReviver(reviver, val, v0, v0);\r\n                if (v1 === undefined)\r\n                    val.delete(v0);\r\n                else if (v1 !== v0) {\r\n                    val.delete(v0);\r\n                    val.add(v1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (const [k, v0] of Object.entries(val)) {\r\n                const v1 = applyReviver(reviver, val, k, v0);\r\n                if (v1 === undefined)\r\n                    delete val[k];\r\n                else if (v1 !== v0)\r\n                    val[k] = v1;\r\n            }\r\n        }\r\n    }\r\n    return reviver.call(obj, key, val);\r\n}\r\n\r\nexport { applyReviver };\r\n", "import { hasAnchor } from './identity.js';\r\n\r\n/**\r\n * Recursively convert any node or its contents to native JavaScript\r\n *\r\n * @param value - The input value\r\n * @param arg - If `value` defines a `toJSON()` method, use this\r\n *   as its first argument\r\n * @param ctx - Conversion context, originally set in Document#toJS(). If\r\n *   `{ keep: true }` is not set, output should be suitable for JSON\r\n *   stringification.\r\n */\r\nfunction toJS(value, arg, ctx) {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    if (Array.isArray(value))\r\n        return value.map((v, i) => toJS(v, String(i), ctx));\r\n    if (value && typeof value.toJSON === 'function') {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n        if (!ctx || !hasAnchor(value))\r\n            return value.toJSON(arg, ctx);\r\n        const data = { aliasCount: 0, count: 1, res: undefined };\r\n        ctx.anchors.set(value, data);\r\n        ctx.onCreate = res => {\r\n            data.res = res;\r\n            delete ctx.onCreate;\r\n        };\r\n        const res = value.toJSON(arg, ctx);\r\n        if (ctx.onCreate)\r\n            ctx.onCreate(res);\r\n        return res;\r\n    }\r\n    if (typeof value === 'bigint' && !ctx?.keep)\r\n        return Number(value);\r\n    return value;\r\n}\r\n\r\nexport { toJS };\r\n", "import { applyReviver } from '../doc/applyReviver.js';\r\nimport { NODE_TYPE, isDocument } from './identity.js';\r\nimport { toJS } from './toJS.js';\r\n\r\nclass NodeBase {\r\n    constructor(type) {\r\n        Object.defineProperty(this, NODE_TYPE, { value: type });\r\n    }\r\n    /** Create a copy of this node.  */\r\n    clone() {\r\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\r\n        if (this.range)\r\n            copy.range = this.range.slice();\r\n        return copy;\r\n    }\r\n    /** A plain JavaScript representation of this node. */\r\n    toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\r\n        if (!isDocument(doc))\r\n            throw new TypeError('A document argument is required');\r\n        const ctx = {\r\n            anchors: new Map(),\r\n            doc,\r\n            keep: true,\r\n            mapAsMap: mapAsMap === true,\r\n            mapKeyWarned: false,\r\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\r\n        };\r\n        const res = toJS(this, '', ctx);\r\n        if (typeof onAnchor === 'function')\r\n            for (const { count, res } of ctx.anchors.values())\r\n                onAnchor(res, count);\r\n        return typeof reviver === 'function'\r\n            ? applyReviver(reviver, { '': res }, '', res)\r\n            : res;\r\n    }\r\n}\r\n\r\nexport { NodeBase };\r\n", "import { anchorIsValid } from '../doc/anchors.js';\r\nimport { visit } from '../visit.js';\r\nimport { ALIAS, isAlias, isCollection, isPair, hasAnchor } from './identity.js';\r\nimport { NodeBase } from './Node.js';\r\nimport { toJS } from './toJS.js';\r\n\r\nclass Alias extends NodeBase {\r\n    constructor(source) {\r\n        super(ALIAS);\r\n        this.source = source;\r\n        Object.defineProperty(this, 'tag', {\r\n            set() {\r\n                throw new Error('Alias nodes cannot have tags');\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Resolve the value of this alias within `doc`, finding the last\r\n     * instance of the `source` anchor before this node.\r\n     */\r\n    resolve(doc, ctx) {\r\n        let nodes;\r\n        if (ctx?.aliasResolveCache) {\r\n            nodes = ctx.aliasResolveCache;\r\n        }\r\n        else {\r\n            nodes = [];\r\n            visit(doc, {\r\n                Node: (_key, node) => {\r\n                    if (isAlias(node) || hasAnchor(node))\r\n                        nodes.push(node);\r\n                }\r\n            });\r\n            if (ctx)\r\n                ctx.aliasResolveCache = nodes;\r\n        }\r\n        let found = undefined;\r\n        for (const node of nodes) {\r\n            if (node === this)\r\n                break;\r\n            if (node.anchor === this.source)\r\n                found = node;\r\n        }\r\n        return found;\r\n    }\r\n    toJSON(_arg, ctx) {\r\n        if (!ctx)\r\n            return { source: this.source };\r\n        const { anchors, doc, maxAliasCount } = ctx;\r\n        const source = this.resolve(doc, ctx);\r\n        if (!source) {\r\n            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\r\n            throw new ReferenceError(msg);\r\n        }\r\n        let data = anchors.get(source);\r\n        if (!data) {\r\n            // Resolve anchors for Node.prototype.toJS()\r\n            toJS(source, null, ctx);\r\n            data = anchors.get(source);\r\n        }\r\n        /* istanbul ignore if */\r\n        if (!data || data.res === undefined) {\r\n            const msg = 'This should not happen: Alias anchor was not resolved?';\r\n            throw new ReferenceError(msg);\r\n        }\r\n        if (maxAliasCount >= 0) {\r\n            data.count += 1;\r\n            if (data.aliasCount === 0)\r\n                data.aliasCount = getAliasCount(doc, source, anchors);\r\n            if (data.count * data.aliasCount > maxAliasCount) {\r\n                const msg = 'Excessive alias count indicates a resource exhaustion attack';\r\n                throw new ReferenceError(msg);\r\n            }\r\n        }\r\n        return data.res;\r\n    }\r\n    toString(ctx, _onComment, _onChompKeep) {\r\n        const src = `*${this.source}`;\r\n        if (ctx) {\r\n            anchorIsValid(this.source);\r\n            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {\r\n                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;\r\n                throw new Error(msg);\r\n            }\r\n            if (ctx.implicitKey)\r\n                return `${src} `;\r\n        }\r\n        return src;\r\n    }\r\n}\r\nfunction getAliasCount(doc, node, anchors) {\r\n    if (isAlias(node)) {\r\n        const source = node.resolve(doc);\r\n        const anchor = anchors && source && anchors.get(source);\r\n        return anchor ? anchor.count * anchor.aliasCount : 0;\r\n    }\r\n    else if (isCollection(node)) {\r\n        let count = 0;\r\n        for (const item of node.items) {\r\n            const c = getAliasCount(doc, item, anchors);\r\n            if (c > count)\r\n                count = c;\r\n        }\r\n        return count;\r\n    }\r\n    else if (isPair(node)) {\r\n        const kc = getAliasCount(doc, node.key, anchors);\r\n        const vc = getAliasCount(doc, node.value, anchors);\r\n        return Math.max(kc, vc);\r\n    }\r\n    return 1;\r\n}\r\n\r\nexport { Alias };\r\n", "import { SCALAR } from './identity.js';\r\nimport { NodeBase } from './Node.js';\r\nimport { toJS } from './toJS.js';\r\n\r\nconst isScalarValue = (value) => !value || (typeof value !== 'function' && typeof value !== 'object');\r\nclass Scalar extends NodeBase {\r\n    constructor(value) {\r\n        super(SCALAR);\r\n        this.value = value;\r\n    }\r\n    toJSON(arg, ctx) {\r\n        return ctx?.keep ? this.value : toJS(this.value, arg, ctx);\r\n    }\r\n    toString() {\r\n        return String(this.value);\r\n    }\r\n}\r\nScalar.BLOCK_FOLDED = 'BLOCK_FOLDED';\r\nScalar.BLOCK_LITERAL = 'BLOCK_LITERAL';\r\nScalar.PLAIN = 'PLAIN';\r\nScalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';\r\nScalar.QUOTE_SINGLE = 'QUOTE_SINGLE';\r\n\r\nexport { Scalar, isScalarValue };\r\n", "import { Alias } from '../nodes/Alias.js';\r\nimport { isNode, isPair, MAP, SEQ, isDocument } from '../nodes/identity.js';\r\nimport { Scalar } from '../nodes/Scalar.js';\r\n\r\nconst defaultTagPrefix = 'tag:yaml.org,2002:';\r\nfunction findTagObject(value, tagName, tags) {\r\n    if (tagName) {\r\n        const match = tags.filter(t => t.tag === tagName);\r\n        const tagObj = match.find(t => !t.format) ?? match[0];\r\n        if (!tagObj)\r\n            throw new Error(`Tag ${tagName} not found`);\r\n        return tagObj;\r\n    }\r\n    return tags.find(t => t.identify?.(value) && !t.format);\r\n}\r\nfunction createNode(value, tagName, ctx) {\r\n    if (isDocument(value))\r\n        value = value.contents;\r\n    if (isNode(value))\r\n        return value;\r\n    if (isPair(value)) {\r\n        const map = ctx.schema[MAP].createNode?.(ctx.schema, null, ctx);\r\n        map.items.push(value);\r\n        return map;\r\n    }\r\n    if (value instanceof String ||\r\n        value instanceof Number ||\r\n        value instanceof Boolean ||\r\n        (typeof BigInt !== 'undefined' && value instanceof BigInt) // not supported everywhere\r\n    ) {\r\n        // https://tc39.es/ecma262/#sec-serializejsonproperty\r\n        value = value.valueOf();\r\n    }\r\n    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;\r\n    // Detect duplicate references to the same object & use Alias nodes for all\r\n    // after first. The `ref` wrapper allows for circular references to resolve.\r\n    let ref = undefined;\r\n    if (aliasDuplicateObjects && value && typeof value === 'object') {\r\n        ref = sourceObjects.get(value);\r\n        if (ref) {\r\n            ref.anchor ?? (ref.anchor = onAnchor(value));\r\n            return new Alias(ref.anchor);\r\n        }\r\n        else {\r\n            ref = { anchor: null, node: null };\r\n            sourceObjects.set(value, ref);\r\n        }\r\n    }\r\n    if (tagName?.startsWith('!!'))\r\n        tagName = defaultTagPrefix + tagName.slice(2);\r\n    let tagObj = findTagObject(value, tagName, schema.tags);\r\n    if (!tagObj) {\r\n        if (value && typeof value.toJSON === 'function') {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\r\n            value = value.toJSON();\r\n        }\r\n        if (!value || typeof value !== 'object') {\r\n            const node = new Scalar(value);\r\n            if (ref)\r\n                ref.node = node;\r\n            return node;\r\n        }\r\n        tagObj =\r\n            value instanceof Map\r\n                ? schema[MAP]\r\n                : Symbol.iterator in Object(value)\r\n                    ? schema[SEQ]\r\n                    : schema[MAP];\r\n    }\r\n    if (onTagObj) {\r\n        onTagObj(tagObj);\r\n        delete ctx.onTagObj;\r\n    }\r\n    const node = tagObj?.createNode\r\n        ? tagObj.createNode(ctx.schema, value, ctx)\r\n        : typeof tagObj?.nodeClass?.from === 'function'\r\n            ? tagObj.nodeClass.from(ctx.schema, value, ctx)\r\n            : new Scalar(value);\r\n    if (tagName)\r\n        node.tag = tagName;\r\n    else if (!tagObj.default)\r\n        node.tag = tagObj.tag;\r\n    if (ref)\r\n        ref.node = node;\r\n    return node;\r\n}\r\n\r\nexport { createNode };\r\n", "import { createNode } from '../doc/createNode.js';\r\nimport { isNode, isPair, isCollection, isScalar } from './identity.js';\r\nimport { NodeBase } from './Node.js';\r\n\r\nfunction collectionFromPath(schema, path, value) {\r\n    let v = value;\r\n    for (let i = path.length - 1; i >= 0; --i) {\r\n        const k = path[i];\r\n        if (typeof k === 'number' && Number.isInteger(k) && k >= 0) {\r\n            const a = [];\r\n            a[k] = v;\r\n            v = a;\r\n        }\r\n        else {\r\n            v = new Map([[k, v]]);\r\n        }\r\n    }\r\n    return createNode(v, undefined, {\r\n        aliasDuplicateObjects: false,\r\n        keepUndefined: false,\r\n        onAnchor: () => {\r\n            throw new Error('This should not happen, please report a bug.');\r\n        },\r\n        schema,\r\n        sourceObjects: new Map()\r\n    });\r\n}\r\n// Type guard is intentionally a little wrong so as to be more useful,\r\n// as it does not cover untypable empty non-string iterables (e.g. []).\r\nconst isEmptyPath = (path) => path == null ||\r\n    (typeof path === 'object' && !!path[Symbol.iterator]().next().done);\r\nclass Collection extends NodeBase {\r\n    constructor(type, schema) {\r\n        super(type);\r\n        Object.defineProperty(this, 'schema', {\r\n            value: schema,\r\n            configurable: true,\r\n            enumerable: false,\r\n            writable: true\r\n        });\r\n    }\r\n    /**\r\n     * Create a copy of this collection.\r\n     *\r\n     * @param schema - If defined, overwrites the original's schema\r\n     */\r\n    clone(schema) {\r\n        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));\r\n        if (schema)\r\n            copy.schema = schema;\r\n        copy.items = copy.items.map(it => isNode(it) || isPair(it) ? it.clone(schema) : it);\r\n        if (this.range)\r\n            copy.range = this.range.slice();\r\n        return copy;\r\n    }\r\n    /**\r\n     * Adds a value to the collection. For `!!map` and `!!omap` the value must\r\n     * be a Pair instance or a `{ key, value }` object, which may not have a key\r\n     * that already exists in the map.\r\n     */\r\n    addIn(path, value) {\r\n        if (isEmptyPath(path))\r\n            this.add(value);\r\n        else {\r\n            const [key, ...rest] = path;\r\n            const node = this.get(key, true);\r\n            if (isCollection(node))\r\n                node.addIn(rest, value);\r\n            else if (node === undefined && this.schema)\r\n                this.set(key, collectionFromPath(this.schema, rest, value));\r\n            else\r\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\r\n        }\r\n    }\r\n    /**\r\n     * Removes a value from the collection.\r\n     * @returns `true` if the item was found and removed.\r\n     */\r\n    deleteIn(path) {\r\n        const [key, ...rest] = path;\r\n        if (rest.length === 0)\r\n            return this.delete(key);\r\n        const node = this.get(key, true);\r\n        if (isCollection(node))\r\n            return node.deleteIn(rest);\r\n        else\r\n            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\r\n    }\r\n    /**\r\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\r\n     * scalar values from their surrounding node; to disable set `keepScalar` to\r\n     * `true` (collections are always returned intact).\r\n     */\r\n    getIn(path, keepScalar) {\r\n        const [key, ...rest] = path;\r\n        const node = this.get(key, true);\r\n        if (rest.length === 0)\r\n            return !keepScalar && isScalar(node) ? node.value : node;\r\n        else\r\n            return isCollection(node) ? node.getIn(rest, keepScalar) : undefined;\r\n    }\r\n    hasAllNullValues(allowScalar) {\r\n        return this.items.every(node => {\r\n            if (!isPair(node))\r\n                return false;\r\n            const n = node.value;\r\n            return (n == null ||\r\n                (allowScalar &&\r\n                    isScalar(n) &&\r\n                    n.value == null &&\r\n                    !n.commentBefore &&\r\n                    !n.comment &&\r\n                    !n.tag));\r\n        });\r\n    }\r\n    /**\r\n     * Checks if the collection includes a value with the key `key`.\r\n     */\r\n    hasIn(path) {\r\n        const [key, ...rest] = path;\r\n        if (rest.length === 0)\r\n            return this.has(key);\r\n        const node = this.get(key, true);\r\n        return isCollection(node) ? node.hasIn(rest) : false;\r\n    }\r\n    /**\r\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\r\n     * boolean to add/remove the item from the set.\r\n     */\r\n    setIn(path, value) {\r\n        const [key, ...rest] = path;\r\n        if (rest.length === 0) {\r\n            this.set(key, value);\r\n        }\r\n        else {\r\n            const node = this.get(key, true);\r\n            if (isCollection(node))\r\n                node.setIn(rest, value);\r\n            else if (node === undefined && this.schema)\r\n                this.set(key, collectionFromPath(this.schema, rest, value));\r\n            else\r\n                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport { Collection, collectionFromPath, isEmptyPath };\r\n", "/**\r\n * Stringifies a comment.\r\n *\r\n * Empty comment lines are left empty,\r\n * lines consisting of a single space are replaced by `#`,\r\n * and all other lines are prefixed with a `#`.\r\n */\r\nconst stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, '#');\r\nfunction indentComment(comment, indent) {\r\n    if (/^\\n+$/.test(comment))\r\n        return comment.substring(1);\r\n    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;\r\n}\r\nconst lineComment = (str, indent, comment) => str.endsWith('\\n')\r\n    ? indentComment(comment, indent)\r\n    : comment.includes('\\n')\r\n        ? '\\n' + indentComment(comment, indent)\r\n        : (str.endsWith(' ') ? '' : ' ') + comment;\r\n\r\nexport { indentComment, lineComment, stringifyComment };\r\n", "const FOLD_FLOW = 'flow';\r\nconst FOLD_BLOCK = 'block';\r\nconst FOLD_QUOTED = 'quoted';\r\n/**\r\n * Tries to keep input at up to `lineWidth` characters, splitting only on spaces\r\n * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are\r\n * terminated with `\\n` and started with `indent`.\r\n */\r\nfunction foldFlowLines(text, indent, mode = 'flow', { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {\r\n    if (!lineWidth || lineWidth < 0)\r\n        return text;\r\n    if (lineWidth < minContentWidth)\r\n        minContentWidth = 0;\r\n    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);\r\n    if (text.length <= endStep)\r\n        return text;\r\n    const folds = [];\r\n    const escapedFolds = {};\r\n    let end = lineWidth - indent.length;\r\n    if (typeof indentAtStart === 'number') {\r\n        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))\r\n            folds.push(0);\r\n        else\r\n            end = lineWidth - indentAtStart;\r\n    }\r\n    let split = undefined;\r\n    let prev = undefined;\r\n    let overflow = false;\r\n    let i = -1;\r\n    let escStart = -1;\r\n    let escEnd = -1;\r\n    if (mode === FOLD_BLOCK) {\r\n        i = consumeMoreIndentedLines(text, i, indent.length);\r\n        if (i !== -1)\r\n            end = i + endStep;\r\n    }\r\n    for (let ch; (ch = text[(i += 1)]);) {\r\n        if (mode === FOLD_QUOTED && ch === '\\\\') {\r\n            escStart = i;\r\n            switch (text[i + 1]) {\r\n                case 'x':\r\n                    i += 3;\r\n                    break;\r\n                case 'u':\r\n                    i += 5;\r\n                    break;\r\n                case 'U':\r\n                    i += 9;\r\n                    break;\r\n                default:\r\n                    i += 1;\r\n            }\r\n            escEnd = i;\r\n        }\r\n        if (ch === '\\n') {\r\n            if (mode === FOLD_BLOCK)\r\n                i = consumeMoreIndentedLines(text, i, indent.length);\r\n            end = i + indent.length + endStep;\r\n            split = undefined;\r\n        }\r\n        else {\r\n            if (ch === ' ' &&\r\n                prev &&\r\n                prev !== ' ' &&\r\n                prev !== '\\n' &&\r\n                prev !== '\\t') {\r\n                // space surrounded by non-space can be replaced with newline + indent\r\n                const next = text[i + 1];\r\n                if (next && next !== ' ' && next !== '\\n' && next !== '\\t')\r\n                    split = i;\r\n            }\r\n            if (i >= end) {\r\n                if (split) {\r\n                    folds.push(split);\r\n                    end = split + endStep;\r\n                    split = undefined;\r\n                }\r\n                else if (mode === FOLD_QUOTED) {\r\n                    // white-space collected at end may stretch past lineWidth\r\n                    while (prev === ' ' || prev === '\\t') {\r\n                        prev = ch;\r\n                        ch = text[(i += 1)];\r\n                        overflow = true;\r\n                    }\r\n                    // Account for newline escape, but don't break preceding escape\r\n                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;\r\n                    // Bail out if lineWidth & minContentWidth are shorter than an escape string\r\n                    if (escapedFolds[j])\r\n                        return text;\r\n                    folds.push(j);\r\n                    escapedFolds[j] = true;\r\n                    end = j + endStep;\r\n                    split = undefined;\r\n                }\r\n                else {\r\n                    overflow = true;\r\n                }\r\n            }\r\n        }\r\n        prev = ch;\r\n    }\r\n    if (overflow && onOverflow)\r\n        onOverflow();\r\n    if (folds.length === 0)\r\n        return text;\r\n    if (onFold)\r\n        onFold();\r\n    let res = text.slice(0, folds[0]);\r\n    for (let i = 0; i < folds.length; ++i) {\r\n        const fold = folds[i];\r\n        const end = folds[i + 1] || text.length;\r\n        if (fold === 0)\r\n            res = `\\n${indent}${text.slice(0, end)}`;\r\n        else {\r\n            if (mode === FOLD_QUOTED && escapedFolds[fold])\r\n                res += `${text[fold]}\\\\`;\r\n            res += `\\n${indent}${text.slice(fold + 1, end)}`;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Presumes `i + 1` is at the start of a line\r\n * @returns index of last newline in more-indented block\r\n */\r\nfunction consumeMoreIndentedLines(text, i, indent) {\r\n    let end = i;\r\n    let start = i + 1;\r\n    let ch = text[start];\r\n    while (ch === ' ' || ch === '\\t') {\r\n        if (i < start + indent) {\r\n            ch = text[++i];\r\n        }\r\n        else {\r\n            do {\r\n                ch = text[++i];\r\n            } while (ch && ch !== '\\n');\r\n            end = i;\r\n            start = i + 1;\r\n            ch = text[start];\r\n        }\r\n    }\r\n    return end;\r\n}\r\n\r\nexport { FOLD_BLOCK, FOLD_FLOW, FOLD_QUOTED, foldFlowLines };\r\n", "import { Scalar } from '../nodes/Scalar.js';\r\nimport { foldFlowLines, FOLD_FLOW, FOLD_QUOTED, FOLD_BLOCK } from './foldFlowLines.js';\r\n\r\nconst getFoldOptions = (ctx, isBlock) => ({\r\n    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,\r\n    lineWidth: ctx.options.lineWidth,\r\n    minContentWidth: ctx.options.minContentWidth\r\n});\r\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\r\n// presume that's starting a new document.\r\nconst containsDocumentMarker = (str) => /^(%|---|\\.\\.\\.)/m.test(str);\r\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\r\n    if (!lineWidth || lineWidth < 0)\r\n        return false;\r\n    const limit = lineWidth - indentLength;\r\n    const strLen = str.length;\r\n    if (strLen <= limit)\r\n        return false;\r\n    for (let i = 0, start = 0; i < strLen; ++i) {\r\n        if (str[i] === '\\n') {\r\n            if (i - start > limit)\r\n                return true;\r\n            start = i + 1;\r\n            if (strLen - start <= limit)\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction doubleQuotedString(value, ctx) {\r\n    const json = JSON.stringify(value);\r\n    if (ctx.options.doubleQuotedAsJSON)\r\n        return json;\r\n    const { implicitKey } = ctx;\r\n    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\r\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\r\n    let str = '';\r\n    let start = 0;\r\n    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\r\n        if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\r\n            // space before newline needs to be escaped to not be folded\r\n            str += json.slice(start, i) + '\\\\ ';\r\n            i += 1;\r\n            start = i;\r\n            ch = '\\\\';\r\n        }\r\n        if (ch === '\\\\')\r\n            switch (json[i + 1]) {\r\n                case 'u':\r\n                    {\r\n                        str += json.slice(start, i);\r\n                        const code = json.substr(i + 2, 4);\r\n                        switch (code) {\r\n                            case '0000':\r\n                                str += '\\\\0';\r\n                                break;\r\n                            case '0007':\r\n                                str += '\\\\a';\r\n                                break;\r\n                            case '000b':\r\n                                str += '\\\\v';\r\n                                break;\r\n                            case '001b':\r\n                                str += '\\\\e';\r\n                                break;\r\n                            case '0085':\r\n                                str += '\\\\N';\r\n                                break;\r\n                            case '00a0':\r\n                                str += '\\\\_';\r\n                                break;\r\n                            case '2028':\r\n                                str += '\\\\L';\r\n                                break;\r\n                            case '2029':\r\n                                str += '\\\\P';\r\n                                break;\r\n                            default:\r\n                                if (code.substr(0, 2) === '00')\r\n                                    str += '\\\\x' + code.substr(2);\r\n                                else\r\n                                    str += json.substr(i, 6);\r\n                        }\r\n                        i += 5;\r\n                        start = i + 1;\r\n                    }\r\n                    break;\r\n                case 'n':\r\n                    if (implicitKey ||\r\n                        json[i + 2] === '\"' ||\r\n                        json.length < minMultiLineLength) {\r\n                        i += 1;\r\n                    }\r\n                    else {\r\n                        // folding will eat first newline\r\n                        str += json.slice(start, i) + '\\n\\n';\r\n                        while (json[i + 2] === '\\\\' &&\r\n                            json[i + 3] === 'n' &&\r\n                            json[i + 4] !== '\"') {\r\n                            str += '\\n';\r\n                            i += 2;\r\n                        }\r\n                        str += indent;\r\n                        // space after newline needs to be escaped to not be folded\r\n                        if (json[i + 2] === ' ')\r\n                            str += '\\\\';\r\n                        i += 1;\r\n                        start = i + 1;\r\n                    }\r\n                    break;\r\n                default:\r\n                    i += 1;\r\n            }\r\n    }\r\n    str = start ? str + json.slice(start) : json;\r\n    return implicitKey\r\n        ? str\r\n        : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx, false));\r\n}\r\nfunction singleQuotedString(value, ctx) {\r\n    if (ctx.options.singleQuote === false ||\r\n        (ctx.implicitKey && value.includes('\\n')) ||\r\n        /[ \\t]\\n|\\n[ \\t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline\r\n    )\r\n        return doubleQuotedString(value, ctx);\r\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\r\n    const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\r\n    return ctx.implicitKey\r\n        ? res\r\n        : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx, false));\r\n}\r\nfunction quotedString(value, ctx) {\r\n    const { singleQuote } = ctx.options;\r\n    let qs;\r\n    if (singleQuote === false)\r\n        qs = doubleQuotedString;\r\n    else {\r\n        const hasDouble = value.includes('\"');\r\n        const hasSingle = value.includes(\"'\");\r\n        if (hasDouble && !hasSingle)\r\n            qs = singleQuotedString;\r\n        else if (hasSingle && !hasDouble)\r\n            qs = doubleQuotedString;\r\n        else\r\n            qs = singleQuote ? singleQuotedString : doubleQuotedString;\r\n    }\r\n    return qs(value, ctx);\r\n}\r\n// The negative lookbehind avoids a polynomial search,\r\n// but isn't supported yet on Safari: https://caniuse.com/js-regexp-lookbehind\r\nlet blockEndNewlines;\r\ntry {\r\n    blockEndNewlines = new RegExp('(^|(?<!\\n))\\n+(?!\\n|$)', 'g');\r\n}\r\ncatch {\r\n    blockEndNewlines = /\\n+(?!\\n|$)/g;\r\n}\r\nfunction blockString({ comment, type, value }, ctx, onComment, onChompKeep) {\r\n    const { blockQuote, commentString, lineWidth } = ctx.options;\r\n    // 1. Block can't end in whitespace unless the last line is non-empty.\r\n    // 2. Strings consisting of only whitespace are best rendered explicitly.\r\n    if (!blockQuote || /\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\r\n        return quotedString(value, ctx);\r\n    }\r\n    const indent = ctx.indent ||\r\n        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\r\n    const literal = blockQuote === 'literal'\r\n        ? true\r\n        : blockQuote === 'folded' || type === Scalar.BLOCK_FOLDED\r\n            ? false\r\n            : type === Scalar.BLOCK_LITERAL\r\n                ? true\r\n                : !lineLengthOverLimit(value, lineWidth, indent.length);\r\n    if (!value)\r\n        return literal ? '|\\n' : '>\\n';\r\n    // determine chomping from whitespace at value end\r\n    let chomp;\r\n    let endStart;\r\n    for (endStart = value.length; endStart > 0; --endStart) {\r\n        const ch = value[endStart - 1];\r\n        if (ch !== '\\n' && ch !== '\\t' && ch !== ' ')\r\n            break;\r\n    }\r\n    let end = value.substring(endStart);\r\n    const endNlPos = end.indexOf('\\n');\r\n    if (endNlPos === -1) {\r\n        chomp = '-'; // strip\r\n    }\r\n    else if (value === end || endNlPos !== end.length - 1) {\r\n        chomp = '+'; // keep\r\n        if (onChompKeep)\r\n            onChompKeep();\r\n    }\r\n    else {\r\n        chomp = ''; // clip\r\n    }\r\n    if (end) {\r\n        value = value.slice(0, -end.length);\r\n        if (end[end.length - 1] === '\\n')\r\n            end = end.slice(0, -1);\r\n        end = end.replace(blockEndNewlines, `$&${indent}`);\r\n    }\r\n    // determine indent indicator from whitespace at value start\r\n    let startWithSpace = false;\r\n    let startEnd;\r\n    let startNlPos = -1;\r\n    for (startEnd = 0; startEnd < value.length; ++startEnd) {\r\n        const ch = value[startEnd];\r\n        if (ch === ' ')\r\n            startWithSpace = true;\r\n        else if (ch === '\\n')\r\n            startNlPos = startEnd;\r\n        else\r\n            break;\r\n    }\r\n    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\r\n    if (start) {\r\n        value = value.substring(start.length);\r\n        start = start.replace(/\\n+/g, `$&${indent}`);\r\n    }\r\n    const indentSize = indent ? '2' : '1'; // root is at -1\r\n    // Leading | or > is added later\r\n    let header = (startWithSpace ? indentSize : '') + chomp;\r\n    if (comment) {\r\n        header += ' ' + commentString(comment.replace(/ ?[\\r\\n]+/g, ' '));\r\n        if (onComment)\r\n            onComment();\r\n    }\r\n    if (!literal) {\r\n        const foldedValue = value\r\n            .replace(/\\n+/g, '\\n$&')\r\n            .replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\r\n            //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\r\n            .replace(/\\n+/g, `$&${indent}`);\r\n        let literalFallback = false;\r\n        const foldOptions = getFoldOptions(ctx, true);\r\n        if (blockQuote !== 'folded' && type !== Scalar.BLOCK_FOLDED) {\r\n            foldOptions.onOverflow = () => {\r\n                literalFallback = true;\r\n            };\r\n        }\r\n        const body = foldFlowLines(`${start}${foldedValue}${end}`, indent, FOLD_BLOCK, foldOptions);\r\n        if (!literalFallback)\r\n            return `>${header}\\n${indent}${body}`;\r\n    }\r\n    value = value.replace(/\\n+/g, `$&${indent}`);\r\n    return `|${header}\\n${indent}${start}${value}${end}`;\r\n}\r\nfunction plainString(item, ctx, onComment, onChompKeep) {\r\n    const { type, value } = item;\r\n    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;\r\n    if ((implicitKey && value.includes('\\n')) ||\r\n        (inFlow && /[[\\]{},]/.test(value))) {\r\n        return quotedString(value, ctx);\r\n    }\r\n    if (/^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\r\n        // not allowed:\r\n        // - '-' or '?'\r\n        // - start with an indicator character (except [?:-]) or /[?-] /\r\n        // - '\\n ', ': ' or ' \\n' anywhere\r\n        // - '#' not preceded by a non-space char\r\n        // - end with ' ' or ':'\r\n        return implicitKey || inFlow || !value.includes('\\n')\r\n            ? quotedString(value, ctx)\r\n            : blockString(item, ctx, onComment, onChompKeep);\r\n    }\r\n    if (!implicitKey &&\r\n        !inFlow &&\r\n        type !== Scalar.PLAIN &&\r\n        value.includes('\\n')) {\r\n        // Where allowed & type not set explicitly, prefer block style for multiline strings\r\n        return blockString(item, ctx, onComment, onChompKeep);\r\n    }\r\n    if (containsDocumentMarker(value)) {\r\n        if (indent === '') {\r\n            ctx.forceBlockIndent = true;\r\n            return blockString(item, ctx, onComment, onChompKeep);\r\n        }\r\n        else if (implicitKey && indent === indentStep) {\r\n            return quotedString(value, ctx);\r\n        }\r\n    }\r\n    const str = value.replace(/\\n+/g, `$&\\n${indent}`);\r\n    // Verify that output will be parsed as a string, as e.g. plain numbers and\r\n    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\r\n    // and others in v1.1.\r\n    if (actualString) {\r\n        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);\r\n        const { compat, tags } = ctx.doc.schema;\r\n        if (tags.some(test) || compat?.some(test))\r\n            return quotedString(value, ctx);\r\n    }\r\n    return implicitKey\r\n        ? str\r\n        : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx, false));\r\n}\r\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\r\n    const { implicitKey, inFlow } = ctx;\r\n    const ss = typeof item.value === 'string'\r\n        ? item\r\n        : Object.assign({}, item, { value: String(item.value) });\r\n    let { type } = item;\r\n    if (type !== Scalar.QUOTE_DOUBLE) {\r\n        // force double quotes on control characters & unpaired surrogates\r\n        if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value))\r\n            type = Scalar.QUOTE_DOUBLE;\r\n    }\r\n    const _stringify = (_type) => {\r\n        switch (_type) {\r\n            case Scalar.BLOCK_FOLDED:\r\n            case Scalar.BLOCK_LITERAL:\r\n                return implicitKey || inFlow\r\n                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers\r\n                    : blockString(ss, ctx, onComment, onChompKeep);\r\n            case Scalar.QUOTE_DOUBLE:\r\n                return doubleQuotedString(ss.value, ctx);\r\n            case Scalar.QUOTE_SINGLE:\r\n                return singleQuotedString(ss.value, ctx);\r\n            case Scalar.PLAIN:\r\n                return plainString(ss, ctx, onComment, onChompKeep);\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    let res = _stringify(type);\r\n    if (res === null) {\r\n        const { defaultKeyType, defaultStringType } = ctx.options;\r\n        const t = (implicitKey && defaultKeyType) || defaultStringType;\r\n        res = _stringify(t);\r\n        if (res === null)\r\n            throw new Error(`Unsupported default string type ${t}`);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport { stringifyString };\r\n", "import { anchorIsValid } from '../doc/anchors.js';\r\nimport { isPair, isAlias, isNode, isScalar, isCollection } from '../nodes/identity.js';\r\nimport { stringifyComment } from './stringifyComment.js';\r\nimport { stringifyString } from './stringifyString.js';\r\n\r\nfunction createStringifyContext(doc, options) {\r\n    const opt = Object.assign({\r\n        blockQuote: true,\r\n        commentString: stringifyComment,\r\n        defaultKeyType: null,\r\n        defaultStringType: 'PLAIN',\r\n        directives: null,\r\n        doubleQuotedAsJSON: false,\r\n        doubleQuotedMinMultiLineLength: 40,\r\n        falseStr: 'false',\r\n        flowCollectionPadding: true,\r\n        indentSeq: true,\r\n        lineWidth: 80,\r\n        minContentWidth: 20,\r\n        nullStr: 'null',\r\n        simpleKeys: false,\r\n        singleQuote: null,\r\n        trueStr: 'true',\r\n        verifyAliasOrder: true\r\n    }, doc.schema.toStringOptions, options);\r\n    let inFlow;\r\n    switch (opt.collectionStyle) {\r\n        case 'block':\r\n            inFlow = false;\r\n            break;\r\n        case 'flow':\r\n            inFlow = true;\r\n            break;\r\n        default:\r\n            inFlow = null;\r\n    }\r\n    return {\r\n        anchors: new Set(),\r\n        doc,\r\n        flowCollectionPadding: opt.flowCollectionPadding ? ' ' : '',\r\n        indent: '',\r\n        indentStep: typeof opt.indent === 'number' ? ' '.repeat(opt.indent) : '  ',\r\n        inFlow,\r\n        options: opt\r\n    };\r\n}\r\nfunction getTagObject(tags, item) {\r\n    if (item.tag) {\r\n        const match = tags.filter(t => t.tag === item.tag);\r\n        if (match.length > 0)\r\n            return match.find(t => t.format === item.format) ?? match[0];\r\n    }\r\n    let tagObj = undefined;\r\n    let obj;\r\n    if (isScalar(item)) {\r\n        obj = item.value;\r\n        let match = tags.filter(t => t.identify?.(obj));\r\n        if (match.length > 1) {\r\n            const testMatch = match.filter(t => t.test);\r\n            if (testMatch.length > 0)\r\n                match = testMatch;\r\n        }\r\n        tagObj =\r\n            match.find(t => t.format === item.format) ?? match.find(t => !t.format);\r\n    }\r\n    else {\r\n        obj = item;\r\n        tagObj = tags.find(t => t.nodeClass && obj instanceof t.nodeClass);\r\n    }\r\n    if (!tagObj) {\r\n        const name = obj?.constructor?.name ?? (obj === null ? 'null' : typeof obj);\r\n        throw new Error(`Tag not resolved for ${name} value`);\r\n    }\r\n    return tagObj;\r\n}\r\n// needs to be called before value stringifier to allow for circular anchor refs\r\nfunction stringifyProps(node, tagObj, { anchors, doc }) {\r\n    if (!doc.directives)\r\n        return '';\r\n    const props = [];\r\n    const anchor = (isScalar(node) || isCollection(node)) && node.anchor;\r\n    if (anchor && anchorIsValid(anchor)) {\r\n        anchors.add(anchor);\r\n        props.push(`&${anchor}`);\r\n    }\r\n    const tag = node.tag ?? (tagObj.default ? null : tagObj.tag);\r\n    if (tag)\r\n        props.push(doc.directives.tagString(tag));\r\n    return props.join(' ');\r\n}\r\nfunction stringify(item, ctx, onComment, onChompKeep) {\r\n    if (isPair(item))\r\n        return item.toString(ctx, onComment, onChompKeep);\r\n    if (isAlias(item)) {\r\n        if (ctx.doc.directives)\r\n            return item.toString(ctx);\r\n        if (ctx.resolvedAliases?.has(item)) {\r\n            throw new TypeError(`Cannot stringify circular structure without alias nodes`);\r\n        }\r\n        else {\r\n            if (ctx.resolvedAliases)\r\n                ctx.resolvedAliases.add(item);\r\n            else\r\n                ctx.resolvedAliases = new Set([item]);\r\n            item = item.resolve(ctx.doc);\r\n        }\r\n    }\r\n    let tagObj = undefined;\r\n    const node = isNode(item)\r\n        ? item\r\n        : ctx.doc.createNode(item, { onTagObj: o => (tagObj = o) });\r\n    tagObj ?? (tagObj = getTagObject(ctx.doc.schema.tags, node));\r\n    const props = stringifyProps(node, tagObj, ctx);\r\n    if (props.length > 0)\r\n        ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;\r\n    const str = typeof tagObj.stringify === 'function'\r\n        ? tagObj.stringify(node, ctx, onComment, onChompKeep)\r\n        : isScalar(node)\r\n            ? stringifyString(node, ctx, onComment, onChompKeep)\r\n            : node.toString(ctx, onComment, onChompKeep);\r\n    if (!props)\r\n        return str;\r\n    return isScalar(node) || str[0] === '{' || str[0] === '['\r\n        ? `${props} ${str}`\r\n        : `${props}\\n${ctx.indent}${str}`;\r\n}\r\n\r\nexport { createStringifyContext, stringify };\r\n", "import { isCollection, isNode, isScalar, isSeq } from '../nodes/identity.js';\r\nimport { Scalar } from '../nodes/Scalar.js';\r\nimport { stringify } from './stringify.js';\r\nimport { lineComment, indentComment } from './stringifyComment.js';\r\n\r\nfunction stringifyPair({ key, value }, ctx, onComment, onChompKeep) {\r\n    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;\r\n    let keyComment = (isNode(key) && key.comment) || null;\r\n    if (simpleKeys) {\r\n        if (keyComment) {\r\n            throw new Error('With simple keys, key nodes cannot have comments');\r\n        }\r\n        if (isCollection(key) || (!isNode(key) && typeof key === 'object')) {\r\n            const msg = 'With simple keys, collection cannot be used as a key value';\r\n            throw new Error(msg);\r\n        }\r\n    }\r\n    let explicitKey = !simpleKeys &&\r\n        (!key ||\r\n            (keyComment && value == null && !ctx.inFlow) ||\r\n            isCollection(key) ||\r\n            (isScalar(key)\r\n                ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL\r\n                : typeof key === 'object'));\r\n    ctx = Object.assign({}, ctx, {\r\n        allNullValues: false,\r\n        implicitKey: !explicitKey && (simpleKeys || !allNullValues),\r\n        indent: indent + indentStep\r\n    });\r\n    let keyCommentDone = false;\r\n    let chompKeep = false;\r\n    let str = stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));\r\n    if (!explicitKey && !ctx.inFlow && str.length > 1024) {\r\n        if (simpleKeys)\r\n            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\r\n        explicitKey = true;\r\n    }\r\n    if (ctx.inFlow) {\r\n        if (allNullValues || value == null) {\r\n            if (keyCommentDone && onComment)\r\n                onComment();\r\n            return str === '' ? '?' : explicitKey ? `? ${str}` : str;\r\n        }\r\n    }\r\n    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {\r\n        str = `? ${str}`;\r\n        if (keyComment && !keyCommentDone) {\r\n            str += lineComment(str, ctx.indent, commentString(keyComment));\r\n        }\r\n        else if (chompKeep && onChompKeep)\r\n            onChompKeep();\r\n        return str;\r\n    }\r\n    if (keyCommentDone)\r\n        keyComment = null;\r\n    if (explicitKey) {\r\n        if (keyComment)\r\n            str += lineComment(str, ctx.indent, commentString(keyComment));\r\n        str = `? ${str}\\n${indent}:`;\r\n    }\r\n    else {\r\n        str = `${str}:`;\r\n        if (keyComment)\r\n            str += lineComment(str, ctx.indent, commentString(keyComment));\r\n    }\r\n    let vsb, vcb, valueComment;\r\n    if (isNode(value)) {\r\n        vsb = !!value.spaceBefore;\r\n        vcb = value.commentBefore;\r\n        valueComment = value.comment;\r\n    }\r\n    else {\r\n        vsb = false;\r\n        vcb = null;\r\n        valueComment = null;\r\n        if (value && typeof value === 'object')\r\n            value = doc.createNode(value);\r\n    }\r\n    ctx.implicitKey = false;\r\n    if (!explicitKey && !keyComment && isScalar(value))\r\n        ctx.indentAtStart = str.length + 1;\r\n    chompKeep = false;\r\n    if (!indentSeq &&\r\n        indentStep.length >= 2 &&\r\n        !ctx.inFlow &&\r\n        !explicitKey &&\r\n        isSeq(value) &&\r\n        !value.flow &&\r\n        !value.tag &&\r\n        !value.anchor) {\r\n        // If indentSeq === false, consider '- ' as part of indentation where possible\r\n        ctx.indent = ctx.indent.substring(2);\r\n    }\r\n    let valueCommentDone = false;\r\n    const valueStr = stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));\r\n    let ws = ' ';\r\n    if (keyComment || vsb || vcb) {\r\n        ws = vsb ? '\\n' : '';\r\n        if (vcb) {\r\n            const cs = commentString(vcb);\r\n            ws += `\\n${indentComment(cs, ctx.indent)}`;\r\n        }\r\n        if (valueStr === '' && !ctx.inFlow) {\r\n            if (ws === '\\n')\r\n                ws = '\\n\\n';\r\n        }\r\n        else {\r\n            ws += `\\n${ctx.indent}`;\r\n        }\r\n    }\r\n    else if (!explicitKey && isCollection(value)) {\r\n        const vs0 = valueStr[0];\r\n        const nl0 = valueStr.indexOf('\\n');\r\n        const hasNewline = nl0 !== -1;\r\n        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;\r\n        if (hasNewline || !flow) {\r\n            let hasPropsLine = false;\r\n            if (hasNewline && (vs0 === '&' || vs0 === '!')) {\r\n                let sp0 = valueStr.indexOf(' ');\r\n                if (vs0 === '&' &&\r\n                    sp0 !== -1 &&\r\n                    sp0 < nl0 &&\r\n                    valueStr[sp0 + 1] === '!') {\r\n                    sp0 = valueStr.indexOf(' ', sp0 + 1);\r\n                }\r\n                if (sp0 === -1 || nl0 < sp0)\r\n                    hasPropsLine = true;\r\n            }\r\n            if (!hasPropsLine)\r\n                ws = `\\n${ctx.indent}`;\r\n        }\r\n    }\r\n    else if (valueStr === '' || valueStr[0] === '\\n') {\r\n        ws = '';\r\n    }\r\n    str += ws + valueStr;\r\n    if (ctx.inFlow) {\r\n        if (valueCommentDone && onComment)\r\n            onComment();\r\n    }\r\n    else if (valueComment && !valueCommentDone) {\r\n        str += lineComment(str, ctx.indent, commentString(valueComment));\r\n    }\r\n    else if (chompKeep && onChompKeep) {\r\n        onChompKeep();\r\n    }\r\n    return str;\r\n}\r\n\r\nexport { stringifyPair };\r\n", "function debug(logLevel, ...messages) {\r\n    if (logLevel === 'debug')\r\n        console.log(...messages);\r\n}\r\nfunction warn(logLevel, warning) {\r\n    if (logLevel === 'debug' || logLevel === 'warn') {\r\n        console.warn(warning);\r\n    }\r\n}\r\n\r\nexport { debug, warn };\r\n", "import { isScalar, isAlias, isSeq, isMap } from '../../nodes/identity.js';\r\nimport { Scalar } from '../../nodes/Scalar.js';\r\n\r\n// If the value associated with a merge key is a single mapping node, each of\r\n// its key/value pairs is inserted into the current mapping, unless the key\r\n// already exists in it. If the value associated with the merge key is a\r\n// sequence, then this sequence is expected to contain mapping nodes and each\r\n// of these nodes is merged in turn according to its order in the sequence.\r\n// Keys in mapping nodes earlier in the sequence override keys specified in\r\n// later mapping nodes. -- http://yaml.org/type/merge.html\r\nconst MERGE_KEY = '<<';\r\nconst merge = {\r\n    identify: value => value === MERGE_KEY ||\r\n        (typeof value === 'symbol' && value.description === MERGE_KEY),\r\n    default: 'key',\r\n    tag: 'tag:yaml.org,2002:merge',\r\n    test: /^<<$/,\r\n    resolve: () => Object.assign(new Scalar(Symbol(MERGE_KEY)), {\r\n        addToJSMap: addMergeToJSMap\r\n    }),\r\n    stringify: () => MERGE_KEY\r\n};\r\nconst isMergeKey = (ctx, key) => (merge.identify(key) ||\r\n    (isScalar(key) &&\r\n        (!key.type || key.type === Scalar.PLAIN) &&\r\n        merge.identify(key.value))) &&\r\n    ctx?.doc.schema.tags.some(tag => tag.tag === merge.tag && tag.default);\r\nfunction addMergeToJSMap(ctx, map, value) {\r\n    value = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;\r\n    if (isSeq(value))\r\n        for (const it of value.items)\r\n            mergeValue(ctx, map, it);\r\n    else if (Array.isArray(value))\r\n        for (const it of value)\r\n            mergeValue(ctx, map, it);\r\n    else\r\n        mergeValue(ctx, map, value);\r\n}\r\nfunction mergeValue(ctx, map, value) {\r\n    const source = ctx && isAlias(value) ? value.resolve(ctx.doc) : value;\r\n    if (!isMap(source))\r\n        throw new Error('Merge sources must be maps or map aliases');\r\n    const srcMap = source.toJSON(null, ctx, Map);\r\n    for (const [key, value] of srcMap) {\r\n        if (map instanceof Map) {\r\n            if (!map.has(key))\r\n                map.set(key, value);\r\n        }\r\n        else if (map instanceof Set) {\r\n            map.add(key);\r\n        }\r\n        else if (!Object.prototype.hasOwnProperty.call(map, key)) {\r\n            Object.defineProperty(map, key, {\r\n                value,\r\n                writable: true,\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n        }\r\n    }\r\n    return map;\r\n}\r\n\r\nexport { addMergeToJSMap, isMergeKey, merge };\r\n", "import { warn } from '../log.js';\r\nimport { isMergeKey, addMergeToJSMap } from '../schema/yaml-1.1/merge.js';\r\nimport { createStringifyContext } from '../stringify/stringify.js';\r\nimport { isNode } from './identity.js';\r\nimport { toJS } from './toJS.js';\r\n\r\nfunction addPairToJSMap(ctx, map, { key, value }) {\r\n    if (isNode(key) && key.addToJSMap)\r\n        key.addToJSMap(ctx, map, value);\r\n    // TODO: Should drop this special case for bare << handling\r\n    else if (isMergeKey(ctx, key))\r\n        addMergeToJSMap(ctx, map, value);\r\n    else {\r\n        const jsKey = toJS(key, '', ctx);\r\n        if (map instanceof Map) {\r\n            map.set(jsKey, toJS(value, jsKey, ctx));\r\n        }\r\n        else if (map instanceof Set) {\r\n            map.add(jsKey);\r\n        }\r\n        else {\r\n            const stringKey = stringifyKey(key, jsKey, ctx);\r\n            const jsValue = toJS(value, stringKey, ctx);\r\n            if (stringKey in map)\r\n                Object.defineProperty(map, stringKey, {\r\n                    value: jsValue,\r\n                    writable: true,\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            else\r\n                map[stringKey] = jsValue;\r\n        }\r\n    }\r\n    return map;\r\n}\r\nfunction stringifyKey(key, jsKey, ctx) {\r\n    if (jsKey === null)\r\n        return '';\r\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n    if (typeof jsKey !== 'object')\r\n        return String(jsKey);\r\n    if (isNode(key) && ctx?.doc) {\r\n        const strCtx = createStringifyContext(ctx.doc, {});\r\n        strCtx.anchors = new Set();\r\n        for (const node of ctx.anchors.keys())\r\n            strCtx.anchors.add(node.anchor);\r\n        strCtx.inFlow = true;\r\n        strCtx.inStringifyKey = true;\r\n        const strKey = key.toString(strCtx);\r\n        if (!ctx.mapKeyWarned) {\r\n            let jsonStr = JSON.stringify(strKey);\r\n            if (jsonStr.length > 40)\r\n                jsonStr = jsonStr.substring(0, 36) + '...\"';\r\n            warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);\r\n            ctx.mapKeyWarned = true;\r\n        }\r\n        return strKey;\r\n    }\r\n    return JSON.stringify(jsKey);\r\n}\r\n\r\nexport { addPairToJSMap };\r\n", "import { createNode } from '../doc/createNode.js';\r\nimport { stringifyPair } from '../stringify/stringifyPair.js';\r\nimport { addPairToJSMap } from './addPairToJSMap.js';\r\nimport { NODE_TYPE, PAIR, isNode } from './identity.js';\r\n\r\nfunction createPair(key, value, ctx) {\r\n    const k = createNode(key, undefined, ctx);\r\n    const v = createNode(value, undefined, ctx);\r\n    return new Pair(k, v);\r\n}\r\nclass Pair {\r\n    constructor(key, value = null) {\r\n        Object.defineProperty(this, NODE_TYPE, { value: PAIR });\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    clone(schema) {\r\n        let { key, value } = this;\r\n        if (isNode(key))\r\n            key = key.clone(schema);\r\n        if (isNode(value))\r\n            value = value.clone(schema);\r\n        return new Pair(key, value);\r\n    }\r\n    toJSON(_, ctx) {\r\n        const pair = ctx?.mapAsMap ? new Map() : {};\r\n        return addPairToJSMap(ctx, pair, this);\r\n    }\r\n    toString(ctx, onComment, onChompKeep) {\r\n        return ctx?.doc\r\n            ? stringifyPair(this, ctx, onComment, onChompKeep)\r\n            : JSON.stringify(this);\r\n    }\r\n}\r\n\r\nexport { Pair, createPair };\r\n", "import { isNode, isPair } from '../nodes/identity.js';\r\nimport { stringify } from './stringify.js';\r\nimport { lineComment, indentComment } from './stringifyComment.js';\r\n\r\nfunction stringifyCollection(collection, ctx, options) {\r\n    const flow = ctx.inFlow ?? collection.flow;\r\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\r\n    return stringify(collection, ctx, options);\r\n}\r\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\r\n    const { indent, options: { commentString } } = ctx;\r\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\r\n    let chompKeep = false; // flag for the preceding node's status\r\n    const lines = [];\r\n    for (let i = 0; i < items.length; ++i) {\r\n        const item = items[i];\r\n        let comment = null;\r\n        if (isNode(item)) {\r\n            if (!chompKeep && item.spaceBefore)\r\n                lines.push('');\r\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\r\n            if (item.comment)\r\n                comment = item.comment;\r\n        }\r\n        else if (isPair(item)) {\r\n            const ik = isNode(item.key) ? item.key : null;\r\n            if (ik) {\r\n                if (!chompKeep && ik.spaceBefore)\r\n                    lines.push('');\r\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\r\n            }\r\n        }\r\n        chompKeep = false;\r\n        let str = stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\r\n        if (comment)\r\n            str += lineComment(str, itemIndent, commentString(comment));\r\n        if (chompKeep && comment)\r\n            chompKeep = false;\r\n        lines.push(blockItemPrefix + str);\r\n    }\r\n    let str;\r\n    if (lines.length === 0) {\r\n        str = flowChars.start + flowChars.end;\r\n    }\r\n    else {\r\n        str = lines[0];\r\n        for (let i = 1; i < lines.length; ++i) {\r\n            const line = lines[i];\r\n            str += line ? `\\n${indent}${line}` : '\\n';\r\n        }\r\n    }\r\n    if (comment) {\r\n        str += '\\n' + indentComment(commentString(comment), indent);\r\n        if (onComment)\r\n            onComment();\r\n    }\r\n    else if (chompKeep && onChompKeep)\r\n        onChompKeep();\r\n    return str;\r\n}\r\nfunction stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {\r\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\r\n    itemIndent += indentStep;\r\n    const itemCtx = Object.assign({}, ctx, {\r\n        indent: itemIndent,\r\n        inFlow: true,\r\n        type: null\r\n    });\r\n    let reqNewline = false;\r\n    let linesAtValue = 0;\r\n    const lines = [];\r\n    for (let i = 0; i < items.length; ++i) {\r\n        const item = items[i];\r\n        let comment = null;\r\n        if (isNode(item)) {\r\n            if (item.spaceBefore)\r\n                lines.push('');\r\n            addCommentBefore(ctx, lines, item.commentBefore, false);\r\n            if (item.comment)\r\n                comment = item.comment;\r\n        }\r\n        else if (isPair(item)) {\r\n            const ik = isNode(item.key) ? item.key : null;\r\n            if (ik) {\r\n                if (ik.spaceBefore)\r\n                    lines.push('');\r\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\r\n                if (ik.comment)\r\n                    reqNewline = true;\r\n            }\r\n            const iv = isNode(item.value) ? item.value : null;\r\n            if (iv) {\r\n                if (iv.comment)\r\n                    comment = iv.comment;\r\n                if (iv.commentBefore)\r\n                    reqNewline = true;\r\n            }\r\n            else if (item.value == null && ik?.comment) {\r\n                comment = ik.comment;\r\n            }\r\n        }\r\n        if (comment)\r\n            reqNewline = true;\r\n        let str = stringify(item, itemCtx, () => (comment = null));\r\n        if (i < items.length - 1)\r\n            str += ',';\r\n        if (comment)\r\n            str += lineComment(str, itemIndent, commentString(comment));\r\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\r\n            reqNewline = true;\r\n        lines.push(str);\r\n        linesAtValue = lines.length;\r\n    }\r\n    const { start, end } = flowChars;\r\n    if (lines.length === 0) {\r\n        return start + end;\r\n    }\r\n    else {\r\n        if (!reqNewline) {\r\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\r\n            reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;\r\n        }\r\n        if (reqNewline) {\r\n            let str = start;\r\n            for (const line of lines)\r\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\r\n            return `${str}\\n${indent}${end}`;\r\n        }\r\n        else {\r\n            return `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\r\n        }\r\n    }\r\n}\r\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\r\n    if (comment && chompKeep)\r\n        comment = comment.replace(/^\\n+/, '');\r\n    if (comment) {\r\n        const ic = indentComment(commentString(comment), indent);\r\n        lines.push(ic.trimStart()); // Avoid double indent on first line\r\n    }\r\n}\r\n\r\nexport { stringifyCollection };\r\n", "import { stringifyCollection } from '../stringify/stringifyCollection.js';\r\nimport { addPairToJSMap } from './addPairToJSMap.js';\r\nimport { Collection } from './Collection.js';\r\nimport { MAP, isPair, isScalar } from './identity.js';\r\nimport { Pair, createPair } from './Pair.js';\r\nimport { isScalarValue } from './Scalar.js';\r\n\r\nfunction findPair(items, key) {\r\n    const k = isScalar(key) ? key.value : key;\r\n    for (const it of items) {\r\n        if (isPair(it)) {\r\n            if (it.key === key || it.key === k)\r\n                return it;\r\n            if (isScalar(it.key) && it.key.value === k)\r\n                return it;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nclass YAMLMap extends Collection {\r\n    static get tagName() {\r\n        return 'tag:yaml.org,2002:map';\r\n    }\r\n    constructor(schema) {\r\n        super(MAP, schema);\r\n        this.items = [];\r\n    }\r\n    /**\r\n     * A generic collection parsing method that can be extended\r\n     * to other node classes that inherit from YAMLMap\r\n     */\r\n    static from(schema, obj, ctx) {\r\n        const { keepUndefined, replacer } = ctx;\r\n        const map = new this(schema);\r\n        const add = (key, value) => {\r\n            if (typeof replacer === 'function')\r\n                value = replacer.call(obj, key, value);\r\n            else if (Array.isArray(replacer) && !replacer.includes(key))\r\n                return;\r\n            if (value !== undefined || keepUndefined)\r\n                map.items.push(createPair(key, value, ctx));\r\n        };\r\n        if (obj instanceof Map) {\r\n            for (const [key, value] of obj)\r\n                add(key, value);\r\n        }\r\n        else if (obj && typeof obj === 'object') {\r\n            for (const key of Object.keys(obj))\r\n                add(key, obj[key]);\r\n        }\r\n        if (typeof schema.sortMapEntries === 'function') {\r\n            map.items.sort(schema.sortMapEntries);\r\n        }\r\n        return map;\r\n    }\r\n    /**\r\n     * Adds a value to the collection.\r\n     *\r\n     * @param overwrite - If not set `true`, using a key that is already in the\r\n     *   collection will throw. Otherwise, overwrites the previous value.\r\n     */\r\n    add(pair, overwrite) {\r\n        let _pair;\r\n        if (isPair(pair))\r\n            _pair = pair;\r\n        else if (!pair || typeof pair !== 'object' || !('key' in pair)) {\r\n            // In TypeScript, this never happens.\r\n            _pair = new Pair(pair, pair?.value);\r\n        }\r\n        else\r\n            _pair = new Pair(pair.key, pair.value);\r\n        const prev = findPair(this.items, _pair.key);\r\n        const sortEntries = this.schema?.sortMapEntries;\r\n        if (prev) {\r\n            if (!overwrite)\r\n                throw new Error(`Key ${_pair.key} already set`);\r\n            // For scalars, keep the old node & its comments and anchors\r\n            if (isScalar(prev.value) && isScalarValue(_pair.value))\r\n                prev.value.value = _pair.value;\r\n            else\r\n                prev.value = _pair.value;\r\n        }\r\n        else if (sortEntries) {\r\n            const i = this.items.findIndex(item => sortEntries(_pair, item) < 0);\r\n            if (i === -1)\r\n                this.items.push(_pair);\r\n            else\r\n                this.items.splice(i, 0, _pair);\r\n        }\r\n        else {\r\n            this.items.push(_pair);\r\n        }\r\n    }\r\n    delete(key) {\r\n        const it = findPair(this.items, key);\r\n        if (!it)\r\n            return false;\r\n        const del = this.items.splice(this.items.indexOf(it), 1);\r\n        return del.length > 0;\r\n    }\r\n    get(key, keepScalar) {\r\n        const it = findPair(this.items, key);\r\n        const node = it?.value;\r\n        return (!keepScalar && isScalar(node) ? node.value : node) ?? undefined;\r\n    }\r\n    has(key) {\r\n        return !!findPair(this.items, key);\r\n    }\r\n    set(key, value) {\r\n        this.add(new Pair(key, value), true);\r\n    }\r\n    /**\r\n     * @param ctx - Conversion context, originally set in Document#toJS()\r\n     * @param {Class} Type - If set, forces the returned collection type\r\n     * @returns Instance of Type, Map, or Object\r\n     */\r\n    toJSON(_, ctx, Type) {\r\n        const map = Type ? new Type() : ctx?.mapAsMap ? new Map() : {};\r\n        if (ctx?.onCreate)\r\n            ctx.onCreate(map);\r\n        for (const item of this.items)\r\n            addPairToJSMap(ctx, map, item);\r\n        return map;\r\n    }\r\n    toString(ctx, onComment, onChompKeep) {\r\n        if (!ctx)\r\n            return JSON.stringify(this);\r\n        for (const item of this.items) {\r\n            if (!isPair(item))\r\n                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);\r\n        }\r\n        if (!ctx.allNullValues && this.hasAllNullValues(false))\r\n            ctx = Object.assign({}, ctx, { allNullValues: true });\r\n        return stringifyCollection(this, ctx, {\r\n            blockItemPrefix: '',\r\n            flowChars: { start: '{', end: '}' },\r\n            itemIndent: ctx.indent || '',\r\n            onChompKeep,\r\n            onComment\r\n        });\r\n    }\r\n}\r\n\r\nexport { YAMLMap, findPair };\r\n", "import { isMap } from '../../nodes/identity.js';\r\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\r\n\r\nconst map = {\r\n    collection: 'map',\r\n    default: true,\r\n    nodeClass: YAMLMap,\r\n    tag: 'tag:yaml.org,2002:map',\r\n    resolve(map, onError) {\r\n        if (!isMap(map))\r\n            onError('Expected a mapping for this tag');\r\n        return map;\r\n    },\r\n    createNode: (schema, obj, ctx) => YAMLMap.from(schema, obj, ctx)\r\n};\r\n\r\nexport { map };\r\n", "import { createNode } from '../doc/createNode.js';\r\nimport { stringifyCollection } from '../stringify/stringifyCollection.js';\r\nimport { Collection } from './Collection.js';\r\nimport { SEQ, isScalar } from './identity.js';\r\nimport { isScalarValue } from './Scalar.js';\r\nimport { toJS } from './toJS.js';\r\n\r\nclass YAMLSeq extends Collection {\r\n    static get tagName() {\r\n        return 'tag:yaml.org,2002:seq';\r\n    }\r\n    constructor(schema) {\r\n        super(SEQ, schema);\r\n        this.items = [];\r\n    }\r\n    add(value) {\r\n        this.items.push(value);\r\n    }\r\n    /**\r\n     * Removes a value from the collection.\r\n     *\r\n     * `key` must contain a representation of an integer for this to succeed.\r\n     * It may be wrapped in a `Scalar`.\r\n     *\r\n     * @returns `true` if the item was found and removed.\r\n     */\r\n    delete(key) {\r\n        const idx = asItemIndex(key);\r\n        if (typeof idx !== 'number')\r\n            return false;\r\n        const del = this.items.splice(idx, 1);\r\n        return del.length > 0;\r\n    }\r\n    get(key, keepScalar) {\r\n        const idx = asItemIndex(key);\r\n        if (typeof idx !== 'number')\r\n            return undefined;\r\n        const it = this.items[idx];\r\n        return !keepScalar && isScalar(it) ? it.value : it;\r\n    }\r\n    /**\r\n     * Checks if the collection includes a value with the key `key`.\r\n     *\r\n     * `key` must contain a representation of an integer for this to succeed.\r\n     * It may be wrapped in a `Scalar`.\r\n     */\r\n    has(key) {\r\n        const idx = asItemIndex(key);\r\n        return typeof idx === 'number' && idx < this.items.length;\r\n    }\r\n    /**\r\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\r\n     * boolean to add/remove the item from the set.\r\n     *\r\n     * If `key` does not contain a representation of an integer, this will throw.\r\n     * It may be wrapped in a `Scalar`.\r\n     */\r\n    set(key, value) {\r\n        const idx = asItemIndex(key);\r\n        if (typeof idx !== 'number')\r\n            throw new Error(`Expected a valid index, not ${key}.`);\r\n        const prev = this.items[idx];\r\n        if (isScalar(prev) && isScalarValue(value))\r\n            prev.value = value;\r\n        else\r\n            this.items[idx] = value;\r\n    }\r\n    toJSON(_, ctx) {\r\n        const seq = [];\r\n        if (ctx?.onCreate)\r\n            ctx.onCreate(seq);\r\n        let i = 0;\r\n        for (const item of this.items)\r\n            seq.push(toJS(item, String(i++), ctx));\r\n        return seq;\r\n    }\r\n    toString(ctx, onComment, onChompKeep) {\r\n        if (!ctx)\r\n            return JSON.stringify(this);\r\n        return stringifyCollection(this, ctx, {\r\n            blockItemPrefix: '- ',\r\n            flowChars: { start: '[', end: ']' },\r\n            itemIndent: (ctx.indent || '') + '  ',\r\n            onChompKeep,\r\n            onComment\r\n        });\r\n    }\r\n    static from(schema, obj, ctx) {\r\n        const { replacer } = ctx;\r\n        const seq = new this(schema);\r\n        if (obj && Symbol.iterator in Object(obj)) {\r\n            let i = 0;\r\n            for (let it of obj) {\r\n                if (typeof replacer === 'function') {\r\n                    const key = obj instanceof Set ? it : String(i++);\r\n                    it = replacer.call(obj, key, it);\r\n                }\r\n                seq.items.push(createNode(it, undefined, ctx));\r\n            }\r\n        }\r\n        return seq;\r\n    }\r\n}\r\nfunction asItemIndex(key) {\r\n    let idx = isScalar(key) ? key.value : key;\r\n    if (idx && typeof idx === 'string')\r\n        idx = Number(idx);\r\n    return typeof idx === 'number' && Number.isInteger(idx) && idx >= 0\r\n        ? idx\r\n        : null;\r\n}\r\n\r\nexport { YAMLSeq };\r\n", "import { isSeq } from '../../nodes/identity.js';\r\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\r\n\r\nconst seq = {\r\n    collection: 'seq',\r\n    default: true,\r\n    nodeClass: YAMLSeq,\r\n    tag: 'tag:yaml.org,2002:seq',\r\n    resolve(seq, onError) {\r\n        if (!isSeq(seq))\r\n            onError('Expected a sequence for this tag');\r\n        return seq;\r\n    },\r\n    createNode: (schema, obj, ctx) => YAMLSeq.from(schema, obj, ctx)\r\n};\r\n\r\nexport { seq };\r\n", "import { stringifyString } from '../../stringify/stringifyString.js';\r\n\r\nconst string = {\r\n    identify: value => typeof value === 'string',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:str',\r\n    resolve: str => str,\r\n    stringify(item, ctx, onComment, onChompKeep) {\r\n        ctx = Object.assign({ actualString: true }, ctx);\r\n        return stringifyString(item, ctx, onComment, onChompKeep);\r\n    }\r\n};\r\n\r\nexport { string };\r\n", "import { Scalar } from '../../nodes/Scalar.js';\r\n\r\nconst nullTag = {\r\n    identify: value => value == null,\r\n    createNode: () => new Scalar(null),\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:null',\r\n    test: /^(?:~|[Nn]ull|NULL)?$/,\r\n    resolve: () => new Scalar(null),\r\n    stringify: ({ source }, ctx) => typeof source === 'string' && nullTag.test.test(source)\r\n        ? source\r\n        : ctx.options.nullStr\r\n};\r\n\r\nexport { nullTag };\r\n", "import { Scalar } from '../../nodes/Scalar.js';\r\n\r\nconst boolTag = {\r\n    identify: value => typeof value === 'boolean',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:bool',\r\n    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\r\n    resolve: str => new Scalar(str[0] === 't' || str[0] === 'T'),\r\n    stringify({ source, value }, ctx) {\r\n        if (source && boolTag.test.test(source)) {\r\n            const sv = source[0] === 't' || source[0] === 'T';\r\n            if (value === sv)\r\n                return source;\r\n        }\r\n        return value ? ctx.options.trueStr : ctx.options.falseStr;\r\n    }\r\n};\r\n\r\nexport { boolTag };\r\n", "function stringifyNumber({ format, minFractionDigits, tag, value }) {\r\n    if (typeof value === 'bigint')\r\n        return String(value);\r\n    const num = typeof value === 'number' ? value : Number(value);\r\n    if (!isFinite(num))\r\n        return isNaN(num) ? '.nan' : num < 0 ? '-.inf' : '.inf';\r\n    let n = JSON.stringify(value);\r\n    if (!format &&\r\n        minFractionDigits &&\r\n        (!tag || tag === 'tag:yaml.org,2002:float') &&\r\n        /^\\d/.test(n)) {\r\n        let i = n.indexOf('.');\r\n        if (i < 0) {\r\n            i = n.length;\r\n            n += '.';\r\n        }\r\n        let d = minFractionDigits - (n.length - i - 1);\r\n        while (d-- > 0)\r\n            n += '0';\r\n    }\r\n    return n;\r\n}\r\n\r\nexport { stringifyNumber };\r\n", "import { Scalar } from '../../nodes/Scalar.js';\r\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\r\n\r\nconst floatNaN = {\r\n    identify: value => typeof value === 'number',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:float',\r\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,\r\n    resolve: str => str.slice(-3).toLowerCase() === 'nan'\r\n        ? NaN\r\n        : str[0] === '-'\r\n            ? Number.NEGATIVE_INFINITY\r\n            : Number.POSITIVE_INFINITY,\r\n    stringify: stringifyNumber\r\n};\r\nconst floatExp = {\r\n    identify: value => typeof value === 'number',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:float',\r\n    format: 'EXP',\r\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\r\n    resolve: str => parseFloat(str),\r\n    stringify(node) {\r\n        const num = Number(node.value);\r\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\r\n    }\r\n};\r\nconst float = {\r\n    identify: value => typeof value === 'number',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:float',\r\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\r\n    resolve(str) {\r\n        const node = new Scalar(parseFloat(str));\r\n        const dot = str.indexOf('.');\r\n        if (dot !== -1 && str[str.length - 1] === '0')\r\n            node.minFractionDigits = str.length - dot - 1;\r\n        return node;\r\n    },\r\n    stringify: stringifyNumber\r\n};\r\n\r\nexport { float, floatExp, floatNaN };\r\n", "import { stringifyNumber } from '../../stringify/stringifyNumber.js';\r\n\r\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\r\nconst intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));\r\nfunction intStringify(node, radix, prefix) {\r\n    const { value } = node;\r\n    if (intIdentify(value) && value >= 0)\r\n        return prefix + value.toString(radix);\r\n    return stringifyNumber(node);\r\n}\r\nconst intOct = {\r\n    identify: value => intIdentify(value) && value >= 0,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:int',\r\n    format: 'OCT',\r\n    test: /^0o[0-7]+$/,\r\n    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\r\n    stringify: node => intStringify(node, 8, '0o')\r\n};\r\nconst int = {\r\n    identify: intIdentify,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:int',\r\n    test: /^[-+]?[0-9]+$/,\r\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\r\n    stringify: stringifyNumber\r\n};\r\nconst intHex = {\r\n    identify: value => intIdentify(value) && value >= 0,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:int',\r\n    format: 'HEX',\r\n    test: /^0x[0-9a-fA-F]+$/,\r\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\r\n    stringify: node => intStringify(node, 16, '0x')\r\n};\r\n\r\nexport { int, intHex, intOct };\r\n", "import { map } from '../common/map.js';\r\nimport { nullTag } from '../common/null.js';\r\nimport { seq } from '../common/seq.js';\r\nimport { string } from '../common/string.js';\r\nimport { boolTag } from './bool.js';\r\nimport { floatNaN, floatExp, float } from './float.js';\r\nimport { intOct, int, intHex } from './int.js';\r\n\r\nconst schema = [\r\n    map,\r\n    seq,\r\n    string,\r\n    nullTag,\r\n    boolTag,\r\n    intOct,\r\n    int,\r\n    intHex,\r\n    floatNaN,\r\n    floatExp,\r\n    float\r\n];\r\n\r\nexport { schema };\r\n", "import { Scalar } from '../../nodes/Scalar.js';\r\nimport { map } from '../common/map.js';\r\nimport { seq } from '../common/seq.js';\r\n\r\nfunction intIdentify(value) {\r\n    return typeof value === 'bigint' || Number.isInteger(value);\r\n}\r\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\r\nconst jsonScalars = [\r\n    {\r\n        identify: value => typeof value === 'string',\r\n        default: true,\r\n        tag: 'tag:yaml.org,2002:str',\r\n        resolve: str => str,\r\n        stringify: stringifyJSON\r\n    },\r\n    {\r\n        identify: value => value == null,\r\n        createNode: () => new Scalar(null),\r\n        default: true,\r\n        tag: 'tag:yaml.org,2002:null',\r\n        test: /^null$/,\r\n        resolve: () => null,\r\n        stringify: stringifyJSON\r\n    },\r\n    {\r\n        identify: value => typeof value === 'boolean',\r\n        default: true,\r\n        tag: 'tag:yaml.org,2002:bool',\r\n        test: /^true$|^false$/,\r\n        resolve: str => str === 'true',\r\n        stringify: stringifyJSON\r\n    },\r\n    {\r\n        identify: intIdentify,\r\n        default: true,\r\n        tag: 'tag:yaml.org,2002:int',\r\n        test: /^-?(?:0|[1-9][0-9]*)$/,\r\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\r\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\r\n    },\r\n    {\r\n        identify: value => typeof value === 'number',\r\n        default: true,\r\n        tag: 'tag:yaml.org,2002:float',\r\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\r\n        resolve: str => parseFloat(str),\r\n        stringify: stringifyJSON\r\n    }\r\n];\r\nconst jsonError = {\r\n    default: true,\r\n    tag: '',\r\n    test: /^/,\r\n    resolve(str, onError) {\r\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\r\n        return str;\r\n    }\r\n};\r\nconst schema = [map, seq].concat(jsonScalars, jsonError);\r\n\r\nexport { schema };\r\n", "import { Scalar } from '../../nodes/Scalar.js';\r\nimport { stringifyString } from '../../stringify/stringifyString.js';\r\n\r\nconst binary = {\r\n    identify: value => value instanceof Uint8Array, // Buffer inherits from Uint8Array\r\n    default: false,\r\n    tag: 'tag:yaml.org,2002:binary',\r\n    /**\r\n     * Returns a Buffer in node and an Uint8Array in browsers\r\n     *\r\n     * To use the resulting buffer as an image, you'll want to do something like:\r\n     *\r\n     *   const blob = new Blob([buffer], { type: 'image/jpeg' })\r\n     *   document.querySelector('#photo').src = URL.createObjectURL(blob)\r\n     */\r\n    resolve(src, onError) {\r\n        if (typeof atob === 'function') {\r\n            // On IE 11, atob() can't handle newlines\r\n            const str = atob(src.replace(/[\\n\\r]/g, ''));\r\n            const buffer = new Uint8Array(str.length);\r\n            for (let i = 0; i < str.length; ++i)\r\n                buffer[i] = str.charCodeAt(i);\r\n            return buffer;\r\n        }\r\n        else {\r\n            onError('This environment does not support reading binary tags; either Buffer or atob is required');\r\n            return src;\r\n        }\r\n    },\r\n    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {\r\n        if (!value)\r\n            return '';\r\n        const buf = value; // checked earlier by binary.identify()\r\n        let str;\r\n        if (typeof btoa === 'function') {\r\n            let s = '';\r\n            for (let i = 0; i < buf.length; ++i)\r\n                s += String.fromCharCode(buf[i]);\r\n            str = btoa(s);\r\n        }\r\n        else {\r\n            throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\r\n        }\r\n        type ?? (type = Scalar.BLOCK_LITERAL);\r\n        if (type !== Scalar.QUOTE_DOUBLE) {\r\n            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);\r\n            const n = Math.ceil(str.length / lineWidth);\r\n            const lines = new Array(n);\r\n            for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {\r\n                lines[i] = str.substr(o, lineWidth);\r\n            }\r\n            str = lines.join(type === Scalar.BLOCK_LITERAL ? '\\n' : ' ');\r\n        }\r\n        return stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);\r\n    }\r\n};\r\n\r\nexport { binary };\r\n", "import { isSeq, isPair, isMap } from '../../nodes/identity.js';\r\nimport { createPair, Pair } from '../../nodes/Pair.js';\r\nimport { Scalar } from '../../nodes/Scalar.js';\r\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\r\n\r\nfunction resolvePairs(seq, onError) {\r\n    if (isSeq(seq)) {\r\n        for (let i = 0; i < seq.items.length; ++i) {\r\n            let item = seq.items[i];\r\n            if (isPair(item))\r\n                continue;\r\n            else if (isMap(item)) {\r\n                if (item.items.length > 1)\r\n                    onError('Each pair must have its own sequence indicator');\r\n                const pair = item.items[0] || new Pair(new Scalar(null));\r\n                if (item.commentBefore)\r\n                    pair.key.commentBefore = pair.key.commentBefore\r\n                        ? `${item.commentBefore}\\n${pair.key.commentBefore}`\r\n                        : item.commentBefore;\r\n                if (item.comment) {\r\n                    const cn = pair.value ?? pair.key;\r\n                    cn.comment = cn.comment\r\n                        ? `${item.comment}\\n${cn.comment}`\r\n                        : item.comment;\r\n                }\r\n                item = pair;\r\n            }\r\n            seq.items[i] = isPair(item) ? item : new Pair(item);\r\n        }\r\n    }\r\n    else\r\n        onError('Expected a sequence for this tag');\r\n    return seq;\r\n}\r\nfunction createPairs(schema, iterable, ctx) {\r\n    const { replacer } = ctx;\r\n    const pairs = new YAMLSeq(schema);\r\n    pairs.tag = 'tag:yaml.org,2002:pairs';\r\n    let i = 0;\r\n    if (iterable && Symbol.iterator in Object(iterable))\r\n        for (let it of iterable) {\r\n            if (typeof replacer === 'function')\r\n                it = replacer.call(iterable, String(i++), it);\r\n            let key, value;\r\n            if (Array.isArray(it)) {\r\n                if (it.length === 2) {\r\n                    key = it[0];\r\n                    value = it[1];\r\n                }\r\n                else\r\n                    throw new TypeError(`Expected [key, value] tuple: ${it}`);\r\n            }\r\n            else if (it && it instanceof Object) {\r\n                const keys = Object.keys(it);\r\n                if (keys.length === 1) {\r\n                    key = keys[0];\r\n                    value = it[key];\r\n                }\r\n                else {\r\n                    throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);\r\n                }\r\n            }\r\n            else {\r\n                key = it;\r\n            }\r\n            pairs.items.push(createPair(key, value, ctx));\r\n        }\r\n    return pairs;\r\n}\r\nconst pairs = {\r\n    collection: 'seq',\r\n    default: false,\r\n    tag: 'tag:yaml.org,2002:pairs',\r\n    resolve: resolvePairs,\r\n    createNode: createPairs\r\n};\r\n\r\nexport { createPairs, pairs, resolvePairs };\r\n", "import { isScalar, isPair } from '../../nodes/identity.js';\r\nimport { toJS } from '../../nodes/toJS.js';\r\nimport { YAMLMap } from '../../nodes/YAMLMap.js';\r\nimport { YAMLSeq } from '../../nodes/YAMLSeq.js';\r\nimport { resolvePairs, createPairs } from './pairs.js';\r\n\r\nclass YAMLOMap extends YAMLSeq {\r\n    constructor() {\r\n        super();\r\n        this.add = YAMLMap.prototype.add.bind(this);\r\n        this.delete = YAMLMap.prototype.delete.bind(this);\r\n        this.get = YAMLMap.prototype.get.bind(this);\r\n        this.has = YAMLMap.prototype.has.bind(this);\r\n        this.set = YAMLMap.prototype.set.bind(this);\r\n        this.tag = YAMLOMap.tag;\r\n    }\r\n    /**\r\n     * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,\r\n     * but TypeScript won't allow widening the signature of a child method.\r\n     */\r\n    toJSON(_, ctx) {\r\n        if (!ctx)\r\n            return super.toJSON(_);\r\n        const map = new Map();\r\n        if (ctx?.onCreate)\r\n            ctx.onCreate(map);\r\n        for (const pair of this.items) {\r\n            let key, value;\r\n            if (isPair(pair)) {\r\n                key = toJS(pair.key, '', ctx);\r\n                value = toJS(pair.value, key, ctx);\r\n            }\r\n            else {\r\n                key = toJS(pair, '', ctx);\r\n            }\r\n            if (map.has(key))\r\n                throw new Error('Ordered maps must not include duplicate keys');\r\n            map.set(key, value);\r\n        }\r\n        return map;\r\n    }\r\n    static from(schema, iterable, ctx) {\r\n        const pairs = createPairs(schema, iterable, ctx);\r\n        const omap = new this();\r\n        omap.items = pairs.items;\r\n        return omap;\r\n    }\r\n}\r\nYAMLOMap.tag = 'tag:yaml.org,2002:omap';\r\nconst omap = {\r\n    collection: 'seq',\r\n    identify: value => value instanceof Map,\r\n    nodeClass: YAMLOMap,\r\n    default: false,\r\n    tag: 'tag:yaml.org,2002:omap',\r\n    resolve(seq, onError) {\r\n        const pairs = resolvePairs(seq, onError);\r\n        const seenKeys = [];\r\n        for (const { key } of pairs.items) {\r\n            if (isScalar(key)) {\r\n                if (seenKeys.includes(key.value)) {\r\n                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);\r\n                }\r\n                else {\r\n                    seenKeys.push(key.value);\r\n                }\r\n            }\r\n        }\r\n        return Object.assign(new YAMLOMap(), pairs);\r\n    },\r\n    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)\r\n};\r\n\r\nexport { YAMLOMap, omap };\r\n", "import { Scalar } from '../../nodes/Scalar.js';\r\n\r\nfunction boolStringify({ value, source }, ctx) {\r\n    const boolObj = value ? trueTag : falseTag;\r\n    if (source && boolObj.test.test(source))\r\n        return source;\r\n    return value ? ctx.options.trueStr : ctx.options.falseStr;\r\n}\r\nconst trueTag = {\r\n    identify: value => value === true,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:bool',\r\n    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\r\n    resolve: () => new Scalar(true),\r\n    stringify: boolStringify\r\n};\r\nconst falseTag = {\r\n    identify: value => value === false,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:bool',\r\n    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,\r\n    resolve: () => new Scalar(false),\r\n    stringify: boolStringify\r\n};\r\n\r\nexport { falseTag, trueTag };\r\n", "import { Scalar } from '../../nodes/Scalar.js';\r\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\r\n\r\nconst floatNaN = {\r\n    identify: value => typeof value === 'number',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:float',\r\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF)|\\.nan|\\.NaN|\\.NAN)$/,\r\n    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'\r\n        ? NaN\r\n        : str[0] === '-'\r\n            ? Number.NEGATIVE_INFINITY\r\n            : Number.POSITIVE_INFINITY,\r\n    stringify: stringifyNumber\r\n};\r\nconst floatExp = {\r\n    identify: value => typeof value === 'number',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:float',\r\n    format: 'EXP',\r\n    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\r\n    resolve: (str) => parseFloat(str.replace(/_/g, '')),\r\n    stringify(node) {\r\n        const num = Number(node.value);\r\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\r\n    }\r\n};\r\nconst float = {\r\n    identify: value => typeof value === 'number',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:float',\r\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\r\n    resolve(str) {\r\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\r\n        const dot = str.indexOf('.');\r\n        if (dot !== -1) {\r\n            const f = str.substring(dot + 1).replace(/_/g, '');\r\n            if (f[f.length - 1] === '0')\r\n                node.minFractionDigits = f.length;\r\n        }\r\n        return node;\r\n    },\r\n    stringify: stringifyNumber\r\n};\r\n\r\nexport { float, floatExp, floatNaN };\r\n", "import { stringifyNumber } from '../../stringify/stringifyNumber.js';\r\n\r\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\r\nfunction intResolve(str, offset, radix, { intAsBigInt }) {\r\n    const sign = str[0];\r\n    if (sign === '-' || sign === '+')\r\n        offset += 1;\r\n    str = str.substring(offset).replace(/_/g, '');\r\n    if (intAsBigInt) {\r\n        switch (radix) {\r\n            case 2:\r\n                str = `0b${str}`;\r\n                break;\r\n            case 8:\r\n                str = `0o${str}`;\r\n                break;\r\n            case 16:\r\n                str = `0x${str}`;\r\n                break;\r\n        }\r\n        const n = BigInt(str);\r\n        return sign === '-' ? BigInt(-1) * n : n;\r\n    }\r\n    const n = parseInt(str, radix);\r\n    return sign === '-' ? -1 * n : n;\r\n}\r\nfunction intStringify(node, radix, prefix) {\r\n    const { value } = node;\r\n    if (intIdentify(value)) {\r\n        const str = value.toString(radix);\r\n        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\r\n    }\r\n    return stringifyNumber(node);\r\n}\r\nconst intBin = {\r\n    identify: intIdentify,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:int',\r\n    format: 'BIN',\r\n    test: /^[-+]?0b[0-1_]+$/,\r\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\r\n    stringify: node => intStringify(node, 2, '0b')\r\n};\r\nconst intOct = {\r\n    identify: intIdentify,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:int',\r\n    format: 'OCT',\r\n    test: /^[-+]?0[0-7_]+$/,\r\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\r\n    stringify: node => intStringify(node, 8, '0')\r\n};\r\nconst int = {\r\n    identify: intIdentify,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:int',\r\n    test: /^[-+]?[0-9][0-9_]*$/,\r\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\r\n    stringify: stringifyNumber\r\n};\r\nconst intHex = {\r\n    identify: intIdentify,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:int',\r\n    format: 'HEX',\r\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\r\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\r\n    stringify: node => intStringify(node, 16, '0x')\r\n};\r\n\r\nexport { int, intBin, intHex, intOct };\r\n", "import { isMap, isPair, isScalar } from '../../nodes/identity.js';\r\nimport { Pair, createPair } from '../../nodes/Pair.js';\r\nimport { YAMLMap, findPair } from '../../nodes/YAMLMap.js';\r\n\r\nclass YAMLSet extends YAMLMap {\r\n    constructor(schema) {\r\n        super(schema);\r\n        this.tag = YAMLSet.tag;\r\n    }\r\n    add(key) {\r\n        let pair;\r\n        if (isPair(key))\r\n            pair = key;\r\n        else if (key &&\r\n            typeof key === 'object' &&\r\n            'key' in key &&\r\n            'value' in key &&\r\n            key.value === null)\r\n            pair = new Pair(key.key, null);\r\n        else\r\n            pair = new Pair(key, null);\r\n        const prev = findPair(this.items, pair.key);\r\n        if (!prev)\r\n            this.items.push(pair);\r\n    }\r\n    /**\r\n     * If `keepPair` is `true`, returns the Pair matching `key`.\r\n     * Otherwise, returns the value of that Pair's key.\r\n     */\r\n    get(key, keepPair) {\r\n        const pair = findPair(this.items, key);\r\n        return !keepPair && isPair(pair)\r\n            ? isScalar(pair.key)\r\n                ? pair.key.value\r\n                : pair.key\r\n            : pair;\r\n    }\r\n    set(key, value) {\r\n        if (typeof value !== 'boolean')\r\n            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\r\n        const prev = findPair(this.items, key);\r\n        if (prev && !value) {\r\n            this.items.splice(this.items.indexOf(prev), 1);\r\n        }\r\n        else if (!prev && value) {\r\n            this.items.push(new Pair(key));\r\n        }\r\n    }\r\n    toJSON(_, ctx) {\r\n        return super.toJSON(_, ctx, Set);\r\n    }\r\n    toString(ctx, onComment, onChompKeep) {\r\n        if (!ctx)\r\n            return JSON.stringify(this);\r\n        if (this.hasAllNullValues(true))\r\n            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);\r\n        else\r\n            throw new Error('Set items must all have null values');\r\n    }\r\n    static from(schema, iterable, ctx) {\r\n        const { replacer } = ctx;\r\n        const set = new this(schema);\r\n        if (iterable && Symbol.iterator in Object(iterable))\r\n            for (let value of iterable) {\r\n                if (typeof replacer === 'function')\r\n                    value = replacer.call(iterable, value, value);\r\n                set.items.push(createPair(value, null, ctx));\r\n            }\r\n        return set;\r\n    }\r\n}\r\nYAMLSet.tag = 'tag:yaml.org,2002:set';\r\nconst set = {\r\n    collection: 'map',\r\n    identify: value => value instanceof Set,\r\n    nodeClass: YAMLSet,\r\n    default: false,\r\n    tag: 'tag:yaml.org,2002:set',\r\n    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),\r\n    resolve(map, onError) {\r\n        if (isMap(map)) {\r\n            if (map.hasAllNullValues(true))\r\n                return Object.assign(new YAMLSet(), map);\r\n            else\r\n                onError('Set items must all have null values');\r\n        }\r\n        else\r\n            onError('Expected a mapping for this tag');\r\n        return map;\r\n    }\r\n};\r\n\r\nexport { YAMLSet, set };\r\n", "import { stringifyNumber } from '../../stringify/stringifyNumber.js';\r\n\r\n/** Internal types handle bigint as number, because TS can't figure it out. */\r\nfunction parseSexagesimal(str, asBigInt) {\r\n    const sign = str[0];\r\n    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\r\n    const num = (n) => asBigInt ? BigInt(n) : Number(n);\r\n    const res = parts\r\n        .replace(/_/g, '')\r\n        .split(':')\r\n        .reduce((res, p) => res * num(60) + num(p), num(0));\r\n    return (sign === '-' ? num(-1) * res : res);\r\n}\r\n/**\r\n * hhhh:mm:ss.sss\r\n *\r\n * Internal types handle bigint as number, because TS can't figure it out.\r\n */\r\nfunction stringifySexagesimal(node) {\r\n    let { value } = node;\r\n    let num = (n) => n;\r\n    if (typeof value === 'bigint')\r\n        num = n => BigInt(n);\r\n    else if (isNaN(value) || !isFinite(value))\r\n        return stringifyNumber(node);\r\n    let sign = '';\r\n    if (value < 0) {\r\n        sign = '-';\r\n        value *= num(-1);\r\n    }\r\n    const _60 = num(60);\r\n    const parts = [value % _60]; // seconds, including ms\r\n    if (value < 60) {\r\n        parts.unshift(0); // at least one : is required\r\n    }\r\n    else {\r\n        value = (value - parts[0]) / _60;\r\n        parts.unshift(value % _60); // minutes\r\n        if (value >= 60) {\r\n            value = (value - parts[0]) / _60;\r\n            parts.unshift(value); // hours\r\n        }\r\n    }\r\n    return (sign +\r\n        parts\r\n            .map(n => String(n).padStart(2, '0'))\r\n            .join(':')\r\n            .replace(/000000\\d*$/, '') // % 60 may introduce error\r\n    );\r\n}\r\nconst intTime = {\r\n    identify: value => typeof value === 'bigint' || Number.isInteger(value),\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:int',\r\n    format: 'TIME',\r\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\r\n    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),\r\n    stringify: stringifySexagesimal\r\n};\r\nconst floatTime = {\r\n    identify: value => typeof value === 'number',\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:float',\r\n    format: 'TIME',\r\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\r\n    resolve: str => parseSexagesimal(str, false),\r\n    stringify: stringifySexagesimal\r\n};\r\nconst timestamp = {\r\n    identify: value => value instanceof Date,\r\n    default: true,\r\n    tag: 'tag:yaml.org,2002:timestamp',\r\n    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\r\n    // may be omitted altogether, resulting in a date format. In such a case, the time part is\r\n    // assumed to be 00:00:00Z (start of day, UTC).\r\n    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\r\n        '(?:' + // time is optional\r\n        '(?:t|T|[ \\\\t]+)' + // t | T | whitespace\r\n        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\r\n        '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\r\n        ')?$'),\r\n    resolve(str) {\r\n        const match = str.match(timestamp.test);\r\n        if (!match)\r\n            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\r\n        const [, year, month, day, hour, minute, second] = match.map(Number);\r\n        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\r\n        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\r\n        const tz = match[8];\r\n        if (tz && tz !== 'Z') {\r\n            let d = parseSexagesimal(tz, false);\r\n            if (Math.abs(d) < 30)\r\n                d *= 60;\r\n            date -= 60000 * d;\r\n        }\r\n        return new Date(date);\r\n    },\r\n    stringify: ({ value }) => value?.toISOString().replace(/(T00:00:00)?\\.000Z$/, '') ?? ''\r\n};\r\n\r\nexport { floatTime, intTime, timestamp };\r\n", "import { map } from '../common/map.js';\r\nimport { nullTag } from '../common/null.js';\r\nimport { seq } from '../common/seq.js';\r\nimport { string } from '../common/string.js';\r\nimport { binary } from './binary.js';\r\nimport { trueTag, falseTag } from './bool.js';\r\nimport { floatNaN, floatExp, float } from './float.js';\r\nimport { intBin, intOct, int, intHex } from './int.js';\r\nimport { merge } from './merge.js';\r\nimport { omap } from './omap.js';\r\nimport { pairs } from './pairs.js';\r\nimport { set } from './set.js';\r\nimport { intTime, floatTime, timestamp } from './timestamp.js';\r\n\r\nconst schema = [\r\n    map,\r\n    seq,\r\n    string,\r\n    nullTag,\r\n    trueTag,\r\n    falseTag,\r\n    intBin,\r\n    intOct,\r\n    int,\r\n    intHex,\r\n    floatNaN,\r\n    floatExp,\r\n    float,\r\n    binary,\r\n    merge,\r\n    omap,\r\n    pairs,\r\n    set,\r\n    intTime,\r\n    floatTime,\r\n    timestamp\r\n];\r\n\r\nexport { schema };\r\n", "import { map } from './common/map.js';\r\nimport { nullTag } from './common/null.js';\r\nimport { seq } from './common/seq.js';\r\nimport { string } from './common/string.js';\r\nimport { boolTag } from './core/bool.js';\r\nimport { floatNaN, floatExp, float } from './core/float.js';\r\nimport { intOct, intHex, int } from './core/int.js';\r\nimport { schema } from './core/schema.js';\r\nimport { schema as schema$1 } from './json/schema.js';\r\nimport { binary } from './yaml-1.1/binary.js';\r\nimport { merge } from './yaml-1.1/merge.js';\r\nimport { omap } from './yaml-1.1/omap.js';\r\nimport { pairs } from './yaml-1.1/pairs.js';\r\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\r\nimport { set } from './yaml-1.1/set.js';\r\nimport { timestamp, intTime, floatTime } from './yaml-1.1/timestamp.js';\r\n\r\nconst schemas = new Map([\r\n    ['core', schema],\r\n    ['failsafe', [map, seq, string]],\r\n    ['json', schema$1],\r\n    ['yaml11', schema$2],\r\n    ['yaml-1.1', schema$2]\r\n]);\r\nconst tagsByName = {\r\n    binary,\r\n    bool: boolTag,\r\n    float,\r\n    floatExp,\r\n    floatNaN,\r\n    floatTime,\r\n    int,\r\n    intHex,\r\n    intOct,\r\n    intTime,\r\n    map,\r\n    merge,\r\n    null: nullTag,\r\n    omap,\r\n    pairs,\r\n    seq,\r\n    set,\r\n    timestamp\r\n};\r\nconst coreKnownTags = {\r\n    'tag:yaml.org,2002:binary': binary,\r\n    'tag:yaml.org,2002:merge': merge,\r\n    'tag:yaml.org,2002:omap': omap,\r\n    'tag:yaml.org,2002:pairs': pairs,\r\n    'tag:yaml.org,2002:set': set,\r\n    'tag:yaml.org,2002:timestamp': timestamp\r\n};\r\nfunction getTags(customTags, schemaName, addMergeTag) {\r\n    const schemaTags = schemas.get(schemaName);\r\n    if (schemaTags && !customTags) {\r\n        return addMergeTag && !schemaTags.includes(merge)\r\n            ? schemaTags.concat(merge)\r\n            : schemaTags.slice();\r\n    }\r\n    let tags = schemaTags;\r\n    if (!tags) {\r\n        if (Array.isArray(customTags))\r\n            tags = [];\r\n        else {\r\n            const keys = Array.from(schemas.keys())\r\n                .filter(key => key !== 'yaml11')\r\n                .map(key => JSON.stringify(key))\r\n                .join(', ');\r\n            throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\r\n        }\r\n    }\r\n    if (Array.isArray(customTags)) {\r\n        for (const tag of customTags)\r\n            tags = tags.concat(tag);\r\n    }\r\n    else if (typeof customTags === 'function') {\r\n        tags = customTags(tags.slice());\r\n    }\r\n    if (addMergeTag)\r\n        tags = tags.concat(merge);\r\n    return tags.reduce((tags, tag) => {\r\n        const tagObj = typeof tag === 'string' ? tagsByName[tag] : tag;\r\n        if (!tagObj) {\r\n            const tagName = JSON.stringify(tag);\r\n            const keys = Object.keys(tagsByName)\r\n                .map(key => JSON.stringify(key))\r\n                .join(', ');\r\n            throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);\r\n        }\r\n        if (!tags.includes(tagObj))\r\n            tags.push(tagObj);\r\n        return tags;\r\n    }, []);\r\n}\r\n\r\nexport { coreKnownTags, getTags };\r\n", "import { MAP, SCALAR, SEQ } from '../nodes/identity.js';\r\nimport { map } from './common/map.js';\r\nimport { seq } from './common/seq.js';\r\nimport { string } from './common/string.js';\r\nimport { getTags, coreKnownTags } from './tags.js';\r\n\r\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\r\nclass Schema {\r\n    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {\r\n        this.compat = Array.isArray(compat)\r\n            ? getTags(compat, 'compat')\r\n            : compat\r\n                ? getTags(null, compat)\r\n                : null;\r\n        this.name = (typeof schema === 'string' && schema) || 'core';\r\n        this.knownTags = resolveKnownTags ? coreKnownTags : {};\r\n        this.tags = getTags(customTags, this.name, merge);\r\n        this.toStringOptions = toStringDefaults ?? null;\r\n        Object.defineProperty(this, MAP, { value: map });\r\n        Object.defineProperty(this, SCALAR, { value: string });\r\n        Object.defineProperty(this, SEQ, { value: seq });\r\n        // Used by createMap()\r\n        this.sortMapEntries =\r\n            typeof sortMapEntries === 'function'\r\n                ? sortMapEntries\r\n                : sortMapEntries === true\r\n                    ? sortMapEntriesByKey\r\n                    : null;\r\n    }\r\n    clone() {\r\n        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));\r\n        copy.tags = this.tags.slice();\r\n        return copy;\r\n    }\r\n}\r\n\r\nexport { Schema };\r\n", "import { isNode } from '../nodes/identity.js';\r\nimport { createStringifyContext, stringify } from './stringify.js';\r\nimport { indentComment, lineComment } from './stringifyComment.js';\r\n\r\nfunction stringifyDocument(doc, options) {\r\n    const lines = [];\r\n    let hasDirectives = options.directives === true;\r\n    if (options.directives !== false && doc.directives) {\r\n        const dir = doc.directives.toString(doc);\r\n        if (dir) {\r\n            lines.push(dir);\r\n            hasDirectives = true;\r\n        }\r\n        else if (doc.directives.docStart)\r\n            hasDirectives = true;\r\n    }\r\n    if (hasDirectives)\r\n        lines.push('---');\r\n    const ctx = createStringifyContext(doc, options);\r\n    const { commentString } = ctx.options;\r\n    if (doc.commentBefore) {\r\n        if (lines.length !== 1)\r\n            lines.unshift('');\r\n        const cs = commentString(doc.commentBefore);\r\n        lines.unshift(indentComment(cs, ''));\r\n    }\r\n    let chompKeep = false;\r\n    let contentComment = null;\r\n    if (doc.contents) {\r\n        if (isNode(doc.contents)) {\r\n            if (doc.contents.spaceBefore && hasDirectives)\r\n                lines.push('');\r\n            if (doc.contents.commentBefore) {\r\n                const cs = commentString(doc.contents.commentBefore);\r\n                lines.push(indentComment(cs, ''));\r\n            }\r\n            // top-level block scalars need to be indented if followed by a comment\r\n            ctx.forceBlockIndent = !!doc.comment;\r\n            contentComment = doc.contents.comment;\r\n        }\r\n        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);\r\n        let body = stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);\r\n        if (contentComment)\r\n            body += lineComment(body, '', commentString(contentComment));\r\n        if ((body[0] === '|' || body[0] === '>') &&\r\n            lines[lines.length - 1] === '---') {\r\n            // Top-level block scalars with a preceding doc marker ought to use the\r\n            // same line for their header.\r\n            lines[lines.length - 1] = `--- ${body}`;\r\n        }\r\n        else\r\n            lines.push(body);\r\n    }\r\n    else {\r\n        lines.push(stringify(doc.contents, ctx));\r\n    }\r\n    if (doc.directives?.docEnd) {\r\n        if (doc.comment) {\r\n            const cs = commentString(doc.comment);\r\n            if (cs.includes('\\n')) {\r\n                lines.push('...');\r\n                lines.push(indentComment(cs, ''));\r\n            }\r\n            else {\r\n                lines.push(`... ${cs}`);\r\n            }\r\n        }\r\n        else {\r\n            lines.push('...');\r\n        }\r\n    }\r\n    else {\r\n        let dc = doc.comment;\r\n        if (dc && chompKeep)\r\n            dc = dc.replace(/^\\n+/, '');\r\n        if (dc) {\r\n            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')\r\n                lines.push('');\r\n            lines.push(indentComment(commentString(dc), ''));\r\n        }\r\n    }\r\n    return lines.join('\\n') + '\\n';\r\n}\r\n\r\nexport { stringifyDocument };\r\n", "import { Alias } from '../nodes/Alias.js';\r\nimport { isEmptyPath, collectionFromPath } from '../nodes/Collection.js';\r\nimport { NODE_TYPE, DOC, isNode, isCollection, isScalar } from '../nodes/identity.js';\r\nimport { Pair } from '../nodes/Pair.js';\r\nimport { toJS } from '../nodes/toJS.js';\r\nimport { Schema } from '../schema/Schema.js';\r\nimport { stringifyDocument } from '../stringify/stringifyDocument.js';\r\nimport { anchorNames, findNewAnchor, createNodeAnchors } from './anchors.js';\r\nimport { applyReviver } from './applyReviver.js';\r\nimport { createNode } from './createNode.js';\r\nimport { Directives } from './directives.js';\r\n\r\nclass Document {\r\n    constructor(value, replacer, options) {\r\n        /** A comment before this Document */\r\n        this.commentBefore = null;\r\n        /** A comment immediately after this Document */\r\n        this.comment = null;\r\n        /** Errors encountered during parsing. */\r\n        this.errors = [];\r\n        /** Warnings encountered during parsing. */\r\n        this.warnings = [];\r\n        Object.defineProperty(this, NODE_TYPE, { value: DOC });\r\n        let _replacer = null;\r\n        if (typeof replacer === 'function' || Array.isArray(replacer)) {\r\n            _replacer = replacer;\r\n        }\r\n        else if (options === undefined && replacer) {\r\n            options = replacer;\r\n            replacer = undefined;\r\n        }\r\n        const opt = Object.assign({\r\n            intAsBigInt: false,\r\n            keepSourceTokens: false,\r\n            logLevel: 'warn',\r\n            prettyErrors: true,\r\n            strict: true,\r\n            stringKeys: false,\r\n            uniqueKeys: true,\r\n            version: '1.2'\r\n        }, options);\r\n        this.options = opt;\r\n        let { version } = opt;\r\n        if (options?._directives) {\r\n            this.directives = options._directives.atDocument();\r\n            if (this.directives.yaml.explicit)\r\n                version = this.directives.yaml.version;\r\n        }\r\n        else\r\n            this.directives = new Directives({ version });\r\n        this.setSchema(version, options);\r\n        // @ts-expect-error We can't really know that this matches Contents.\r\n        this.contents =\r\n            value === undefined ? null : this.createNode(value, _replacer, options);\r\n    }\r\n    /**\r\n     * Create a deep copy of this Document and its contents.\r\n     *\r\n     * Custom Node values that inherit from `Object` still refer to their original instances.\r\n     */\r\n    clone() {\r\n        const copy = Object.create(Document.prototype, {\r\n            [NODE_TYPE]: { value: DOC }\r\n        });\r\n        copy.commentBefore = this.commentBefore;\r\n        copy.comment = this.comment;\r\n        copy.errors = this.errors.slice();\r\n        copy.warnings = this.warnings.slice();\r\n        copy.options = Object.assign({}, this.options);\r\n        if (this.directives)\r\n            copy.directives = this.directives.clone();\r\n        copy.schema = this.schema.clone();\r\n        // @ts-expect-error We can't really know that this matches Contents.\r\n        copy.contents = isNode(this.contents)\r\n            ? this.contents.clone(copy.schema)\r\n            : this.contents;\r\n        if (this.range)\r\n            copy.range = this.range.slice();\r\n        return copy;\r\n    }\r\n    /** Adds a value to the document. */\r\n    add(value) {\r\n        if (assertCollection(this.contents))\r\n            this.contents.add(value);\r\n    }\r\n    /** Adds a value to the document. */\r\n    addIn(path, value) {\r\n        if (assertCollection(this.contents))\r\n            this.contents.addIn(path, value);\r\n    }\r\n    /**\r\n     * Create a new `Alias` node, ensuring that the target `node` has the required anchor.\r\n     *\r\n     * If `node` already has an anchor, `name` is ignored.\r\n     * Otherwise, the `node.anchor` value will be set to `name`,\r\n     * or if an anchor with that name is already present in the document,\r\n     * `name` will be used as a prefix for a new unique anchor.\r\n     * If `name` is undefined, the generated anchor will use 'a' as a prefix.\r\n     */\r\n    createAlias(node, name) {\r\n        if (!node.anchor) {\r\n            const prev = anchorNames(this);\r\n            node.anchor =\r\n                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\r\n                !name || prev.has(name) ? findNewAnchor(name || 'a', prev) : name;\r\n        }\r\n        return new Alias(node.anchor);\r\n    }\r\n    createNode(value, replacer, options) {\r\n        let _replacer = undefined;\r\n        if (typeof replacer === 'function') {\r\n            value = replacer.call({ '': value }, '', value);\r\n            _replacer = replacer;\r\n        }\r\n        else if (Array.isArray(replacer)) {\r\n            const keyToStr = (v) => typeof v === 'number' || v instanceof String || v instanceof Number;\r\n            const asStr = replacer.filter(keyToStr).map(String);\r\n            if (asStr.length > 0)\r\n                replacer = replacer.concat(asStr);\r\n            _replacer = replacer;\r\n        }\r\n        else if (options === undefined && replacer) {\r\n            options = replacer;\r\n            replacer = undefined;\r\n        }\r\n        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};\r\n        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, \r\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\r\n        anchorPrefix || 'a');\r\n        const ctx = {\r\n            aliasDuplicateObjects: aliasDuplicateObjects ?? true,\r\n            keepUndefined: keepUndefined ?? false,\r\n            onAnchor,\r\n            onTagObj,\r\n            replacer: _replacer,\r\n            schema: this.schema,\r\n            sourceObjects\r\n        };\r\n        const node = createNode(value, tag, ctx);\r\n        if (flow && isCollection(node))\r\n            node.flow = true;\r\n        setAnchors();\r\n        return node;\r\n    }\r\n    /**\r\n     * Convert a key and a value into a `Pair` using the current schema,\r\n     * recursively wrapping all values as `Scalar` or `Collection` nodes.\r\n     */\r\n    createPair(key, value, options = {}) {\r\n        const k = this.createNode(key, null, options);\r\n        const v = this.createNode(value, null, options);\r\n        return new Pair(k, v);\r\n    }\r\n    /**\r\n     * Removes a value from the document.\r\n     * @returns `true` if the item was found and removed.\r\n     */\r\n    delete(key) {\r\n        return assertCollection(this.contents) ? this.contents.delete(key) : false;\r\n    }\r\n    /**\r\n     * Removes a value from the document.\r\n     * @returns `true` if the item was found and removed.\r\n     */\r\n    deleteIn(path) {\r\n        if (isEmptyPath(path)) {\r\n            if (this.contents == null)\r\n                return false;\r\n            // @ts-expect-error Presumed impossible if Strict extends false\r\n            this.contents = null;\r\n            return true;\r\n        }\r\n        return assertCollection(this.contents)\r\n            ? this.contents.deleteIn(path)\r\n            : false;\r\n    }\r\n    /**\r\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\r\n     * scalar values from their surrounding node; to disable set `keepScalar` to\r\n     * `true` (collections are always returned intact).\r\n     */\r\n    get(key, keepScalar) {\r\n        return isCollection(this.contents)\r\n            ? this.contents.get(key, keepScalar)\r\n            : undefined;\r\n    }\r\n    /**\r\n     * Returns item at `path`, or `undefined` if not found. By default unwraps\r\n     * scalar values from their surrounding node; to disable set `keepScalar` to\r\n     * `true` (collections are always returned intact).\r\n     */\r\n    getIn(path, keepScalar) {\r\n        if (isEmptyPath(path))\r\n            return !keepScalar && isScalar(this.contents)\r\n                ? this.contents.value\r\n                : this.contents;\r\n        return isCollection(this.contents)\r\n            ? this.contents.getIn(path, keepScalar)\r\n            : undefined;\r\n    }\r\n    /**\r\n     * Checks if the document includes a value with the key `key`.\r\n     */\r\n    has(key) {\r\n        return isCollection(this.contents) ? this.contents.has(key) : false;\r\n    }\r\n    /**\r\n     * Checks if the document includes a value at `path`.\r\n     */\r\n    hasIn(path) {\r\n        if (isEmptyPath(path))\r\n            return this.contents !== undefined;\r\n        return isCollection(this.contents) ? this.contents.hasIn(path) : false;\r\n    }\r\n    /**\r\n     * Sets a value in this document. For `!!set`, `value` needs to be a\r\n     * boolean to add/remove the item from the set.\r\n     */\r\n    set(key, value) {\r\n        if (this.contents == null) {\r\n            // @ts-expect-error We can't really know that this matches Contents.\r\n            this.contents = collectionFromPath(this.schema, [key], value);\r\n        }\r\n        else if (assertCollection(this.contents)) {\r\n            this.contents.set(key, value);\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value in this document. For `!!set`, `value` needs to be a\r\n     * boolean to add/remove the item from the set.\r\n     */\r\n    setIn(path, value) {\r\n        if (isEmptyPath(path)) {\r\n            // @ts-expect-error We can't really know that this matches Contents.\r\n            this.contents = value;\r\n        }\r\n        else if (this.contents == null) {\r\n            // @ts-expect-error We can't really know that this matches Contents.\r\n            this.contents = collectionFromPath(this.schema, Array.from(path), value);\r\n        }\r\n        else if (assertCollection(this.contents)) {\r\n            this.contents.setIn(path, value);\r\n        }\r\n    }\r\n    /**\r\n     * Change the YAML version and schema used by the document.\r\n     * A `null` version disables support for directives, explicit tags, anchors, and aliases.\r\n     * It also requires the `schema` option to be given as a `Schema` instance value.\r\n     *\r\n     * Overrides all previously set schema options.\r\n     */\r\n    setSchema(version, options = {}) {\r\n        if (typeof version === 'number')\r\n            version = String(version);\r\n        let opt;\r\n        switch (version) {\r\n            case '1.1':\r\n                if (this.directives)\r\n                    this.directives.yaml.version = '1.1';\r\n                else\r\n                    this.directives = new Directives({ version: '1.1' });\r\n                opt = { resolveKnownTags: false, schema: 'yaml-1.1' };\r\n                break;\r\n            case '1.2':\r\n            case 'next':\r\n                if (this.directives)\r\n                    this.directives.yaml.version = version;\r\n                else\r\n                    this.directives = new Directives({ version });\r\n                opt = { resolveKnownTags: true, schema: 'core' };\r\n                break;\r\n            case null:\r\n                if (this.directives)\r\n                    delete this.directives;\r\n                opt = null;\r\n                break;\r\n            default: {\r\n                const sv = JSON.stringify(version);\r\n                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);\r\n            }\r\n        }\r\n        // Not using `instanceof Schema` to allow for duck typing\r\n        if (options.schema instanceof Object)\r\n            this.schema = options.schema;\r\n        else if (opt)\r\n            this.schema = new Schema(Object.assign(opt, options));\r\n        else\r\n            throw new Error(`With a null YAML version, the { schema: Schema } option is required`);\r\n    }\r\n    // json & jsonArg are only used from toJSON()\r\n    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {\r\n        const ctx = {\r\n            anchors: new Map(),\r\n            doc: this,\r\n            keep: !json,\r\n            mapAsMap: mapAsMap === true,\r\n            mapKeyWarned: false,\r\n            maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100\r\n        };\r\n        const res = toJS(this.contents, jsonArg ?? '', ctx);\r\n        if (typeof onAnchor === 'function')\r\n            for (const { count, res } of ctx.anchors.values())\r\n                onAnchor(res, count);\r\n        return typeof reviver === 'function'\r\n            ? applyReviver(reviver, { '': res }, '', res)\r\n            : res;\r\n    }\r\n    /**\r\n     * A JSON representation of the document `contents`.\r\n     *\r\n     * @param jsonArg Used by `JSON.stringify` to indicate the array index or\r\n     *   property name.\r\n     */\r\n    toJSON(jsonArg, onAnchor) {\r\n        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });\r\n    }\r\n    /** A YAML representation of the document. */\r\n    toString(options = {}) {\r\n        if (this.errors.length > 0)\r\n            throw new Error('Document with errors cannot be stringified');\r\n        if ('indent' in options &&\r\n            (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {\r\n            const s = JSON.stringify(options.indent);\r\n            throw new Error(`\"indent\" option must be a positive integer, not ${s}`);\r\n        }\r\n        return stringifyDocument(this, options);\r\n    }\r\n}\r\nfunction assertCollection(contents) {\r\n    if (isCollection(contents))\r\n        return true;\r\n    throw new Error('Expected a YAML collection as document contents');\r\n}\r\n\r\nexport { Document };\r\n", "class YAMLError extends Error {\r\n    constructor(name, pos, code, message) {\r\n        super();\r\n        this.name = name;\r\n        this.code = code;\r\n        this.message = message;\r\n        this.pos = pos;\r\n    }\r\n}\r\nclass YAMLParseError extends YAMLError {\r\n    constructor(pos, code, message) {\r\n        super('YAMLParseError', pos, code, message);\r\n    }\r\n}\r\nclass YAMLWarning extends YAMLError {\r\n    constructor(pos, code, message) {\r\n        super('YAMLWarning', pos, code, message);\r\n    }\r\n}\r\nconst prettifyError = (src, lc) => (error) => {\r\n    if (error.pos[0] === -1)\r\n        return;\r\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\r\n    const { line, col } = error.linePos[0];\r\n    error.message += ` at line ${line}, column ${col}`;\r\n    let ci = col - 1;\r\n    let lineStr = src\r\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\r\n        .replace(/[\\n\\r]+$/, '');\r\n    // Trim to max 80 chars, keeping col position near the middle\r\n    if (ci >= 60 && lineStr.length > 80) {\r\n        const trimStart = Math.min(ci - 39, lineStr.length - 79);\r\n        lineStr = '…' + lineStr.substring(trimStart);\r\n        ci -= trimStart - 1;\r\n    }\r\n    if (lineStr.length > 80)\r\n        lineStr = lineStr.substring(0, 79) + '…';\r\n    // Include previous line in context if pointing at line start\r\n    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\r\n        // Regexp won't match if start is trimmed\r\n        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\r\n        if (prev.length > 80)\r\n            prev = prev.substring(0, 79) + '…\\n';\r\n        lineStr = prev + lineStr;\r\n    }\r\n    if (/[^ ]/.test(lineStr)) {\r\n        let count = 1;\r\n        const end = error.linePos[1];\r\n        if (end && end.line === line && end.col > col) {\r\n            count = Math.max(1, Math.min(end.col - col, 80 - ci));\r\n        }\r\n        const pointer = ' '.repeat(ci) + '^'.repeat(count);\r\n        error.message += `:\\n\\n${lineStr}\\n${pointer}\\n`;\r\n    }\r\n};\r\n\r\nexport { YAMLError, YAMLParseError, YAMLWarning, prettifyError };\r\n", "function resolveProps(tokens, { flow, indicator, next, offset, onError, parentIndent, startOnNewline }) {\r\n    let spaceBefore = false;\r\n    let atNewline = startOnNewline;\r\n    let hasSpace = startOnNewline;\r\n    let comment = '';\r\n    let commentSep = '';\r\n    let hasNewline = false;\r\n    let reqSpace = false;\r\n    let tab = null;\r\n    let anchor = null;\r\n    let tag = null;\r\n    let newlineAfterProp = null;\r\n    let comma = null;\r\n    let found = null;\r\n    let start = null;\r\n    for (const token of tokens) {\r\n        if (reqSpace) {\r\n            if (token.type !== 'space' &&\r\n                token.type !== 'newline' &&\r\n                token.type !== 'comma')\r\n                onError(token.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\r\n            reqSpace = false;\r\n        }\r\n        if (tab) {\r\n            if (atNewline && token.type !== 'comment' && token.type !== 'newline') {\r\n                onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\r\n            }\r\n            tab = null;\r\n        }\r\n        switch (token.type) {\r\n            case 'space':\r\n                // At the doc level, tabs at line start may be parsed\r\n                // as leading white space rather than indentation.\r\n                // In a flow collection, only the parser handles indent.\r\n                if (!flow &&\r\n                    (indicator !== 'doc-start' || next?.type !== 'flow-collection') &&\r\n                    token.source.includes('\\t')) {\r\n                    tab = token;\r\n                }\r\n                hasSpace = true;\r\n                break;\r\n            case 'comment': {\r\n                if (!hasSpace)\r\n                    onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\r\n                const cb = token.source.substring(1) || ' ';\r\n                if (!comment)\r\n                    comment = cb;\r\n                else\r\n                    comment += commentSep + cb;\r\n                commentSep = '';\r\n                atNewline = false;\r\n                break;\r\n            }\r\n            case 'newline':\r\n                if (atNewline) {\r\n                    if (comment)\r\n                        comment += token.source;\r\n                    else if (!found || indicator !== 'seq-item-ind')\r\n                        spaceBefore = true;\r\n                }\r\n                else\r\n                    commentSep += token.source;\r\n                atNewline = true;\r\n                hasNewline = true;\r\n                if (anchor || tag)\r\n                    newlineAfterProp = token;\r\n                hasSpace = true;\r\n                break;\r\n            case 'anchor':\r\n                if (anchor)\r\n                    onError(token, 'MULTIPLE_ANCHORS', 'A node can have at most one anchor');\r\n                if (token.source.endsWith(':'))\r\n                    onError(token.offset + token.source.length - 1, 'BAD_ALIAS', 'Anchor ending in : is ambiguous', true);\r\n                anchor = token;\r\n                start ?? (start = token.offset);\r\n                atNewline = false;\r\n                hasSpace = false;\r\n                reqSpace = true;\r\n                break;\r\n            case 'tag': {\r\n                if (tag)\r\n                    onError(token, 'MULTIPLE_TAGS', 'A node can have at most one tag');\r\n                tag = token;\r\n                start ?? (start = token.offset);\r\n                atNewline = false;\r\n                hasSpace = false;\r\n                reqSpace = true;\r\n                break;\r\n            }\r\n            case indicator:\r\n                // Could here handle preceding comments differently\r\n                if (anchor || tag)\r\n                    onError(token, 'BAD_PROP_ORDER', `Anchors and tags must be after the ${token.source} indicator`);\r\n                if (found)\r\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.source} in ${flow ?? 'collection'}`);\r\n                found = token;\r\n                atNewline =\r\n                    indicator === 'seq-item-ind' || indicator === 'explicit-key-ind';\r\n                hasSpace = false;\r\n                break;\r\n            case 'comma':\r\n                if (flow) {\r\n                    if (comma)\r\n                        onError(token, 'UNEXPECTED_TOKEN', `Unexpected , in ${flow}`);\r\n                    comma = token;\r\n                    atNewline = false;\r\n                    hasSpace = false;\r\n                    break;\r\n                }\r\n            // else fallthrough\r\n            default:\r\n                onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${token.type} token`);\r\n                atNewline = false;\r\n                hasSpace = false;\r\n        }\r\n    }\r\n    const last = tokens[tokens.length - 1];\r\n    const end = last ? last.offset + last.source.length : offset;\r\n    if (reqSpace &&\r\n        next &&\r\n        next.type !== 'space' &&\r\n        next.type !== 'newline' &&\r\n        next.type !== 'comma' &&\r\n        (next.type !== 'scalar' || next.source !== '')) {\r\n        onError(next.offset, 'MISSING_CHAR', 'Tags and anchors must be separated from the next token by white space');\r\n    }\r\n    if (tab &&\r\n        ((atNewline && tab.indent <= parentIndent) ||\r\n            next?.type === 'block-map' ||\r\n            next?.type === 'block-seq'))\r\n        onError(tab, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');\r\n    return {\r\n        comma,\r\n        found,\r\n        spaceBefore,\r\n        comment,\r\n        hasNewline,\r\n        anchor,\r\n        tag,\r\n        newlineAfterProp,\r\n        end,\r\n        start: start ?? end\r\n    };\r\n}\r\n\r\nexport { resolveProps };\r\n", "function containsNewline(key) {\r\n    if (!key)\r\n        return null;\r\n    switch (key.type) {\r\n        case 'alias':\r\n        case 'scalar':\r\n        case 'double-quoted-scalar':\r\n        case 'single-quoted-scalar':\r\n            if (key.source.includes('\\n'))\r\n                return true;\r\n            if (key.end)\r\n                for (const st of key.end)\r\n                    if (st.type === 'newline')\r\n                        return true;\r\n            return false;\r\n        case 'flow-collection':\r\n            for (const it of key.items) {\r\n                for (const st of it.start)\r\n                    if (st.type === 'newline')\r\n                        return true;\r\n                if (it.sep)\r\n                    for (const st of it.sep)\r\n                        if (st.type === 'newline')\r\n                            return true;\r\n                if (containsNewline(it.key) || containsNewline(it.value))\r\n                    return true;\r\n            }\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n\r\nexport { containsNewline };\r\n", "import { containsNewline } from './util-contains-newline.js';\r\n\r\nfunction flowIndentCheck(indent, fc, onError) {\r\n    if (fc?.type === 'flow-collection') {\r\n        const end = fc.end[0];\r\n        if (end.indent === indent &&\r\n            (end.source === ']' || end.source === '}') &&\r\n            containsNewline(fc)) {\r\n            const msg = 'Flow end indicator should be more indented than parent';\r\n            onError(end, 'BAD_INDENT', msg, true);\r\n        }\r\n    }\r\n}\r\n\r\nexport { flowIndentCheck };\r\n", "import { isScalar } from '../nodes/identity.js';\r\n\r\nfunction mapIncludes(ctx, items, search) {\r\n    const { uniqueKeys } = ctx.options;\r\n    if (uniqueKeys === false)\r\n        return false;\r\n    const isEqual = typeof uniqueKeys === 'function'\r\n        ? uniqueKeys\r\n        : (a, b) => a === b || (isScalar(a) && isScalar(b) && a.value === b.value);\r\n    return items.some(pair => isEqual(pair.key, search));\r\n}\r\n\r\nexport { mapIncludes };\r\n", "import { Pair } from '../nodes/Pair.js';\r\nimport { YAMLMap } from '../nodes/YAMLMap.js';\r\nimport { resolveProps } from './resolve-props.js';\r\nimport { containsNewline } from './util-contains-newline.js';\r\nimport { flowIndentCheck } from './util-flow-indent-check.js';\r\nimport { mapIncludes } from './util-map-includes.js';\r\n\r\nconst startColMsg = 'All mapping items must start at the same column';\r\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\r\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\r\n    const map = new NodeClass(ctx.schema);\r\n    if (ctx.atRoot)\r\n        ctx.atRoot = false;\r\n    let offset = bm.offset;\r\n    let commentEnd = null;\r\n    for (const collItem of bm.items) {\r\n        const { start, key, sep, value } = collItem;\r\n        // key properties\r\n        const keyProps = resolveProps(start, {\r\n            indicator: 'explicit-key-ind',\r\n            next: key ?? sep?.[0],\r\n            offset,\r\n            onError,\r\n            parentIndent: bm.indent,\r\n            startOnNewline: true\r\n        });\r\n        const implicitKey = !keyProps.found;\r\n        if (implicitKey) {\r\n            if (key) {\r\n                if (key.type === 'block-seq')\r\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\r\n                else if ('indent' in key && key.indent !== bm.indent)\r\n                    onError(offset, 'BAD_INDENT', startColMsg);\r\n            }\r\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\r\n                commentEnd = keyProps.end;\r\n                if (keyProps.comment) {\r\n                    if (map.comment)\r\n                        map.comment += '\\n' + keyProps.comment;\r\n                    else\r\n                        map.comment = keyProps.comment;\r\n                }\r\n                continue;\r\n            }\r\n            if (keyProps.newlineAfterProp || containsNewline(key)) {\r\n                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\r\n            }\r\n        }\r\n        else if (keyProps.found?.indent !== bm.indent) {\r\n            onError(offset, 'BAD_INDENT', startColMsg);\r\n        }\r\n        // key value\r\n        ctx.atKey = true;\r\n        const keyStart = keyProps.end;\r\n        const keyNode = key\r\n            ? composeNode(ctx, key, keyProps, onError)\r\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\r\n        if (ctx.schema.compat)\r\n            flowIndentCheck(bm.indent, key, onError);\r\n        ctx.atKey = false;\r\n        if (mapIncludes(ctx, map.items, keyNode))\r\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\r\n        // value properties\r\n        const valueProps = resolveProps(sep ?? [], {\r\n            indicator: 'map-value-ind',\r\n            next: value,\r\n            offset: keyNode.range[2],\r\n            onError,\r\n            parentIndent: bm.indent,\r\n            startOnNewline: !key || key.type === 'block-scalar'\r\n        });\r\n        offset = valueProps.end;\r\n        if (valueProps.found) {\r\n            if (implicitKey) {\r\n                if (value?.type === 'block-map' && !valueProps.hasNewline)\r\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\r\n                if (ctx.options.strict &&\r\n                    keyProps.start < valueProps.found.offset - 1024)\r\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\r\n            }\r\n            // value value\r\n            const valueNode = value\r\n                ? composeNode(ctx, value, valueProps, onError)\r\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\r\n            if (ctx.schema.compat)\r\n                flowIndentCheck(bm.indent, value, onError);\r\n            offset = valueNode.range[2];\r\n            const pair = new Pair(keyNode, valueNode);\r\n            if (ctx.options.keepSourceTokens)\r\n                pair.srcToken = collItem;\r\n            map.items.push(pair);\r\n        }\r\n        else {\r\n            // key with no value\r\n            if (implicitKey)\r\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\r\n            if (valueProps.comment) {\r\n                if (keyNode.comment)\r\n                    keyNode.comment += '\\n' + valueProps.comment;\r\n                else\r\n                    keyNode.comment = valueProps.comment;\r\n            }\r\n            const pair = new Pair(keyNode);\r\n            if (ctx.options.keepSourceTokens)\r\n                pair.srcToken = collItem;\r\n            map.items.push(pair);\r\n        }\r\n    }\r\n    if (commentEnd && commentEnd < offset)\r\n        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\r\n    map.range = [bm.offset, offset, commentEnd ?? offset];\r\n    return map;\r\n}\r\n\r\nexport { resolveBlockMap };\r\n", "import { YAMLSeq } from '../nodes/YAMLSeq.js';\r\nimport { resolveProps } from './resolve-props.js';\r\nimport { flowIndentCheck } from './util-flow-indent-check.js';\r\n\r\nfunction resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {\r\n    const NodeClass = tag?.nodeClass ?? YAMLSeq;\r\n    const seq = new NodeClass(ctx.schema);\r\n    if (ctx.atRoot)\r\n        ctx.atRoot = false;\r\n    if (ctx.atKey)\r\n        ctx.atKey = false;\r\n    let offset = bs.offset;\r\n    let commentEnd = null;\r\n    for (const { start, value } of bs.items) {\r\n        const props = resolveProps(start, {\r\n            indicator: 'seq-item-ind',\r\n            next: value,\r\n            offset,\r\n            onError,\r\n            parentIndent: bs.indent,\r\n            startOnNewline: true\r\n        });\r\n        if (!props.found) {\r\n            if (props.anchor || props.tag || value) {\r\n                if (value && value.type === 'block-seq')\r\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\r\n                else\r\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\r\n            }\r\n            else {\r\n                commentEnd = props.end;\r\n                if (props.comment)\r\n                    seq.comment = props.comment;\r\n                continue;\r\n            }\r\n        }\r\n        const node = value\r\n            ? composeNode(ctx, value, props, onError)\r\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\r\n        if (ctx.schema.compat)\r\n            flowIndentCheck(bs.indent, value, onError);\r\n        offset = node.range[2];\r\n        seq.items.push(node);\r\n    }\r\n    seq.range = [bs.offset, offset, commentEnd ?? offset];\r\n    return seq;\r\n}\r\n\r\nexport { resolveBlockSeq };\r\n", "function resolveEnd(end, offset, reqSpace, onError) {\r\n    let comment = '';\r\n    if (end) {\r\n        let hasSpace = false;\r\n        let sep = '';\r\n        for (const token of end) {\r\n            const { source, type } = token;\r\n            switch (type) {\r\n                case 'space':\r\n                    hasSpace = true;\r\n                    break;\r\n                case 'comment': {\r\n                    if (reqSpace && !hasSpace)\r\n                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\r\n                    const cb = source.substring(1) || ' ';\r\n                    if (!comment)\r\n                        comment = cb;\r\n                    else\r\n                        comment += sep + cb;\r\n                    sep = '';\r\n                    break;\r\n                }\r\n                case 'newline':\r\n                    if (comment)\r\n                        sep += source;\r\n                    hasSpace = true;\r\n                    break;\r\n                default:\r\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\r\n            }\r\n            offset += source.length;\r\n        }\r\n    }\r\n    return { comment, offset };\r\n}\r\n\r\nexport { resolveEnd };\r\n", "import { isPair } from '../nodes/identity.js';\r\nimport { Pair } from '../nodes/Pair.js';\r\nimport { YAMLMap } from '../nodes/YAMLMap.js';\r\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\r\nimport { resolveEnd } from './resolve-end.js';\r\nimport { resolveProps } from './resolve-props.js';\r\nimport { containsNewline } from './util-contains-newline.js';\r\nimport { mapIncludes } from './util-map-includes.js';\r\n\r\nconst blockMsg = 'Block collections are not allowed within flow collections';\r\nconst isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');\r\nfunction resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {\r\n    const isMap = fc.start.source === '{';\r\n    const fcName = isMap ? 'flow map' : 'flow sequence';\r\n    const NodeClass = (tag?.nodeClass ?? (isMap ? YAMLMap : YAMLSeq));\r\n    const coll = new NodeClass(ctx.schema);\r\n    coll.flow = true;\r\n    const atRoot = ctx.atRoot;\r\n    if (atRoot)\r\n        ctx.atRoot = false;\r\n    if (ctx.atKey)\r\n        ctx.atKey = false;\r\n    let offset = fc.offset + fc.start.source.length;\r\n    for (let i = 0; i < fc.items.length; ++i) {\r\n        const collItem = fc.items[i];\r\n        const { start, key, sep, value } = collItem;\r\n        const props = resolveProps(start, {\r\n            flow: fcName,\r\n            indicator: 'explicit-key-ind',\r\n            next: key ?? sep?.[0],\r\n            offset,\r\n            onError,\r\n            parentIndent: fc.indent,\r\n            startOnNewline: false\r\n        });\r\n        if (!props.found) {\r\n            if (!props.anchor && !props.tag && !sep && !value) {\r\n                if (i === 0 && props.comma)\r\n                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\r\n                else if (i < fc.items.length - 1)\r\n                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\r\n                if (props.comment) {\r\n                    if (coll.comment)\r\n                        coll.comment += '\\n' + props.comment;\r\n                    else\r\n                        coll.comment = props.comment;\r\n                }\r\n                offset = props.end;\r\n                continue;\r\n            }\r\n            if (!isMap && ctx.options.strict && containsNewline(key))\r\n                onError(key, // checked by containsNewline()\r\n                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\r\n        }\r\n        if (i === 0) {\r\n            if (props.comma)\r\n                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\r\n        }\r\n        else {\r\n            if (!props.comma)\r\n                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\r\n            if (props.comment) {\r\n                let prevItemComment = '';\r\n                loop: for (const st of start) {\r\n                    switch (st.type) {\r\n                        case 'comma':\r\n                        case 'space':\r\n                            break;\r\n                        case 'comment':\r\n                            prevItemComment = st.source.substring(1);\r\n                            break loop;\r\n                        default:\r\n                            break loop;\r\n                    }\r\n                }\r\n                if (prevItemComment) {\r\n                    let prev = coll.items[coll.items.length - 1];\r\n                    if (isPair(prev))\r\n                        prev = prev.value ?? prev.key;\r\n                    if (prev.comment)\r\n                        prev.comment += '\\n' + prevItemComment;\r\n                    else\r\n                        prev.comment = prevItemComment;\r\n                    props.comment = props.comment.substring(prevItemComment.length + 1);\r\n                }\r\n            }\r\n        }\r\n        if (!isMap && !sep && !props.found) {\r\n            // item is a value in a seq\r\n            // → key & sep are empty, start does not include ? or :\r\n            const valueNode = value\r\n                ? composeNode(ctx, value, props, onError)\r\n                : composeEmptyNode(ctx, props.end, sep, null, props, onError);\r\n            coll.items.push(valueNode);\r\n            offset = valueNode.range[2];\r\n            if (isBlock(value))\r\n                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\r\n        }\r\n        else {\r\n            // item is a key+value pair\r\n            // key value\r\n            ctx.atKey = true;\r\n            const keyStart = props.end;\r\n            const keyNode = key\r\n                ? composeNode(ctx, key, props, onError)\r\n                : composeEmptyNode(ctx, keyStart, start, null, props, onError);\r\n            if (isBlock(key))\r\n                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\r\n            ctx.atKey = false;\r\n            // value properties\r\n            const valueProps = resolveProps(sep ?? [], {\r\n                flow: fcName,\r\n                indicator: 'map-value-ind',\r\n                next: value,\r\n                offset: keyNode.range[2],\r\n                onError,\r\n                parentIndent: fc.indent,\r\n                startOnNewline: false\r\n            });\r\n            if (valueProps.found) {\r\n                if (!isMap && !props.found && ctx.options.strict) {\r\n                    if (sep)\r\n                        for (const st of sep) {\r\n                            if (st === valueProps.found)\r\n                                break;\r\n                            if (st.type === 'newline') {\r\n                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\r\n                                break;\r\n                            }\r\n                        }\r\n                    if (props.start < valueProps.found.offset - 1024)\r\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\r\n                }\r\n            }\r\n            else if (value) {\r\n                if ('source' in value && value.source && value.source[0] === ':')\r\n                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);\r\n                else\r\n                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\r\n            }\r\n            // value value\r\n            const valueNode = value\r\n                ? composeNode(ctx, value, valueProps, onError)\r\n                : valueProps.found\r\n                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)\r\n                    : null;\r\n            if (valueNode) {\r\n                if (isBlock(value))\r\n                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\r\n            }\r\n            else if (valueProps.comment) {\r\n                if (keyNode.comment)\r\n                    keyNode.comment += '\\n' + valueProps.comment;\r\n                else\r\n                    keyNode.comment = valueProps.comment;\r\n            }\r\n            const pair = new Pair(keyNode, valueNode);\r\n            if (ctx.options.keepSourceTokens)\r\n                pair.srcToken = collItem;\r\n            if (isMap) {\r\n                const map = coll;\r\n                if (mapIncludes(ctx, map.items, keyNode))\r\n                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\r\n                map.items.push(pair);\r\n            }\r\n            else {\r\n                const map = new YAMLMap(ctx.schema);\r\n                map.flow = true;\r\n                map.items.push(pair);\r\n                const endRange = (valueNode ?? keyNode).range;\r\n                map.range = [keyNode.range[0], endRange[1], endRange[2]];\r\n                coll.items.push(map);\r\n            }\r\n            offset = valueNode ? valueNode.range[2] : valueProps.end;\r\n        }\r\n    }\r\n    const expectedEnd = isMap ? '}' : ']';\r\n    const [ce, ...ee] = fc.end;\r\n    let cePos = offset;\r\n    if (ce && ce.source === expectedEnd)\r\n        cePos = ce.offset + ce.source.length;\r\n    else {\r\n        const name = fcName[0].toUpperCase() + fcName.substring(1);\r\n        const msg = atRoot\r\n            ? `${name} must end with a ${expectedEnd}`\r\n            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\r\n        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\r\n        if (ce && ce.source.length !== 1)\r\n            ee.unshift(ce);\r\n    }\r\n    if (ee.length > 0) {\r\n        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);\r\n        if (end.comment) {\r\n            if (coll.comment)\r\n                coll.comment += '\\n' + end.comment;\r\n            else\r\n                coll.comment = end.comment;\r\n        }\r\n        coll.range = [fc.offset, cePos, end.offset];\r\n    }\r\n    else {\r\n        coll.range = [fc.offset, cePos, cePos];\r\n    }\r\n    return coll;\r\n}\r\n\r\nexport { resolveFlowCollection };\r\n", "import { isNode } from '../nodes/identity.js';\r\nimport { Scalar } from '../nodes/Scalar.js';\r\nimport { YAMLMap } from '../nodes/YAMLMap.js';\r\nimport { YAMLSeq } from '../nodes/YAMLSeq.js';\r\nimport { resolveBlockMap } from './resolve-block-map.js';\r\nimport { resolveBlockSeq } from './resolve-block-seq.js';\r\nimport { resolveFlowCollection } from './resolve-flow-collection.js';\r\n\r\nfunction resolveCollection(CN, ctx, token, onError, tagName, tag) {\r\n    const coll = token.type === 'block-map'\r\n        ? resolveBlockMap(CN, ctx, token, onError, tag)\r\n        : token.type === 'block-seq'\r\n            ? resolveBlockSeq(CN, ctx, token, onError, tag)\r\n            : resolveFlowCollection(CN, ctx, token, onError, tag);\r\n    const Coll = coll.constructor;\r\n    // If we got a tagName matching the class, or the tag name is '!',\r\n    // then use the tagName from the node class used to create it.\r\n    if (tagName === '!' || tagName === Coll.tagName) {\r\n        coll.tag = Coll.tagName;\r\n        return coll;\r\n    }\r\n    if (tagName)\r\n        coll.tag = tagName;\r\n    return coll;\r\n}\r\nfunction composeCollection(CN, ctx, token, props, onError) {\r\n    const tagToken = props.tag;\r\n    const tagName = !tagToken\r\n        ? null\r\n        : ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));\r\n    if (token.type === 'block-seq') {\r\n        const { anchor, newlineAfterProp: nl } = props;\r\n        const lastProp = anchor && tagToken\r\n            ? anchor.offset > tagToken.offset\r\n                ? anchor\r\n                : tagToken\r\n            : (anchor ?? tagToken);\r\n        if (lastProp && (!nl || nl.offset < lastProp.offset)) {\r\n            const message = 'Missing newline after block sequence props';\r\n            onError(lastProp, 'MISSING_CHAR', message);\r\n        }\r\n    }\r\n    const expType = token.type === 'block-map'\r\n        ? 'map'\r\n        : token.type === 'block-seq'\r\n            ? 'seq'\r\n            : token.start.source === '{'\r\n                ? 'map'\r\n                : 'seq';\r\n    // shortcut: check if it's a generic YAMLMap or YAMLSeq\r\n    // before jumping into the custom tag logic.\r\n    if (!tagToken ||\r\n        !tagName ||\r\n        tagName === '!' ||\r\n        (tagName === YAMLMap.tagName && expType === 'map') ||\r\n        (tagName === YAMLSeq.tagName && expType === 'seq')) {\r\n        return resolveCollection(CN, ctx, token, onError, tagName);\r\n    }\r\n    let tag = ctx.schema.tags.find(t => t.tag === tagName && t.collection === expType);\r\n    if (!tag) {\r\n        const kt = ctx.schema.knownTags[tagName];\r\n        if (kt && kt.collection === expType) {\r\n            ctx.schema.tags.push(Object.assign({}, kt, { default: false }));\r\n            tag = kt;\r\n        }\r\n        else {\r\n            if (kt) {\r\n                onError(tagToken, 'BAD_COLLECTION_TYPE', `${kt.tag} used for ${expType} collection, but expects ${kt.collection ?? 'scalar'}`, true);\r\n            }\r\n            else {\r\n                onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);\r\n            }\r\n            return resolveCollection(CN, ctx, token, onError, tagName);\r\n        }\r\n    }\r\n    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);\r\n    const res = tag.resolve?.(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options) ?? coll;\r\n    const node = isNode(res)\r\n        ? res\r\n        : new Scalar(res);\r\n    node.range = coll.range;\r\n    node.tag = tagName;\r\n    if (tag?.format)\r\n        node.format = tag.format;\r\n    return node;\r\n}\r\n\r\nexport { composeCollection };\r\n", "import { Scalar } from '../nodes/Scalar.js';\r\n\r\nfunction resolveBlockScalar(ctx, scalar, onError) {\r\n    const start = scalar.offset;\r\n    const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);\r\n    if (!header)\r\n        return { value: '', type: null, comment: '', range: [start, start, start] };\r\n    const type = header.mode === '>' ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;\r\n    const lines = scalar.source ? splitLines(scalar.source) : [];\r\n    // determine the end of content & start of chomping\r\n    let chompStart = lines.length;\r\n    for (let i = lines.length - 1; i >= 0; --i) {\r\n        const content = lines[i][1];\r\n        if (content === '' || content === '\\r')\r\n            chompStart = i;\r\n        else\r\n            break;\r\n    }\r\n    // shortcut for empty contents\r\n    if (chompStart === 0) {\r\n        const value = header.chomp === '+' && lines.length > 0\r\n            ? '\\n'.repeat(Math.max(1, lines.length - 1))\r\n            : '';\r\n        let end = start + header.length;\r\n        if (scalar.source)\r\n            end += scalar.source.length;\r\n        return { value, type, comment: header.comment, range: [start, end, end] };\r\n    }\r\n    // find the indentation level to trim from start\r\n    let trimIndent = scalar.indent + header.indent;\r\n    let offset = scalar.offset + header.length;\r\n    let contentStart = 0;\r\n    for (let i = 0; i < chompStart; ++i) {\r\n        const [indent, content] = lines[i];\r\n        if (content === '' || content === '\\r') {\r\n            if (header.indent === 0 && indent.length > trimIndent)\r\n                trimIndent = indent.length;\r\n        }\r\n        else {\r\n            if (indent.length < trimIndent) {\r\n                const message = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\r\n                onError(offset + indent.length, 'MISSING_CHAR', message);\r\n            }\r\n            if (header.indent === 0)\r\n                trimIndent = indent.length;\r\n            contentStart = i;\r\n            if (trimIndent === 0 && !ctx.atRoot) {\r\n                const message = 'Block scalar values in collections must be indented';\r\n                onError(offset, 'BAD_INDENT', message);\r\n            }\r\n            break;\r\n        }\r\n        offset += indent.length + content.length + 1;\r\n    }\r\n    // include trailing more-indented empty lines in content\r\n    for (let i = lines.length - 1; i >= chompStart; --i) {\r\n        if (lines[i][0].length > trimIndent)\r\n            chompStart = i + 1;\r\n    }\r\n    let value = '';\r\n    let sep = '';\r\n    let prevMoreIndented = false;\r\n    // leading whitespace is kept intact\r\n    for (let i = 0; i < contentStart; ++i)\r\n        value += lines[i][0].slice(trimIndent) + '\\n';\r\n    for (let i = contentStart; i < chompStart; ++i) {\r\n        let [indent, content] = lines[i];\r\n        offset += indent.length + content.length + 1;\r\n        const crlf = content[content.length - 1] === '\\r';\r\n        if (crlf)\r\n            content = content.slice(0, -1);\r\n        /* istanbul ignore if already caught in lexer */\r\n        if (content && indent.length < trimIndent) {\r\n            const src = header.indent\r\n                ? 'explicit indentation indicator'\r\n                : 'first line';\r\n            const message = `Block scalar lines must not be less indented than their ${src}`;\r\n            onError(offset - content.length - (crlf ? 2 : 1), 'BAD_INDENT', message);\r\n            indent = '';\r\n        }\r\n        if (type === Scalar.BLOCK_LITERAL) {\r\n            value += sep + indent.slice(trimIndent) + content;\r\n            sep = '\\n';\r\n        }\r\n        else if (indent.length > trimIndent || content[0] === '\\t') {\r\n            // more-indented content within a folded block\r\n            if (sep === ' ')\r\n                sep = '\\n';\r\n            else if (!prevMoreIndented && sep === '\\n')\r\n                sep = '\\n\\n';\r\n            value += sep + indent.slice(trimIndent) + content;\r\n            sep = '\\n';\r\n            prevMoreIndented = true;\r\n        }\r\n        else if (content === '') {\r\n            // empty line\r\n            if (sep === '\\n')\r\n                value += '\\n';\r\n            else\r\n                sep = '\\n';\r\n        }\r\n        else {\r\n            value += sep + content;\r\n            sep = ' ';\r\n            prevMoreIndented = false;\r\n        }\r\n    }\r\n    switch (header.chomp) {\r\n        case '-':\r\n            break;\r\n        case '+':\r\n            for (let i = chompStart; i < lines.length; ++i)\r\n                value += '\\n' + lines[i][0].slice(trimIndent);\r\n            if (value[value.length - 1] !== '\\n')\r\n                value += '\\n';\r\n            break;\r\n        default:\r\n            value += '\\n';\r\n    }\r\n    const end = start + header.length + scalar.source.length;\r\n    return { value, type, comment: header.comment, range: [start, end, end] };\r\n}\r\nfunction parseBlockScalarHeader({ offset, props }, strict, onError) {\r\n    /* istanbul ignore if should not happen */\r\n    if (props[0].type !== 'block-scalar-header') {\r\n        onError(props[0], 'IMPOSSIBLE', 'Block scalar header not found');\r\n        return null;\r\n    }\r\n    const { source } = props[0];\r\n    const mode = source[0];\r\n    let indent = 0;\r\n    let chomp = '';\r\n    let error = -1;\r\n    for (let i = 1; i < source.length; ++i) {\r\n        const ch = source[i];\r\n        if (!chomp && (ch === '-' || ch === '+'))\r\n            chomp = ch;\r\n        else {\r\n            const n = Number(ch);\r\n            if (!indent && n)\r\n                indent = n;\r\n            else if (error === -1)\r\n                error = offset + i;\r\n        }\r\n    }\r\n    if (error !== -1)\r\n        onError(error, 'UNEXPECTED_TOKEN', `Block scalar header includes extra characters: ${source}`);\r\n    let hasSpace = false;\r\n    let comment = '';\r\n    let length = source.length;\r\n    for (let i = 1; i < props.length; ++i) {\r\n        const token = props[i];\r\n        switch (token.type) {\r\n            case 'space':\r\n                hasSpace = true;\r\n            // fallthrough\r\n            case 'newline':\r\n                length += token.source.length;\r\n                break;\r\n            case 'comment':\r\n                if (strict && !hasSpace) {\r\n                    const message = 'Comments must be separated from other tokens by white space characters';\r\n                    onError(token, 'MISSING_CHAR', message);\r\n                }\r\n                length += token.source.length;\r\n                comment = token.source.substring(1);\r\n                break;\r\n            case 'error':\r\n                onError(token, 'UNEXPECTED_TOKEN', token.message);\r\n                length += token.source.length;\r\n                break;\r\n            /* istanbul ignore next should not happen */\r\n            default: {\r\n                const message = `Unexpected token in block scalar header: ${token.type}`;\r\n                onError(token, 'UNEXPECTED_TOKEN', message);\r\n                const ts = token.source;\r\n                if (ts && typeof ts === 'string')\r\n                    length += ts.length;\r\n            }\r\n        }\r\n    }\r\n    return { mode, indent, chomp, comment, length };\r\n}\r\n/** @returns Array of lines split up as `[indent, content]` */\r\nfunction splitLines(source) {\r\n    const split = source.split(/\\n( *)/);\r\n    const first = split[0];\r\n    const m = first.match(/^( *)/);\r\n    const line0 = m?.[1]\r\n        ? [m[1], first.slice(m[1].length)]\r\n        : ['', first];\r\n    const lines = [line0];\r\n    for (let i = 1; i < split.length; i += 2)\r\n        lines.push([split[i], split[i + 1]]);\r\n    return lines;\r\n}\r\n\r\nexport { resolveBlockScalar };\r\n", "import { Scalar } from '../nodes/Scalar.js';\r\nimport { resolveEnd } from './resolve-end.js';\r\n\r\nfunction resolveFlowScalar(scalar, strict, onError) {\r\n    const { offset, type, source, end } = scalar;\r\n    let _type;\r\n    let value;\r\n    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);\r\n    switch (type) {\r\n        case 'scalar':\r\n            _type = Scalar.PLAIN;\r\n            value = plainValue(source, _onError);\r\n            break;\r\n        case 'single-quoted-scalar':\r\n            _type = Scalar.QUOTE_SINGLE;\r\n            value = singleQuotedValue(source, _onError);\r\n            break;\r\n        case 'double-quoted-scalar':\r\n            _type = Scalar.QUOTE_DOUBLE;\r\n            value = doubleQuotedValue(source, _onError);\r\n            break;\r\n        /* istanbul ignore next should not happen */\r\n        default:\r\n            onError(scalar, 'UNEXPECTED_TOKEN', `Expected a flow scalar value, but found: ${type}`);\r\n            return {\r\n                value: '',\r\n                type: null,\r\n                comment: '',\r\n                range: [offset, offset + source.length, offset + source.length]\r\n            };\r\n    }\r\n    const valueEnd = offset + source.length;\r\n    const re = resolveEnd(end, valueEnd, strict, onError);\r\n    return {\r\n        value,\r\n        type: _type,\r\n        comment: re.comment,\r\n        range: [offset, valueEnd, re.offset]\r\n    };\r\n}\r\nfunction plainValue(source, onError) {\r\n    let badChar = '';\r\n    switch (source[0]) {\r\n        /* istanbul ignore next should not happen */\r\n        case '\\t':\r\n            badChar = 'a tab character';\r\n            break;\r\n        case ',':\r\n            badChar = 'flow indicator character ,';\r\n            break;\r\n        case '%':\r\n            badChar = 'directive indicator character %';\r\n            break;\r\n        case '|':\r\n        case '>': {\r\n            badChar = `block scalar indicator ${source[0]}`;\r\n            break;\r\n        }\r\n        case '@':\r\n        case '`': {\r\n            badChar = `reserved character ${source[0]}`;\r\n            break;\r\n        }\r\n    }\r\n    if (badChar)\r\n        onError(0, 'BAD_SCALAR_START', `Plain value cannot start with ${badChar}`);\r\n    return foldLines(source);\r\n}\r\nfunction singleQuotedValue(source, onError) {\r\n    if (source[source.length - 1] !== \"'\" || source.length === 1)\r\n        onError(source.length, 'MISSING_CHAR', \"Missing closing 'quote\");\r\n    return foldLines(source.slice(1, -1)).replace(/''/g, \"'\");\r\n}\r\nfunction foldLines(source) {\r\n    /**\r\n     * The negative lookbehind here and in the `re` RegExp is to\r\n     * prevent causing a polynomial search time in certain cases.\r\n     *\r\n     * The try-catch is for Safari, which doesn't support this yet:\r\n     * https://caniuse.com/js-regexp-lookbehind\r\n     */\r\n    let first, line;\r\n    try {\r\n        first = new RegExp('(.*?)(?<![ \\t])[ \\t]*\\r?\\n', 'sy');\r\n        line = new RegExp('[ \\t]*(.*?)(?:(?<![ \\t])[ \\t]*)?\\r?\\n', 'sy');\r\n    }\r\n    catch {\r\n        first = /(.*?)[ \\t]*\\r?\\n/sy;\r\n        line = /[ \\t]*(.*?)[ \\t]*\\r?\\n/sy;\r\n    }\r\n    let match = first.exec(source);\r\n    if (!match)\r\n        return source;\r\n    let res = match[1];\r\n    let sep = ' ';\r\n    let pos = first.lastIndex;\r\n    line.lastIndex = pos;\r\n    while ((match = line.exec(source))) {\r\n        if (match[1] === '') {\r\n            if (sep === '\\n')\r\n                res += sep;\r\n            else\r\n                sep = '\\n';\r\n        }\r\n        else {\r\n            res += sep + match[1];\r\n            sep = ' ';\r\n        }\r\n        pos = line.lastIndex;\r\n    }\r\n    const last = /[ \\t]*(.*)/sy;\r\n    last.lastIndex = pos;\r\n    match = last.exec(source);\r\n    return res + sep + (match?.[1] ?? '');\r\n}\r\nfunction doubleQuotedValue(source, onError) {\r\n    let res = '';\r\n    for (let i = 1; i < source.length - 1; ++i) {\r\n        const ch = source[i];\r\n        if (ch === '\\r' && source[i + 1] === '\\n')\r\n            continue;\r\n        if (ch === '\\n') {\r\n            const { fold, offset } = foldNewline(source, i);\r\n            res += fold;\r\n            i = offset;\r\n        }\r\n        else if (ch === '\\\\') {\r\n            let next = source[++i];\r\n            const cc = escapeCodes[next];\r\n            if (cc)\r\n                res += cc;\r\n            else if (next === '\\n') {\r\n                // skip escaped newlines, but still trim the following line\r\n                next = source[i + 1];\r\n                while (next === ' ' || next === '\\t')\r\n                    next = source[++i + 1];\r\n            }\r\n            else if (next === '\\r' && source[i + 1] === '\\n') {\r\n                // skip escaped CRLF newlines, but still trim the following line\r\n                next = source[++i + 1];\r\n                while (next === ' ' || next === '\\t')\r\n                    next = source[++i + 1];\r\n            }\r\n            else if (next === 'x' || next === 'u' || next === 'U') {\r\n                const length = { x: 2, u: 4, U: 8 }[next];\r\n                res += parseCharCode(source, i + 1, length, onError);\r\n                i += length;\r\n            }\r\n            else {\r\n                const raw = source.substr(i - 1, 2);\r\n                onError(i - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\r\n                res += raw;\r\n            }\r\n        }\r\n        else if (ch === ' ' || ch === '\\t') {\r\n            // trim trailing whitespace\r\n            const wsStart = i;\r\n            let next = source[i + 1];\r\n            while (next === ' ' || next === '\\t')\r\n                next = source[++i + 1];\r\n            if (next !== '\\n' && !(next === '\\r' && source[i + 2] === '\\n'))\r\n                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;\r\n        }\r\n        else {\r\n            res += ch;\r\n        }\r\n    }\r\n    if (source[source.length - 1] !== '\"' || source.length === 1)\r\n        onError(source.length, 'MISSING_CHAR', 'Missing closing \"quote');\r\n    return res;\r\n}\r\n/**\r\n * Fold a single newline into a space, multiple newlines to N - 1 newlines.\r\n * Presumes `source[offset] === '\\n'`\r\n */\r\nfunction foldNewline(source, offset) {\r\n    let fold = '';\r\n    let ch = source[offset + 1];\r\n    while (ch === ' ' || ch === '\\t' || ch === '\\n' || ch === '\\r') {\r\n        if (ch === '\\r' && source[offset + 2] !== '\\n')\r\n            break;\r\n        if (ch === '\\n')\r\n            fold += '\\n';\r\n        offset += 1;\r\n        ch = source[offset + 1];\r\n    }\r\n    if (!fold)\r\n        fold = ' ';\r\n    return { fold, offset };\r\n}\r\nconst escapeCodes = {\r\n    '0': '\\0', // null character\r\n    a: '\\x07', // bell character\r\n    b: '\\b', // backspace\r\n    e: '\\x1b', // escape character\r\n    f: '\\f', // form feed\r\n    n: '\\n', // line feed\r\n    r: '\\r', // carriage return\r\n    t: '\\t', // horizontal tab\r\n    v: '\\v', // vertical tab\r\n    N: '\\u0085', // Unicode next line\r\n    _: '\\u00a0', // Unicode non-breaking space\r\n    L: '\\u2028', // Unicode line separator\r\n    P: '\\u2029', // Unicode paragraph separator\r\n    ' ': ' ',\r\n    '\"': '\"',\r\n    '/': '/',\r\n    '\\\\': '\\\\',\r\n    '\\t': '\\t'\r\n};\r\nfunction parseCharCode(source, offset, length, onError) {\r\n    const cc = source.substr(offset, length);\r\n    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);\r\n    const code = ok ? parseInt(cc, 16) : NaN;\r\n    if (isNaN(code)) {\r\n        const raw = source.substr(offset - 2, length + 2);\r\n        onError(offset - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${raw}`);\r\n        return raw;\r\n    }\r\n    return String.fromCodePoint(code);\r\n}\r\n\r\nexport { resolveFlowScalar };\r\n", "import { isScalar, SCALAR } from '../nodes/identity.js';\r\nimport { Scalar } from '../nodes/Scalar.js';\r\nimport { resolveBlockScalar } from './resolve-block-scalar.js';\r\nimport { resolveFlowScalar } from './resolve-flow-scalar.js';\r\n\r\nfunction composeScalar(ctx, token, tagToken, onError) {\r\n    const { value, type, comment, range } = token.type === 'block-scalar'\r\n        ? resolveBlockScalar(ctx, token, onError)\r\n        : resolveFlowScalar(token, ctx.options.strict, onError);\r\n    const tagName = tagToken\r\n        ? ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg))\r\n        : null;\r\n    let tag;\r\n    if (ctx.options.stringKeys && ctx.atKey) {\r\n        tag = ctx.schema[SCALAR];\r\n    }\r\n    else if (tagName)\r\n        tag = findScalarTagByName(ctx.schema, value, tagName, tagToken, onError);\r\n    else if (token.type === 'scalar')\r\n        tag = findScalarTagByTest(ctx, value, token, onError);\r\n    else\r\n        tag = ctx.schema[SCALAR];\r\n    let scalar;\r\n    try {\r\n        const res = tag.resolve(value, msg => onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg), ctx.options);\r\n        scalar = isScalar(res) ? res : new Scalar(res);\r\n    }\r\n    catch (error) {\r\n        const msg = error instanceof Error ? error.message : String(error);\r\n        onError(tagToken ?? token, 'TAG_RESOLVE_FAILED', msg);\r\n        scalar = new Scalar(value);\r\n    }\r\n    scalar.range = range;\r\n    scalar.source = value;\r\n    if (type)\r\n        scalar.type = type;\r\n    if (tagName)\r\n        scalar.tag = tagName;\r\n    if (tag.format)\r\n        scalar.format = tag.format;\r\n    if (comment)\r\n        scalar.comment = comment;\r\n    return scalar;\r\n}\r\nfunction findScalarTagByName(schema, value, tagName, tagToken, onError) {\r\n    if (tagName === '!')\r\n        return schema[SCALAR]; // non-specific tag\r\n    const matchWithTest = [];\r\n    for (const tag of schema.tags) {\r\n        if (!tag.collection && tag.tag === tagName) {\r\n            if (tag.default && tag.test)\r\n                matchWithTest.push(tag);\r\n            else\r\n                return tag;\r\n        }\r\n    }\r\n    for (const tag of matchWithTest)\r\n        if (tag.test?.test(value))\r\n            return tag;\r\n    const kt = schema.knownTags[tagName];\r\n    if (kt && !kt.collection) {\r\n        // Ensure that the known tag is available for stringifying,\r\n        // but does not get used by default.\r\n        schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));\r\n        return kt;\r\n    }\r\n    onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, tagName !== 'tag:yaml.org,2002:str');\r\n    return schema[SCALAR];\r\n}\r\nfunction findScalarTagByTest({ atKey, directives, schema }, value, token, onError) {\r\n    const tag = schema.tags.find(tag => (tag.default === true || (atKey && tag.default === 'key')) &&\r\n        tag.test?.test(value)) || schema[SCALAR];\r\n    if (schema.compat) {\r\n        const compat = schema.compat.find(tag => tag.default && tag.test?.test(value)) ??\r\n            schema[SCALAR];\r\n        if (tag.tag !== compat.tag) {\r\n            const ts = directives.tagString(tag.tag);\r\n            const cs = directives.tagString(compat.tag);\r\n            const msg = `Value may be parsed as either ${ts} or ${cs}`;\r\n            onError(token, 'TAG_RESOLVE_FAILED', msg, true);\r\n        }\r\n    }\r\n    return tag;\r\n}\r\n\r\nexport { composeScalar };\r\n", "function emptyScalarPosition(offset, before, pos) {\r\n    if (before) {\r\n        pos ?? (pos = before.length);\r\n        for (let i = pos - 1; i >= 0; --i) {\r\n            let st = before[i];\r\n            switch (st.type) {\r\n                case 'space':\r\n                case 'comment':\r\n                case 'newline':\r\n                    offset -= st.source.length;\r\n                    continue;\r\n            }\r\n            // Technically, an empty scalar is immediately after the last non-empty\r\n            // node, but it's more useful to place it after any whitespace.\r\n            st = before[++i];\r\n            while (st?.type === 'space') {\r\n                offset += st.source.length;\r\n                st = before[++i];\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return offset;\r\n}\r\n\r\nexport { emptyScalarPosition };\r\n", "import { Alias } from '../nodes/Alias.js';\r\nimport { isScalar } from '../nodes/identity.js';\r\nimport { composeCollection } from './compose-collection.js';\r\nimport { composeScalar } from './compose-scalar.js';\r\nimport { resolveEnd } from './resolve-end.js';\r\nimport { emptyScalarPosition } from './util-empty-scalar-position.js';\r\n\r\nconst CN = { composeNode, composeEmptyNode };\r\nfunction composeNode(ctx, token, props, onError) {\r\n    const atKey = ctx.atKey;\r\n    const { spaceBefore, comment, anchor, tag } = props;\r\n    let node;\r\n    let isSrcToken = true;\r\n    switch (token.type) {\r\n        case 'alias':\r\n            node = composeAlias(ctx, token, onError);\r\n            if (anchor || tag)\r\n                onError(token, 'ALIAS_PROPS', 'An alias node must not specify any properties');\r\n            break;\r\n        case 'scalar':\r\n        case 'single-quoted-scalar':\r\n        case 'double-quoted-scalar':\r\n        case 'block-scalar':\r\n            node = composeScalar(ctx, token, tag, onError);\r\n            if (anchor)\r\n                node.anchor = anchor.source.substring(1);\r\n            break;\r\n        case 'block-map':\r\n        case 'block-seq':\r\n        case 'flow-collection':\r\n            node = composeCollection(CN, ctx, token, props, onError);\r\n            if (anchor)\r\n                node.anchor = anchor.source.substring(1);\r\n            break;\r\n        default: {\r\n            const message = token.type === 'error'\r\n                ? token.message\r\n                : `Unsupported token (type: ${token.type})`;\r\n            onError(token, 'UNEXPECTED_TOKEN', message);\r\n            node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);\r\n            isSrcToken = false;\r\n        }\r\n    }\r\n    if (anchor && node.anchor === '')\r\n        onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\r\n    if (atKey &&\r\n        ctx.options.stringKeys &&\r\n        (!isScalar(node) ||\r\n            typeof node.value !== 'string' ||\r\n            (node.tag && node.tag !== 'tag:yaml.org,2002:str'))) {\r\n        const msg = 'With stringKeys, all keys must be strings';\r\n        onError(tag ?? token, 'NON_STRING_KEY', msg);\r\n    }\r\n    if (spaceBefore)\r\n        node.spaceBefore = true;\r\n    if (comment) {\r\n        if (token.type === 'scalar' && token.source === '')\r\n            node.comment = comment;\r\n        else\r\n            node.commentBefore = comment;\r\n    }\r\n    // @ts-expect-error Type checking misses meaning of isSrcToken\r\n    if (ctx.options.keepSourceTokens && isSrcToken)\r\n        node.srcToken = token;\r\n    return node;\r\n}\r\nfunction composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {\r\n    const token = {\r\n        type: 'scalar',\r\n        offset: emptyScalarPosition(offset, before, pos),\r\n        indent: -1,\r\n        source: ''\r\n    };\r\n    const node = composeScalar(ctx, token, tag, onError);\r\n    if (anchor) {\r\n        node.anchor = anchor.source.substring(1);\r\n        if (node.anchor === '')\r\n            onError(anchor, 'BAD_ALIAS', 'Anchor cannot be an empty string');\r\n    }\r\n    if (spaceBefore)\r\n        node.spaceBefore = true;\r\n    if (comment) {\r\n        node.comment = comment;\r\n        node.range[2] = end;\r\n    }\r\n    return node;\r\n}\r\nfunction composeAlias({ options }, { offset, source, end }, onError) {\r\n    const alias = new Alias(source.substring(1));\r\n    if (alias.source === '')\r\n        onError(offset, 'BAD_ALIAS', 'Alias cannot be an empty string');\r\n    if (alias.source.endsWith(':'))\r\n        onError(offset + source.length - 1, 'BAD_ALIAS', 'Alias ending in : is ambiguous', true);\r\n    const valueEnd = offset + source.length;\r\n    const re = resolveEnd(end, valueEnd, options.strict, onError);\r\n    alias.range = [offset, valueEnd, re.offset];\r\n    if (re.comment)\r\n        alias.comment = re.comment;\r\n    return alias;\r\n}\r\n\r\nexport { composeEmptyNode, composeNode };\r\n", "import { Document } from '../doc/Document.js';\r\nimport { composeNode, composeEmptyNode } from './compose-node.js';\r\nimport { resolveEnd } from './resolve-end.js';\r\nimport { resolveProps } from './resolve-props.js';\r\n\r\nfunction composeDoc(options, directives, { offset, start, value, end }, onError) {\r\n    const opts = Object.assign({ _directives: directives }, options);\r\n    const doc = new Document(undefined, opts);\r\n    const ctx = {\r\n        atKey: false,\r\n        atRoot: true,\r\n        directives: doc.directives,\r\n        options: doc.options,\r\n        schema: doc.schema\r\n    };\r\n    const props = resolveProps(start, {\r\n        indicator: 'doc-start',\r\n        next: value ?? end?.[0],\r\n        offset,\r\n        onError,\r\n        parentIndent: 0,\r\n        startOnNewline: true\r\n    });\r\n    if (props.found) {\r\n        doc.directives.docStart = true;\r\n        if (value &&\r\n            (value.type === 'block-map' || value.type === 'block-seq') &&\r\n            !props.hasNewline)\r\n            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');\r\n    }\r\n    // @ts-expect-error If Contents is set, let's trust the user\r\n    doc.contents = value\r\n        ? composeNode(ctx, value, props, onError)\r\n        : composeEmptyNode(ctx, props.end, start, null, props, onError);\r\n    const contentEnd = doc.contents.range[2];\r\n    const re = resolveEnd(end, contentEnd, false, onError);\r\n    if (re.comment)\r\n        doc.comment = re.comment;\r\n    doc.range = [offset, contentEnd, re.offset];\r\n    return doc;\r\n}\r\n\r\nexport { composeDoc };\r\n", "import { Directives } from '../doc/directives.js';\r\nimport { Document } from '../doc/Document.js';\r\nimport { YAMLWarning, YAMLParseError } from '../errors.js';\r\nimport { isCollection, isPair } from '../nodes/identity.js';\r\nimport { composeDoc } from './compose-doc.js';\r\nimport { resolveEnd } from './resolve-end.js';\r\n\r\nfunction getErrorPos(src) {\r\n    if (typeof src === 'number')\r\n        return [src, src + 1];\r\n    if (Array.isArray(src))\r\n        return src.length === 2 ? src : [src[0], src[1]];\r\n    const { offset, source } = src;\r\n    return [offset, offset + (typeof source === 'string' ? source.length : 1)];\r\n}\r\nfunction parsePrelude(prelude) {\r\n    let comment = '';\r\n    let atComment = false;\r\n    let afterEmptyLine = false;\r\n    for (let i = 0; i < prelude.length; ++i) {\r\n        const source = prelude[i];\r\n        switch (source[0]) {\r\n            case '#':\r\n                comment +=\r\n                    (comment === '' ? '' : afterEmptyLine ? '\\n\\n' : '\\n') +\r\n                        (source.substring(1) || ' ');\r\n                atComment = true;\r\n                afterEmptyLine = false;\r\n                break;\r\n            case '%':\r\n                if (prelude[i + 1]?.[0] !== '#')\r\n                    i += 1;\r\n                atComment = false;\r\n                break;\r\n            default:\r\n                // This may be wrong after doc-end, but in that case it doesn't matter\r\n                if (!atComment)\r\n                    afterEmptyLine = true;\r\n                atComment = false;\r\n        }\r\n    }\r\n    return { comment, afterEmptyLine };\r\n}\r\n/**\r\n * Compose a stream of CST nodes into a stream of YAML Documents.\r\n *\r\n * ```ts\r\n * import { Composer, Parser } from 'yaml'\r\n *\r\n * const src: string = ...\r\n * const tokens = new Parser().parse(src)\r\n * const docs = new Composer().compose(tokens)\r\n * ```\r\n */\r\nclass Composer {\r\n    constructor(options = {}) {\r\n        this.doc = null;\r\n        this.atDirectives = false;\r\n        this.prelude = [];\r\n        this.errors = [];\r\n        this.warnings = [];\r\n        this.onError = (source, code, message, warning) => {\r\n            const pos = getErrorPos(source);\r\n            if (warning)\r\n                this.warnings.push(new YAMLWarning(pos, code, message));\r\n            else\r\n                this.errors.push(new YAMLParseError(pos, code, message));\r\n        };\r\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\r\n        this.directives = new Directives({ version: options.version || '1.2' });\r\n        this.options = options;\r\n    }\r\n    decorate(doc, afterDoc) {\r\n        const { comment, afterEmptyLine } = parsePrelude(this.prelude);\r\n        //console.log({ dc: doc.comment, prelude, comment })\r\n        if (comment) {\r\n            const dc = doc.contents;\r\n            if (afterDoc) {\r\n                doc.comment = doc.comment ? `${doc.comment}\\n${comment}` : comment;\r\n            }\r\n            else if (afterEmptyLine || doc.directives.docStart || !dc) {\r\n                doc.commentBefore = comment;\r\n            }\r\n            else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {\r\n                let it = dc.items[0];\r\n                if (isPair(it))\r\n                    it = it.key;\r\n                const cb = it.commentBefore;\r\n                it.commentBefore = cb ? `${comment}\\n${cb}` : comment;\r\n            }\r\n            else {\r\n                const cb = dc.commentBefore;\r\n                dc.commentBefore = cb ? `${comment}\\n${cb}` : comment;\r\n            }\r\n        }\r\n        if (afterDoc) {\r\n            Array.prototype.push.apply(doc.errors, this.errors);\r\n            Array.prototype.push.apply(doc.warnings, this.warnings);\r\n        }\r\n        else {\r\n            doc.errors = this.errors;\r\n            doc.warnings = this.warnings;\r\n        }\r\n        this.prelude = [];\r\n        this.errors = [];\r\n        this.warnings = [];\r\n    }\r\n    /**\r\n     * Current stream status information.\r\n     *\r\n     * Mostly useful at the end of input for an empty stream.\r\n     */\r\n    streamInfo() {\r\n        return {\r\n            comment: parsePrelude(this.prelude).comment,\r\n            directives: this.directives,\r\n            errors: this.errors,\r\n            warnings: this.warnings\r\n        };\r\n    }\r\n    /**\r\n     * Compose tokens into documents.\r\n     *\r\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\r\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\r\n     */\r\n    *compose(tokens, forceDoc = false, endOffset = -1) {\r\n        for (const token of tokens)\r\n            yield* this.next(token);\r\n        yield* this.end(forceDoc, endOffset);\r\n    }\r\n    /** Advance the composer by one CST token. */\r\n    *next(token) {\r\n        switch (token.type) {\r\n            case 'directive':\r\n                this.directives.add(token.source, (offset, message, warning) => {\r\n                    const pos = getErrorPos(token);\r\n                    pos[0] += offset;\r\n                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);\r\n                });\r\n                this.prelude.push(token.source);\r\n                this.atDirectives = true;\r\n                break;\r\n            case 'document': {\r\n                const doc = composeDoc(this.options, this.directives, token, this.onError);\r\n                if (this.atDirectives && !doc.directives.docStart)\r\n                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');\r\n                this.decorate(doc, false);\r\n                if (this.doc)\r\n                    yield this.doc;\r\n                this.doc = doc;\r\n                this.atDirectives = false;\r\n                break;\r\n            }\r\n            case 'byte-order-mark':\r\n            case 'space':\r\n                break;\r\n            case 'comment':\r\n            case 'newline':\r\n                this.prelude.push(token.source);\r\n                break;\r\n            case 'error': {\r\n                const msg = token.source\r\n                    ? `${token.message}: ${JSON.stringify(token.source)}`\r\n                    : token.message;\r\n                const error = new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);\r\n                if (this.atDirectives || !this.doc)\r\n                    this.errors.push(error);\r\n                else\r\n                    this.doc.errors.push(error);\r\n                break;\r\n            }\r\n            case 'doc-end': {\r\n                if (!this.doc) {\r\n                    const msg = 'Unexpected doc-end without preceding document';\r\n                    this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));\r\n                    break;\r\n                }\r\n                this.doc.directives.docEnd = true;\r\n                const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);\r\n                this.decorate(this.doc, true);\r\n                if (end.comment) {\r\n                    const dc = this.doc.comment;\r\n                    this.doc.comment = dc ? `${dc}\\n${end.comment}` : end.comment;\r\n                }\r\n                this.doc.range[2] = end.offset;\r\n                break;\r\n            }\r\n            default:\r\n                this.errors.push(new YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));\r\n        }\r\n    }\r\n    /**\r\n     * Call at end of input to yield any remaining document.\r\n     *\r\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\r\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\r\n     */\r\n    *end(forceDoc = false, endOffset = -1) {\r\n        if (this.doc) {\r\n            this.decorate(this.doc, true);\r\n            yield this.doc;\r\n            this.doc = null;\r\n        }\r\n        else if (forceDoc) {\r\n            const opts = Object.assign({ _directives: this.directives }, this.options);\r\n            const doc = new Document(undefined, opts);\r\n            if (this.atDirectives)\r\n                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');\r\n            doc.range = [0, endOffset, endOffset];\r\n            this.decorate(doc, false);\r\n            yield doc;\r\n        }\r\n    }\r\n}\r\n\r\nexport { Composer };\r\n", "export { createScalarToken, resolveAsScalar, setScalarValue } from './cst-scalar.js';\r\nexport { stringify } from './cst-stringify.js';\r\nexport { visit } from './cst-visit.js';\r\n\r\n/** The byte order mark */\r\nconst BOM = '\\u{FEFF}';\r\n/** Start of doc-mode */\r\nconst DOCUMENT = '\\x02'; // C0: Start of Text\r\n/** Unexpected end of flow-mode */\r\nconst FLOW_END = '\\x18'; // C0: Cancel\r\n/** Next token is a scalar value */\r\nconst SCALAR = '\\x1f'; // C0: Unit Separator\r\n/** @returns `true` if `token` is a flow or block collection */\r\nconst isCollection = (token) => !!token && 'items' in token;\r\n/** @returns `true` if `token` is a flow or block scalar; not an alias */\r\nconst isScalar = (token) => !!token &&\r\n    (token.type === 'scalar' ||\r\n        token.type === 'single-quoted-scalar' ||\r\n        token.type === 'double-quoted-scalar' ||\r\n        token.type === 'block-scalar');\r\n/* istanbul ignore next */\r\n/** Get a printable representation of a lexer token */\r\nfunction prettyToken(token) {\r\n    switch (token) {\r\n        case BOM:\r\n            return '<BOM>';\r\n        case DOCUMENT:\r\n            return '<DOC>';\r\n        case FLOW_END:\r\n            return '<FLOW_END>';\r\n        case SCALAR:\r\n            return '<SCALAR>';\r\n        default:\r\n            return JSON.stringify(token);\r\n    }\r\n}\r\n/** Identify the type of a lexer token. May return `null` for unknown tokens. */\r\nfunction tokenType(source) {\r\n    switch (source) {\r\n        case BOM:\r\n            return 'byte-order-mark';\r\n        case DOCUMENT:\r\n            return 'doc-mode';\r\n        case FLOW_END:\r\n            return 'flow-error-end';\r\n        case SCALAR:\r\n            return 'scalar';\r\n        case '---':\r\n            return 'doc-start';\r\n        case '...':\r\n            return 'doc-end';\r\n        case '':\r\n        case '\\n':\r\n        case '\\r\\n':\r\n            return 'newline';\r\n        case '-':\r\n            return 'seq-item-ind';\r\n        case '?':\r\n            return 'explicit-key-ind';\r\n        case ':':\r\n            return 'map-value-ind';\r\n        case '{':\r\n            return 'flow-map-start';\r\n        case '}':\r\n            return 'flow-map-end';\r\n        case '[':\r\n            return 'flow-seq-start';\r\n        case ']':\r\n            return 'flow-seq-end';\r\n        case ',':\r\n            return 'comma';\r\n    }\r\n    switch (source[0]) {\r\n        case ' ':\r\n        case '\\t':\r\n            return 'space';\r\n        case '#':\r\n            return 'comment';\r\n        case '%':\r\n            return 'directive-line';\r\n        case '*':\r\n            return 'alias';\r\n        case '&':\r\n            return 'anchor';\r\n        case '!':\r\n            return 'tag';\r\n        case \"'\":\r\n            return 'single-quoted-scalar';\r\n        case '\"':\r\n            return 'double-quoted-scalar';\r\n        case '|':\r\n        case '>':\r\n            return 'block-scalar-header';\r\n    }\r\n    return null;\r\n}\r\n\r\nexport { BOM, DOCUMENT, FLOW_END, SCALAR, isCollection, isScalar, prettyToken, tokenType };\r\n", "import { resolveBlockScalar } from '../compose/resolve-block-scalar.js';\r\nimport { resolveFlowScalar } from '../compose/resolve-flow-scalar.js';\r\nimport { YAMLParseError } from '../errors.js';\r\nimport { stringifyString } from '../stringify/stringifyString.js';\r\n\r\nfunction resolveAsScalar(token, strict = true, onError) {\r\n    if (token) {\r\n        const _onError = (pos, code, message) => {\r\n            const offset = typeof pos === 'number' ? pos : Array.isArray(pos) ? pos[0] : pos.offset;\r\n            if (onError)\r\n                onError(offset, code, message);\r\n            else\r\n                throw new YAMLParseError([offset, offset + 1], code, message);\r\n        };\r\n        switch (token.type) {\r\n            case 'scalar':\r\n            case 'single-quoted-scalar':\r\n            case 'double-quoted-scalar':\r\n                return resolveFlowScalar(token, strict, _onError);\r\n            case 'block-scalar':\r\n                return resolveBlockScalar({ options: { strict } }, token, _onError);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Create a new scalar token with `value`\r\n *\r\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\r\n * as this function does not support any schema operations and won't check for such conflicts.\r\n *\r\n * @param value The string representation of the value, which will have its content properly indented.\r\n * @param context.end Comments and whitespace after the end of the value, or after the block scalar header. If undefined, a newline will be added.\r\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\r\n * @param context.indent The indent level of the token.\r\n * @param context.inFlow Is this scalar within a flow collection? This may affect the resolved type of the token's value.\r\n * @param context.offset The offset position of the token.\r\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\r\n */\r\nfunction createScalarToken(value, context) {\r\n    const { implicitKey = false, indent, inFlow = false, offset = -1, type = 'PLAIN' } = context;\r\n    const source = stringifyString({ type, value }, {\r\n        implicitKey,\r\n        indent: indent > 0 ? ' '.repeat(indent) : '',\r\n        inFlow,\r\n        options: { blockQuote: true, lineWidth: -1 }\r\n    });\r\n    const end = context.end ?? [\r\n        { type: 'newline', offset: -1, indent, source: '\\n' }\r\n    ];\r\n    switch (source[0]) {\r\n        case '|':\r\n        case '>': {\r\n            const he = source.indexOf('\\n');\r\n            const head = source.substring(0, he);\r\n            const body = source.substring(he + 1) + '\\n';\r\n            const props = [\r\n                { type: 'block-scalar-header', offset, indent, source: head }\r\n            ];\r\n            if (!addEndtoBlockProps(props, end))\r\n                props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\r\n            return { type: 'block-scalar', offset, indent, props, source: body };\r\n        }\r\n        case '\"':\r\n            return { type: 'double-quoted-scalar', offset, indent, source, end };\r\n        case \"'\":\r\n            return { type: 'single-quoted-scalar', offset, indent, source, end };\r\n        default:\r\n            return { type: 'scalar', offset, indent, source, end };\r\n    }\r\n}\r\n/**\r\n * Set the value of `token` to the given string `value`, overwriting any previous contents and type that it may have.\r\n *\r\n * Best efforts are made to retain any comments previously associated with the `token`,\r\n * though all contents within a collection's `items` will be overwritten.\r\n *\r\n * Values that represent an actual string but may be parsed as a different type should use a `type` other than `'PLAIN'`,\r\n * as this function does not support any schema operations and won't check for such conflicts.\r\n *\r\n * @param token Any token. If it does not include an `indent` value, the value will be stringified as if it were an implicit key.\r\n * @param value The string representation of the value, which will have its content properly indented.\r\n * @param context.afterKey In most cases, values after a key should have an additional level of indentation.\r\n * @param context.implicitKey Being within an implicit key may affect the resolved type of the token's value.\r\n * @param context.inFlow Being within a flow collection may affect the resolved type of the token's value.\r\n * @param context.type The preferred type of the scalar token. If undefined, the previous type of the `token` will be used, defaulting to `'PLAIN'`.\r\n */\r\nfunction setScalarValue(token, value, context = {}) {\r\n    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;\r\n    let indent = 'indent' in token ? token.indent : null;\r\n    if (afterKey && typeof indent === 'number')\r\n        indent += 2;\r\n    if (!type)\r\n        switch (token.type) {\r\n            case 'single-quoted-scalar':\r\n                type = 'QUOTE_SINGLE';\r\n                break;\r\n            case 'double-quoted-scalar':\r\n                type = 'QUOTE_DOUBLE';\r\n                break;\r\n            case 'block-scalar': {\r\n                const header = token.props[0];\r\n                if (header.type !== 'block-scalar-header')\r\n                    throw new Error('Invalid block scalar header');\r\n                type = header.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';\r\n                break;\r\n            }\r\n            default:\r\n                type = 'PLAIN';\r\n        }\r\n    const source = stringifyString({ type, value }, {\r\n        implicitKey: implicitKey || indent === null,\r\n        indent: indent !== null && indent > 0 ? ' '.repeat(indent) : '',\r\n        inFlow,\r\n        options: { blockQuote: true, lineWidth: -1 }\r\n    });\r\n    switch (source[0]) {\r\n        case '|':\r\n        case '>':\r\n            setBlockScalarValue(token, source);\r\n            break;\r\n        case '\"':\r\n            setFlowScalarValue(token, source, 'double-quoted-scalar');\r\n            break;\r\n        case \"'\":\r\n            setFlowScalarValue(token, source, 'single-quoted-scalar');\r\n            break;\r\n        default:\r\n            setFlowScalarValue(token, source, 'scalar');\r\n    }\r\n}\r\nfunction setBlockScalarValue(token, source) {\r\n    const he = source.indexOf('\\n');\r\n    const head = source.substring(0, he);\r\n    const body = source.substring(he + 1) + '\\n';\r\n    if (token.type === 'block-scalar') {\r\n        const header = token.props[0];\r\n        if (header.type !== 'block-scalar-header')\r\n            throw new Error('Invalid block scalar header');\r\n        header.source = head;\r\n        token.source = body;\r\n    }\r\n    else {\r\n        const { offset } = token;\r\n        const indent = 'indent' in token ? token.indent : -1;\r\n        const props = [\r\n            { type: 'block-scalar-header', offset, indent, source: head }\r\n        ];\r\n        if (!addEndtoBlockProps(props, 'end' in token ? token.end : undefined))\r\n            props.push({ type: 'newline', offset: -1, indent, source: '\\n' });\r\n        for (const key of Object.keys(token))\r\n            if (key !== 'type' && key !== 'offset')\r\n                delete token[key];\r\n        Object.assign(token, { type: 'block-scalar', indent, props, source: body });\r\n    }\r\n}\r\n/** @returns `true` if last token is a newline */\r\nfunction addEndtoBlockProps(props, end) {\r\n    if (end)\r\n        for (const st of end)\r\n            switch (st.type) {\r\n                case 'space':\r\n                case 'comment':\r\n                    props.push(st);\r\n                    break;\r\n                case 'newline':\r\n                    props.push(st);\r\n                    return true;\r\n            }\r\n    return false;\r\n}\r\nfunction setFlowScalarValue(token, source, type) {\r\n    switch (token.type) {\r\n        case 'scalar':\r\n        case 'double-quoted-scalar':\r\n        case 'single-quoted-scalar':\r\n            token.type = type;\r\n            token.source = source;\r\n            break;\r\n        case 'block-scalar': {\r\n            const end = token.props.slice(1);\r\n            let oa = source.length;\r\n            if (token.props[0].type === 'block-scalar-header')\r\n                oa -= token.props[0].source.length;\r\n            for (const tok of end)\r\n                tok.offset += oa;\r\n            delete token.props;\r\n            Object.assign(token, { type, source, end });\r\n            break;\r\n        }\r\n        case 'block-map':\r\n        case 'block-seq': {\r\n            const offset = token.offset + source.length;\r\n            const nl = { type: 'newline', offset, indent: token.indent, source: '\\n' };\r\n            delete token.items;\r\n            Object.assign(token, { type, source, end: [nl] });\r\n            break;\r\n        }\r\n        default: {\r\n            const indent = 'indent' in token ? token.indent : -1;\r\n            const end = 'end' in token && Array.isArray(token.end)\r\n                ? token.end.filter(st => st.type === 'space' ||\r\n                    st.type === 'comment' ||\r\n                    st.type === 'newline')\r\n                : [];\r\n            for (const key of Object.keys(token))\r\n                if (key !== 'type' && key !== 'offset')\r\n                    delete token[key];\r\n            Object.assign(token, { type, indent, source, end });\r\n        }\r\n    }\r\n}\r\n\r\nexport { createScalarToken, resolveAsScalar, setScalarValue };\r\n", "/**\r\n * Stringify a CST document, token, or collection item\r\n *\r\n * Fair warning: This applies no validation whatsoever, and\r\n * simply concatenates the sources in their logical order.\r\n */\r\nconst stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\r\nfunction stringifyToken(token) {\r\n    switch (token.type) {\r\n        case 'block-scalar': {\r\n            let res = '';\r\n            for (const tok of token.props)\r\n                res += stringifyToken(tok);\r\n            return res + token.source;\r\n        }\r\n        case 'block-map':\r\n        case 'block-seq': {\r\n            let res = '';\r\n            for (const item of token.items)\r\n                res += stringifyItem(item);\r\n            return res;\r\n        }\r\n        case 'flow-collection': {\r\n            let res = token.start.source;\r\n            for (const item of token.items)\r\n                res += stringifyItem(item);\r\n            for (const st of token.end)\r\n                res += st.source;\r\n            return res;\r\n        }\r\n        case 'document': {\r\n            let res = stringifyItem(token);\r\n            if (token.end)\r\n                for (const st of token.end)\r\n                    res += st.source;\r\n            return res;\r\n        }\r\n        default: {\r\n            let res = token.source;\r\n            if ('end' in token && token.end)\r\n                for (const st of token.end)\r\n                    res += st.source;\r\n            return res;\r\n        }\r\n    }\r\n}\r\nfunction stringifyItem({ start, key, sep, value }) {\r\n    let res = '';\r\n    for (const st of start)\r\n        res += st.source;\r\n    if (key)\r\n        res += stringifyToken(key);\r\n    if (sep)\r\n        for (const st of sep)\r\n            res += st.source;\r\n    if (value)\r\n        res += stringifyToken(value);\r\n    return res;\r\n}\r\n\r\nexport { stringify };\r\n", "const BREAK = Symbol('break visit');\r\nconst SKIP = Symbol('skip children');\r\nconst REMOVE = Symbol('remove item');\r\n/**\r\n * Apply a visitor to a CST document or item.\r\n *\r\n * Walks through the tree (depth-first) starting from the root, calling a\r\n * `visitor` function with two arguments when entering each item:\r\n *   - `item`: The current item, which included the following members:\r\n *     - `start: SourceToken[]` – Source tokens before the key or value,\r\n *       possibly including its anchor or tag.\r\n *     - `key?: Token | null` – Set for pair values. May then be `null`, if\r\n *       the key before the `:` separator is empty.\r\n *     - `sep?: SourceToken[]` – Source tokens between the key and the value,\r\n *       which should include the `:` map value indicator if `value` is set.\r\n *     - `value?: Token` – The value of a sequence item, or of a map pair.\r\n *   - `path`: The steps from the root to the current node, as an array of\r\n *     `['key' | 'value', number]` tuples.\r\n *\r\n * The return value of the visitor may be used to control the traversal:\r\n *   - `undefined` (default): Do nothing and continue\r\n *   - `visit.SKIP`: Do not visit the children of this token, continue with\r\n *      next sibling\r\n *   - `visit.BREAK`: Terminate traversal completely\r\n *   - `visit.REMOVE`: Remove the current item, then continue with the next one\r\n *   - `number`: Set the index of the next step. This is useful especially if\r\n *     the index of the current token has changed.\r\n *   - `function`: Define the next visitor for this item. After the original\r\n *     visitor is called on item entry, next visitors are called after handling\r\n *     a non-empty `key` and when exiting the item.\r\n */\r\nfunction visit(cst, visitor) {\r\n    if ('type' in cst && cst.type === 'document')\r\n        cst = { start: cst.start, value: cst.value };\r\n    _visit(Object.freeze([]), cst, visitor);\r\n}\r\n// Without the `as symbol` casts, TS declares these in the `visit`\r\n// namespace using `var`, but then complains about that because\r\n// `unique symbol` must be `const`.\r\n/** Terminate visit traversal completely */\r\nvisit.BREAK = BREAK;\r\n/** Do not visit the children of the current item */\r\nvisit.SKIP = SKIP;\r\n/** Remove the current item */\r\nvisit.REMOVE = REMOVE;\r\n/** Find the item at `path` from `cst` as the root */\r\nvisit.itemAtPath = (cst, path) => {\r\n    let item = cst;\r\n    for (const [field, index] of path) {\r\n        const tok = item?.[field];\r\n        if (tok && 'items' in tok) {\r\n            item = tok.items[index];\r\n        }\r\n        else\r\n            return undefined;\r\n    }\r\n    return item;\r\n};\r\n/**\r\n * Get the immediate parent collection of the item at `path` from `cst` as the root.\r\n *\r\n * Throws an error if the collection is not found, which should never happen if the item itself exists.\r\n */\r\nvisit.parentCollection = (cst, path) => {\r\n    const parent = visit.itemAtPath(cst, path.slice(0, -1));\r\n    const field = path[path.length - 1][0];\r\n    const coll = parent?.[field];\r\n    if (coll && 'items' in coll)\r\n        return coll;\r\n    throw new Error('Parent collection not found');\r\n};\r\nfunction _visit(path, item, visitor) {\r\n    let ctrl = visitor(item, path);\r\n    if (typeof ctrl === 'symbol')\r\n        return ctrl;\r\n    for (const field of ['key', 'value']) {\r\n        const token = item[field];\r\n        if (token && 'items' in token) {\r\n            for (let i = 0; i < token.items.length; ++i) {\r\n                const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor);\r\n                if (typeof ci === 'number')\r\n                    i = ci - 1;\r\n                else if (ci === BREAK)\r\n                    return BREAK;\r\n                else if (ci === REMOVE) {\r\n                    token.items.splice(i, 1);\r\n                    i -= 1;\r\n                }\r\n            }\r\n            if (typeof ctrl === 'function' && field === 'key')\r\n                ctrl = ctrl(item, path);\r\n        }\r\n    }\r\n    return typeof ctrl === 'function' ? ctrl(item, path) : ctrl;\r\n}\r\n\r\nexport { visit };\r\n", "import { BOM, DOCUMENT, FLOW_END, SCALAR } from './cst.js';\r\n\r\n/*\r\nSTART -> stream\r\n\r\nstream\r\n  directive -> line-end -> stream\r\n  indent + line-end -> stream\r\n  [else] -> line-start\r\n\r\nline-end\r\n  comment -> line-end\r\n  newline -> .\r\n  input-end -> END\r\n\r\nline-start\r\n  doc-start -> doc\r\n  doc-end -> stream\r\n  [else] -> indent -> block-start\r\n\r\nblock-start\r\n  seq-item-start -> block-start\r\n  explicit-key-start -> block-start\r\n  map-value-start -> block-start\r\n  [else] -> doc\r\n\r\ndoc\r\n  line-end -> line-start\r\n  spaces -> doc\r\n  anchor -> doc\r\n  tag -> doc\r\n  flow-start -> flow -> doc\r\n  flow-end -> error -> doc\r\n  seq-item-start -> error -> doc\r\n  explicit-key-start -> error -> doc\r\n  map-value-start -> doc\r\n  alias -> doc\r\n  quote-start -> quoted-scalar -> doc\r\n  block-scalar-header -> line-end -> block-scalar(min) -> line-start\r\n  [else] -> plain-scalar(false, min) -> doc\r\n\r\nflow\r\n  line-end -> flow\r\n  spaces -> flow\r\n  anchor -> flow\r\n  tag -> flow\r\n  flow-start -> flow -> flow\r\n  flow-end -> .\r\n  seq-item-start -> error -> flow\r\n  explicit-key-start -> flow\r\n  map-value-start -> flow\r\n  alias -> flow\r\n  quote-start -> quoted-scalar -> flow\r\n  comma -> flow\r\n  [else] -> plain-scalar(true, 0) -> flow\r\n\r\nquoted-scalar\r\n  quote-end -> .\r\n  [else] -> quoted-scalar\r\n\r\nblock-scalar(min)\r\n  newline + peek(indent < min) -> .\r\n  [else] -> block-scalar(min)\r\n\r\nplain-scalar(is-flow, min)\r\n  scalar-end(is-flow) -> .\r\n  peek(newline + (indent < min)) -> .\r\n  [else] -> plain-scalar(min)\r\n*/\r\nfunction isEmpty(ch) {\r\n    switch (ch) {\r\n        case undefined:\r\n        case ' ':\r\n        case '\\n':\r\n        case '\\r':\r\n        case '\\t':\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nconst hexDigits = new Set('0123456789ABCDEFabcdef');\r\nconst tagChars = new Set(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()\");\r\nconst flowIndicatorChars = new Set(',[]{}');\r\nconst invalidAnchorChars = new Set(' ,[]{}\\n\\r\\t');\r\nconst isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);\r\n/**\r\n * Splits an input string into lexical tokens, i.e. smaller strings that are\r\n * easily identifiable by `tokens.tokenType()`.\r\n *\r\n * Lexing starts always in a \"stream\" context. Incomplete input may be buffered\r\n * until a complete token can be emitted.\r\n *\r\n * In addition to slices of the original input, the following control characters\r\n * may also be emitted:\r\n *\r\n * - `\\x02` (Start of Text): A document starts with the next token\r\n * - `\\x18` (Cancel): Unexpected end of flow-mode (indicates an error)\r\n * - `\\x1f` (Unit Separator): Next token is a scalar value\r\n * - `\\u{FEFF}` (Byte order mark): Emitted separately outside documents\r\n */\r\nclass Lexer {\r\n    constructor() {\r\n        /**\r\n         * Flag indicating whether the end of the current buffer marks the end of\r\n         * all input\r\n         */\r\n        this.atEnd = false;\r\n        /**\r\n         * Explicit indent set in block scalar header, as an offset from the current\r\n         * minimum indent, so e.g. set to 1 from a header `|2+`. Set to -1 if not\r\n         * explicitly set.\r\n         */\r\n        this.blockScalarIndent = -1;\r\n        /**\r\n         * Block scalars that include a + (keep) chomping indicator in their header\r\n         * include trailing empty lines, which are otherwise excluded from the\r\n         * scalar's contents.\r\n         */\r\n        this.blockScalarKeep = false;\r\n        /** Current input */\r\n        this.buffer = '';\r\n        /**\r\n         * Flag noting whether the map value indicator : can immediately follow this\r\n         * node within a flow context.\r\n         */\r\n        this.flowKey = false;\r\n        /** Count of surrounding flow collection levels. */\r\n        this.flowLevel = 0;\r\n        /**\r\n         * Minimum level of indentation required for next lines to be parsed as a\r\n         * part of the current scalar value.\r\n         */\r\n        this.indentNext = 0;\r\n        /** Indentation level of the current line. */\r\n        this.indentValue = 0;\r\n        /** Position of the next \\n character. */\r\n        this.lineEndPos = null;\r\n        /** Stores the state of the lexer if reaching the end of incpomplete input */\r\n        this.next = null;\r\n        /** A pointer to `buffer`; the current position of the lexer. */\r\n        this.pos = 0;\r\n    }\r\n    /**\r\n     * Generate YAML tokens from the `source` string. If `incomplete`,\r\n     * a part of the last line may be left as a buffer for the next call.\r\n     *\r\n     * @returns A generator of lexical tokens\r\n     */\r\n    *lex(source, incomplete = false) {\r\n        if (source) {\r\n            if (typeof source !== 'string')\r\n                throw TypeError('source is not a string');\r\n            this.buffer = this.buffer ? this.buffer + source : source;\r\n            this.lineEndPos = null;\r\n        }\r\n        this.atEnd = !incomplete;\r\n        let next = this.next ?? 'stream';\r\n        while (next && (incomplete || this.hasChars(1)))\r\n            next = yield* this.parseNext(next);\r\n    }\r\n    atLineEnd() {\r\n        let i = this.pos;\r\n        let ch = this.buffer[i];\r\n        while (ch === ' ' || ch === '\\t')\r\n            ch = this.buffer[++i];\r\n        if (!ch || ch === '#' || ch === '\\n')\r\n            return true;\r\n        if (ch === '\\r')\r\n            return this.buffer[i + 1] === '\\n';\r\n        return false;\r\n    }\r\n    charAt(n) {\r\n        return this.buffer[this.pos + n];\r\n    }\r\n    continueScalar(offset) {\r\n        let ch = this.buffer[offset];\r\n        if (this.indentNext > 0) {\r\n            let indent = 0;\r\n            while (ch === ' ')\r\n                ch = this.buffer[++indent + offset];\r\n            if (ch === '\\r') {\r\n                const next = this.buffer[indent + offset + 1];\r\n                if (next === '\\n' || (!next && !this.atEnd))\r\n                    return offset + indent + 1;\r\n            }\r\n            return ch === '\\n' || indent >= this.indentNext || (!ch && !this.atEnd)\r\n                ? offset + indent\r\n                : -1;\r\n        }\r\n        if (ch === '-' || ch === '.') {\r\n            const dt = this.buffer.substr(offset, 3);\r\n            if ((dt === '---' || dt === '...') && isEmpty(this.buffer[offset + 3]))\r\n                return -1;\r\n        }\r\n        return offset;\r\n    }\r\n    getLine() {\r\n        let end = this.lineEndPos;\r\n        if (typeof end !== 'number' || (end !== -1 && end < this.pos)) {\r\n            end = this.buffer.indexOf('\\n', this.pos);\r\n            this.lineEndPos = end;\r\n        }\r\n        if (end === -1)\r\n            return this.atEnd ? this.buffer.substring(this.pos) : null;\r\n        if (this.buffer[end - 1] === '\\r')\r\n            end -= 1;\r\n        return this.buffer.substring(this.pos, end);\r\n    }\r\n    hasChars(n) {\r\n        return this.pos + n <= this.buffer.length;\r\n    }\r\n    setNext(state) {\r\n        this.buffer = this.buffer.substring(this.pos);\r\n        this.pos = 0;\r\n        this.lineEndPos = null;\r\n        this.next = state;\r\n        return null;\r\n    }\r\n    peek(n) {\r\n        return this.buffer.substr(this.pos, n);\r\n    }\r\n    *parseNext(next) {\r\n        switch (next) {\r\n            case 'stream':\r\n                return yield* this.parseStream();\r\n            case 'line-start':\r\n                return yield* this.parseLineStart();\r\n            case 'block-start':\r\n                return yield* this.parseBlockStart();\r\n            case 'doc':\r\n                return yield* this.parseDocument();\r\n            case 'flow':\r\n                return yield* this.parseFlowCollection();\r\n            case 'quoted-scalar':\r\n                return yield* this.parseQuotedScalar();\r\n            case 'block-scalar':\r\n                return yield* this.parseBlockScalar();\r\n            case 'plain-scalar':\r\n                return yield* this.parsePlainScalar();\r\n        }\r\n    }\r\n    *parseStream() {\r\n        let line = this.getLine();\r\n        if (line === null)\r\n            return this.setNext('stream');\r\n        if (line[0] === BOM) {\r\n            yield* this.pushCount(1);\r\n            line = line.substring(1);\r\n        }\r\n        if (line[0] === '%') {\r\n            let dirEnd = line.length;\r\n            let cs = line.indexOf('#');\r\n            while (cs !== -1) {\r\n                const ch = line[cs - 1];\r\n                if (ch === ' ' || ch === '\\t') {\r\n                    dirEnd = cs - 1;\r\n                    break;\r\n                }\r\n                else {\r\n                    cs = line.indexOf('#', cs + 1);\r\n                }\r\n            }\r\n            while (true) {\r\n                const ch = line[dirEnd - 1];\r\n                if (ch === ' ' || ch === '\\t')\r\n                    dirEnd -= 1;\r\n                else\r\n                    break;\r\n            }\r\n            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));\r\n            yield* this.pushCount(line.length - n); // possible comment\r\n            this.pushNewline();\r\n            return 'stream';\r\n        }\r\n        if (this.atLineEnd()) {\r\n            const sp = yield* this.pushSpaces(true);\r\n            yield* this.pushCount(line.length - sp);\r\n            yield* this.pushNewline();\r\n            return 'stream';\r\n        }\r\n        yield DOCUMENT;\r\n        return yield* this.parseLineStart();\r\n    }\r\n    *parseLineStart() {\r\n        const ch = this.charAt(0);\r\n        if (!ch && !this.atEnd)\r\n            return this.setNext('line-start');\r\n        if (ch === '-' || ch === '.') {\r\n            if (!this.atEnd && !this.hasChars(4))\r\n                return this.setNext('line-start');\r\n            const s = this.peek(3);\r\n            if ((s === '---' || s === '...') && isEmpty(this.charAt(3))) {\r\n                yield* this.pushCount(3);\r\n                this.indentValue = 0;\r\n                this.indentNext = 0;\r\n                return s === '---' ? 'doc' : 'stream';\r\n            }\r\n        }\r\n        this.indentValue = yield* this.pushSpaces(false);\r\n        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))\r\n            this.indentNext = this.indentValue;\r\n        return yield* this.parseBlockStart();\r\n    }\r\n    *parseBlockStart() {\r\n        const [ch0, ch1] = this.peek(2);\r\n        if (!ch1 && !this.atEnd)\r\n            return this.setNext('block-start');\r\n        if ((ch0 === '-' || ch0 === '?' || ch0 === ':') && isEmpty(ch1)) {\r\n            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));\r\n            this.indentNext = this.indentValue + 1;\r\n            this.indentValue += n;\r\n            return yield* this.parseBlockStart();\r\n        }\r\n        return 'doc';\r\n    }\r\n    *parseDocument() {\r\n        yield* this.pushSpaces(true);\r\n        const line = this.getLine();\r\n        if (line === null)\r\n            return this.setNext('doc');\r\n        let n = yield* this.pushIndicators();\r\n        switch (line[n]) {\r\n            case '#':\r\n                yield* this.pushCount(line.length - n);\r\n            // fallthrough\r\n            case undefined:\r\n                yield* this.pushNewline();\r\n                return yield* this.parseLineStart();\r\n            case '{':\r\n            case '[':\r\n                yield* this.pushCount(1);\r\n                this.flowKey = false;\r\n                this.flowLevel = 1;\r\n                return 'flow';\r\n            case '}':\r\n            case ']':\r\n                // this is an error\r\n                yield* this.pushCount(1);\r\n                return 'doc';\r\n            case '*':\r\n                yield* this.pushUntil(isNotAnchorChar);\r\n                return 'doc';\r\n            case '\"':\r\n            case \"'\":\r\n                return yield* this.parseQuotedScalar();\r\n            case '|':\r\n            case '>':\r\n                n += yield* this.parseBlockScalarHeader();\r\n                n += yield* this.pushSpaces(true);\r\n                yield* this.pushCount(line.length - n);\r\n                yield* this.pushNewline();\r\n                return yield* this.parseBlockScalar();\r\n            default:\r\n                return yield* this.parsePlainScalar();\r\n        }\r\n    }\r\n    *parseFlowCollection() {\r\n        let nl, sp;\r\n        let indent = -1;\r\n        do {\r\n            nl = yield* this.pushNewline();\r\n            if (nl > 0) {\r\n                sp = yield* this.pushSpaces(false);\r\n                this.indentValue = indent = sp;\r\n            }\r\n            else {\r\n                sp = 0;\r\n            }\r\n            sp += yield* this.pushSpaces(true);\r\n        } while (nl + sp > 0);\r\n        const line = this.getLine();\r\n        if (line === null)\r\n            return this.setNext('flow');\r\n        if ((indent !== -1 && indent < this.indentNext && line[0] !== '#') ||\r\n            (indent === 0 &&\r\n                (line.startsWith('---') || line.startsWith('...')) &&\r\n                isEmpty(line[3]))) {\r\n            // Allowing for the terminal ] or } at the same (rather than greater)\r\n            // indent level as the initial [ or { is technically invalid, but\r\n            // failing here would be surprising to users.\r\n            const atFlowEndMarker = indent === this.indentNext - 1 &&\r\n                this.flowLevel === 1 &&\r\n                (line[0] === ']' || line[0] === '}');\r\n            if (!atFlowEndMarker) {\r\n                // this is an error\r\n                this.flowLevel = 0;\r\n                yield FLOW_END;\r\n                return yield* this.parseLineStart();\r\n            }\r\n        }\r\n        let n = 0;\r\n        while (line[n] === ',') {\r\n            n += yield* this.pushCount(1);\r\n            n += yield* this.pushSpaces(true);\r\n            this.flowKey = false;\r\n        }\r\n        n += yield* this.pushIndicators();\r\n        switch (line[n]) {\r\n            case undefined:\r\n                return 'flow';\r\n            case '#':\r\n                yield* this.pushCount(line.length - n);\r\n                return 'flow';\r\n            case '{':\r\n            case '[':\r\n                yield* this.pushCount(1);\r\n                this.flowKey = false;\r\n                this.flowLevel += 1;\r\n                return 'flow';\r\n            case '}':\r\n            case ']':\r\n                yield* this.pushCount(1);\r\n                this.flowKey = true;\r\n                this.flowLevel -= 1;\r\n                return this.flowLevel ? 'flow' : 'doc';\r\n            case '*':\r\n                yield* this.pushUntil(isNotAnchorChar);\r\n                return 'flow';\r\n            case '\"':\r\n            case \"'\":\r\n                this.flowKey = true;\r\n                return yield* this.parseQuotedScalar();\r\n            case ':': {\r\n                const next = this.charAt(1);\r\n                if (this.flowKey || isEmpty(next) || next === ',') {\r\n                    this.flowKey = false;\r\n                    yield* this.pushCount(1);\r\n                    yield* this.pushSpaces(true);\r\n                    return 'flow';\r\n                }\r\n            }\r\n            // fallthrough\r\n            default:\r\n                this.flowKey = false;\r\n                return yield* this.parsePlainScalar();\r\n        }\r\n    }\r\n    *parseQuotedScalar() {\r\n        const quote = this.charAt(0);\r\n        let end = this.buffer.indexOf(quote, this.pos + 1);\r\n        if (quote === \"'\") {\r\n            while (end !== -1 && this.buffer[end + 1] === \"'\")\r\n                end = this.buffer.indexOf(\"'\", end + 2);\r\n        }\r\n        else {\r\n            // double-quote\r\n            while (end !== -1) {\r\n                let n = 0;\r\n                while (this.buffer[end - 1 - n] === '\\\\')\r\n                    n += 1;\r\n                if (n % 2 === 0)\r\n                    break;\r\n                end = this.buffer.indexOf('\"', end + 1);\r\n            }\r\n        }\r\n        // Only looking for newlines within the quotes\r\n        const qb = this.buffer.substring(0, end);\r\n        let nl = qb.indexOf('\\n', this.pos);\r\n        if (nl !== -1) {\r\n            while (nl !== -1) {\r\n                const cs = this.continueScalar(nl + 1);\r\n                if (cs === -1)\r\n                    break;\r\n                nl = qb.indexOf('\\n', cs);\r\n            }\r\n            if (nl !== -1) {\r\n                // this is an error caused by an unexpected unindent\r\n                end = nl - (qb[nl - 1] === '\\r' ? 2 : 1);\r\n            }\r\n        }\r\n        if (end === -1) {\r\n            if (!this.atEnd)\r\n                return this.setNext('quoted-scalar');\r\n            end = this.buffer.length;\r\n        }\r\n        yield* this.pushToIndex(end + 1, false);\r\n        return this.flowLevel ? 'flow' : 'doc';\r\n    }\r\n    *parseBlockScalarHeader() {\r\n        this.blockScalarIndent = -1;\r\n        this.blockScalarKeep = false;\r\n        let i = this.pos;\r\n        while (true) {\r\n            const ch = this.buffer[++i];\r\n            if (ch === '+')\r\n                this.blockScalarKeep = true;\r\n            else if (ch > '0' && ch <= '9')\r\n                this.blockScalarIndent = Number(ch) - 1;\r\n            else if (ch !== '-')\r\n                break;\r\n        }\r\n        return yield* this.pushUntil(ch => isEmpty(ch) || ch === '#');\r\n    }\r\n    *parseBlockScalar() {\r\n        let nl = this.pos - 1; // may be -1 if this.pos === 0\r\n        let indent = 0;\r\n        let ch;\r\n        loop: for (let i = this.pos; (ch = this.buffer[i]); ++i) {\r\n            switch (ch) {\r\n                case ' ':\r\n                    indent += 1;\r\n                    break;\r\n                case '\\n':\r\n                    nl = i;\r\n                    indent = 0;\r\n                    break;\r\n                case '\\r': {\r\n                    const next = this.buffer[i + 1];\r\n                    if (!next && !this.atEnd)\r\n                        return this.setNext('block-scalar');\r\n                    if (next === '\\n')\r\n                        break;\r\n                } // fallthrough\r\n                default:\r\n                    break loop;\r\n            }\r\n        }\r\n        if (!ch && !this.atEnd)\r\n            return this.setNext('block-scalar');\r\n        if (indent >= this.indentNext) {\r\n            if (this.blockScalarIndent === -1)\r\n                this.indentNext = indent;\r\n            else {\r\n                this.indentNext =\r\n                    this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);\r\n            }\r\n            do {\r\n                const cs = this.continueScalar(nl + 1);\r\n                if (cs === -1)\r\n                    break;\r\n                nl = this.buffer.indexOf('\\n', cs);\r\n            } while (nl !== -1);\r\n            if (nl === -1) {\r\n                if (!this.atEnd)\r\n                    return this.setNext('block-scalar');\r\n                nl = this.buffer.length;\r\n            }\r\n        }\r\n        // Trailing insufficiently indented tabs are invalid.\r\n        // To catch that during parsing, we include them in the block scalar value.\r\n        let i = nl + 1;\r\n        ch = this.buffer[i];\r\n        while (ch === ' ')\r\n            ch = this.buffer[++i];\r\n        if (ch === '\\t') {\r\n            while (ch === '\\t' || ch === ' ' || ch === '\\r' || ch === '\\n')\r\n                ch = this.buffer[++i];\r\n            nl = i - 1;\r\n        }\r\n        else if (!this.blockScalarKeep) {\r\n            do {\r\n                let i = nl - 1;\r\n                let ch = this.buffer[i];\r\n                if (ch === '\\r')\r\n                    ch = this.buffer[--i];\r\n                const lastChar = i; // Drop the line if last char not more indented\r\n                while (ch === ' ')\r\n                    ch = this.buffer[--i];\r\n                if (ch === '\\n' && i >= this.pos && i + 1 + indent > lastChar)\r\n                    nl = i;\r\n                else\r\n                    break;\r\n            } while (true);\r\n        }\r\n        yield SCALAR;\r\n        yield* this.pushToIndex(nl + 1, true);\r\n        return yield* this.parseLineStart();\r\n    }\r\n    *parsePlainScalar() {\r\n        const inFlow = this.flowLevel > 0;\r\n        let end = this.pos - 1;\r\n        let i = this.pos - 1;\r\n        let ch;\r\n        while ((ch = this.buffer[++i])) {\r\n            if (ch === ':') {\r\n                const next = this.buffer[i + 1];\r\n                if (isEmpty(next) || (inFlow && flowIndicatorChars.has(next)))\r\n                    break;\r\n                end = i;\r\n            }\r\n            else if (isEmpty(ch)) {\r\n                let next = this.buffer[i + 1];\r\n                if (ch === '\\r') {\r\n                    if (next === '\\n') {\r\n                        i += 1;\r\n                        ch = '\\n';\r\n                        next = this.buffer[i + 1];\r\n                    }\r\n                    else\r\n                        end = i;\r\n                }\r\n                if (next === '#' || (inFlow && flowIndicatorChars.has(next)))\r\n                    break;\r\n                if (ch === '\\n') {\r\n                    const cs = this.continueScalar(i + 1);\r\n                    if (cs === -1)\r\n                        break;\r\n                    i = Math.max(i, cs - 2); // to advance, but still account for ' #'\r\n                }\r\n            }\r\n            else {\r\n                if (inFlow && flowIndicatorChars.has(ch))\r\n                    break;\r\n                end = i;\r\n            }\r\n        }\r\n        if (!ch && !this.atEnd)\r\n            return this.setNext('plain-scalar');\r\n        yield SCALAR;\r\n        yield* this.pushToIndex(end + 1, true);\r\n        return inFlow ? 'flow' : 'doc';\r\n    }\r\n    *pushCount(n) {\r\n        if (n > 0) {\r\n            yield this.buffer.substr(this.pos, n);\r\n            this.pos += n;\r\n            return n;\r\n        }\r\n        return 0;\r\n    }\r\n    *pushToIndex(i, allowEmpty) {\r\n        const s = this.buffer.slice(this.pos, i);\r\n        if (s) {\r\n            yield s;\r\n            this.pos += s.length;\r\n            return s.length;\r\n        }\r\n        else if (allowEmpty)\r\n            yield '';\r\n        return 0;\r\n    }\r\n    *pushIndicators() {\r\n        switch (this.charAt(0)) {\r\n            case '!':\r\n                return ((yield* this.pushTag()) +\r\n                    (yield* this.pushSpaces(true)) +\r\n                    (yield* this.pushIndicators()));\r\n            case '&':\r\n                return ((yield* this.pushUntil(isNotAnchorChar)) +\r\n                    (yield* this.pushSpaces(true)) +\r\n                    (yield* this.pushIndicators()));\r\n            case '-': // this is an error\r\n            case '?': // this is an error outside flow collections\r\n            case ':': {\r\n                const inFlow = this.flowLevel > 0;\r\n                const ch1 = this.charAt(1);\r\n                if (isEmpty(ch1) || (inFlow && flowIndicatorChars.has(ch1))) {\r\n                    if (!inFlow)\r\n                        this.indentNext = this.indentValue + 1;\r\n                    else if (this.flowKey)\r\n                        this.flowKey = false;\r\n                    return ((yield* this.pushCount(1)) +\r\n                        (yield* this.pushSpaces(true)) +\r\n                        (yield* this.pushIndicators()));\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    *pushTag() {\r\n        if (this.charAt(1) === '<') {\r\n            let i = this.pos + 2;\r\n            let ch = this.buffer[i];\r\n            while (!isEmpty(ch) && ch !== '>')\r\n                ch = this.buffer[++i];\r\n            return yield* this.pushToIndex(ch === '>' ? i + 1 : i, false);\r\n        }\r\n        else {\r\n            let i = this.pos + 1;\r\n            let ch = this.buffer[i];\r\n            while (ch) {\r\n                if (tagChars.has(ch))\r\n                    ch = this.buffer[++i];\r\n                else if (ch === '%' &&\r\n                    hexDigits.has(this.buffer[i + 1]) &&\r\n                    hexDigits.has(this.buffer[i + 2])) {\r\n                    ch = this.buffer[(i += 3)];\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n            return yield* this.pushToIndex(i, false);\r\n        }\r\n    }\r\n    *pushNewline() {\r\n        const ch = this.buffer[this.pos];\r\n        if (ch === '\\n')\r\n            return yield* this.pushCount(1);\r\n        else if (ch === '\\r' && this.charAt(1) === '\\n')\r\n            return yield* this.pushCount(2);\r\n        else\r\n            return 0;\r\n    }\r\n    *pushSpaces(allowTabs) {\r\n        let i = this.pos - 1;\r\n        let ch;\r\n        do {\r\n            ch = this.buffer[++i];\r\n        } while (ch === ' ' || (allowTabs && ch === '\\t'));\r\n        const n = i - this.pos;\r\n        if (n > 0) {\r\n            yield this.buffer.substr(this.pos, n);\r\n            this.pos = i;\r\n        }\r\n        return n;\r\n    }\r\n    *pushUntil(test) {\r\n        let i = this.pos;\r\n        let ch = this.buffer[i];\r\n        while (!test(ch))\r\n            ch = this.buffer[++i];\r\n        return yield* this.pushToIndex(i, false);\r\n    }\r\n}\r\n\r\nexport { Lexer };\r\n", "/**\r\n * Tracks newlines during parsing in order to provide an efficient API for\r\n * determining the one-indexed `{ line, col }` position for any offset\r\n * within the input.\r\n */\r\nclass LineCounter {\r\n    constructor() {\r\n        this.lineStarts = [];\r\n        /**\r\n         * Should be called in ascending order. Otherwise, call\r\n         * `lineCounter.lineStarts.sort()` before calling `linePos()`.\r\n         */\r\n        this.addNewLine = (offset) => this.lineStarts.push(offset);\r\n        /**\r\n         * Performs a binary search and returns the 1-indexed { line, col }\r\n         * position of `offset`. If `line === 0`, `addNewLine` has never been\r\n         * called or `offset` is before the first known newline.\r\n         */\r\n        this.linePos = (offset) => {\r\n            let low = 0;\r\n            let high = this.lineStarts.length;\r\n            while (low < high) {\r\n                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)\r\n                if (this.lineStarts[mid] < offset)\r\n                    low = mid + 1;\r\n                else\r\n                    high = mid;\r\n            }\r\n            if (this.lineStarts[low] === offset)\r\n                return { line: low + 1, col: 1 };\r\n            if (low === 0)\r\n                return { line: 0, col: offset };\r\n            const start = this.lineStarts[low - 1];\r\n            return { line: low, col: offset - start + 1 };\r\n        };\r\n    }\r\n}\r\n\r\nexport { LineCounter };\r\n", "import { tokenType } from './cst.js';\r\nimport { Lexer } from './lexer.js';\r\n\r\nfunction includesToken(list, type) {\r\n    for (let i = 0; i < list.length; ++i)\r\n        if (list[i].type === type)\r\n            return true;\r\n    return false;\r\n}\r\nfunction findNonEmptyIndex(list) {\r\n    for (let i = 0; i < list.length; ++i) {\r\n        switch (list[i].type) {\r\n            case 'space':\r\n            case 'comment':\r\n            case 'newline':\r\n                break;\r\n            default:\r\n                return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nfunction isFlowToken(token) {\r\n    switch (token?.type) {\r\n        case 'alias':\r\n        case 'scalar':\r\n        case 'single-quoted-scalar':\r\n        case 'double-quoted-scalar':\r\n        case 'flow-collection':\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nfunction getPrevProps(parent) {\r\n    switch (parent.type) {\r\n        case 'document':\r\n            return parent.start;\r\n        case 'block-map': {\r\n            const it = parent.items[parent.items.length - 1];\r\n            return it.sep ?? it.start;\r\n        }\r\n        case 'block-seq':\r\n            return parent.items[parent.items.length - 1].start;\r\n        /* istanbul ignore next should not happen */\r\n        default:\r\n            return [];\r\n    }\r\n}\r\n/** Note: May modify input array */\r\nfunction getFirstKeyStartProps(prev) {\r\n    if (prev.length === 0)\r\n        return [];\r\n    let i = prev.length;\r\n    loop: while (--i >= 0) {\r\n        switch (prev[i].type) {\r\n            case 'doc-start':\r\n            case 'explicit-key-ind':\r\n            case 'map-value-ind':\r\n            case 'seq-item-ind':\r\n            case 'newline':\r\n                break loop;\r\n        }\r\n    }\r\n    while (prev[++i]?.type === 'space') {\r\n        /* loop */\r\n    }\r\n    return prev.splice(i, prev.length);\r\n}\r\nfunction fixFlowSeqItems(fc) {\r\n    if (fc.start.type === 'flow-seq-start') {\r\n        for (const it of fc.items) {\r\n            if (it.sep &&\r\n                !it.value &&\r\n                !includesToken(it.start, 'explicit-key-ind') &&\r\n                !includesToken(it.sep, 'map-value-ind')) {\r\n                if (it.key)\r\n                    it.value = it.key;\r\n                delete it.key;\r\n                if (isFlowToken(it.value)) {\r\n                    if (it.value.end)\r\n                        Array.prototype.push.apply(it.value.end, it.sep);\r\n                    else\r\n                        it.value.end = it.sep;\r\n                }\r\n                else\r\n                    Array.prototype.push.apply(it.start, it.sep);\r\n                delete it.sep;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * A YAML concrete syntax tree (CST) parser\r\n *\r\n * ```ts\r\n * const src: string = ...\r\n * for (const token of new Parser().parse(src)) {\r\n *   // token: Token\r\n * }\r\n * ```\r\n *\r\n * To use the parser with a user-provided lexer:\r\n *\r\n * ```ts\r\n * function* parse(source: string, lexer: Lexer) {\r\n *   const parser = new Parser()\r\n *   for (const lexeme of lexer.lex(source))\r\n *     yield* parser.next(lexeme)\r\n *   yield* parser.end()\r\n * }\r\n *\r\n * const src: string = ...\r\n * const lexer = new Lexer()\r\n * for (const token of parse(src, lexer)) {\r\n *   // token: Token\r\n * }\r\n * ```\r\n */\r\nclass Parser {\r\n    /**\r\n     * @param onNewLine - If defined, called separately with the start position of\r\n     *   each new line (in `parse()`, including the start of input).\r\n     */\r\n    constructor(onNewLine) {\r\n        /** If true, space and sequence indicators count as indentation */\r\n        this.atNewLine = true;\r\n        /** If true, next token is a scalar value */\r\n        this.atScalar = false;\r\n        /** Current indentation level */\r\n        this.indent = 0;\r\n        /** Current offset since the start of parsing */\r\n        this.offset = 0;\r\n        /** On the same line with a block map key */\r\n        this.onKeyLine = false;\r\n        /** Top indicates the node that's currently being built */\r\n        this.stack = [];\r\n        /** The source of the current token, set in parse() */\r\n        this.source = '';\r\n        /** The type of the current token, set in parse() */\r\n        this.type = '';\r\n        // Must be defined after `next()`\r\n        this.lexer = new Lexer();\r\n        this.onNewLine = onNewLine;\r\n    }\r\n    /**\r\n     * Parse `source` as a YAML stream.\r\n     * If `incomplete`, a part of the last line may be left as a buffer for the next call.\r\n     *\r\n     * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.\r\n     *\r\n     * @returns A generator of tokens representing each directive, document, and other structure.\r\n     */\r\n    *parse(source, incomplete = false) {\r\n        if (this.onNewLine && this.offset === 0)\r\n            this.onNewLine(0);\r\n        for (const lexeme of this.lexer.lex(source, incomplete))\r\n            yield* this.next(lexeme);\r\n        if (!incomplete)\r\n            yield* this.end();\r\n    }\r\n    /**\r\n     * Advance the parser by the `source` of one lexical token.\r\n     */\r\n    *next(source) {\r\n        this.source = source;\r\n        if (this.atScalar) {\r\n            this.atScalar = false;\r\n            yield* this.step();\r\n            this.offset += source.length;\r\n            return;\r\n        }\r\n        const type = tokenType(source);\r\n        if (!type) {\r\n            const message = `Not a YAML token: ${source}`;\r\n            yield* this.pop({ type: 'error', offset: this.offset, message, source });\r\n            this.offset += source.length;\r\n        }\r\n        else if (type === 'scalar') {\r\n            this.atNewLine = false;\r\n            this.atScalar = true;\r\n            this.type = 'scalar';\r\n        }\r\n        else {\r\n            this.type = type;\r\n            yield* this.step();\r\n            switch (type) {\r\n                case 'newline':\r\n                    this.atNewLine = true;\r\n                    this.indent = 0;\r\n                    if (this.onNewLine)\r\n                        this.onNewLine(this.offset + source.length);\r\n                    break;\r\n                case 'space':\r\n                    if (this.atNewLine && source[0] === ' ')\r\n                        this.indent += source.length;\r\n                    break;\r\n                case 'explicit-key-ind':\r\n                case 'map-value-ind':\r\n                case 'seq-item-ind':\r\n                    if (this.atNewLine)\r\n                        this.indent += source.length;\r\n                    break;\r\n                case 'doc-mode':\r\n                case 'flow-error-end':\r\n                    return;\r\n                default:\r\n                    this.atNewLine = false;\r\n            }\r\n            this.offset += source.length;\r\n        }\r\n    }\r\n    /** Call at end of input to push out any remaining constructions */\r\n    *end() {\r\n        while (this.stack.length > 0)\r\n            yield* this.pop();\r\n    }\r\n    get sourceToken() {\r\n        const st = {\r\n            type: this.type,\r\n            offset: this.offset,\r\n            indent: this.indent,\r\n            source: this.source\r\n        };\r\n        return st;\r\n    }\r\n    *step() {\r\n        const top = this.peek(1);\r\n        if (this.type === 'doc-end' && (!top || top.type !== 'doc-end')) {\r\n            while (this.stack.length > 0)\r\n                yield* this.pop();\r\n            this.stack.push({\r\n                type: 'doc-end',\r\n                offset: this.offset,\r\n                source: this.source\r\n            });\r\n            return;\r\n        }\r\n        if (!top)\r\n            return yield* this.stream();\r\n        switch (top.type) {\r\n            case 'document':\r\n                return yield* this.document(top);\r\n            case 'alias':\r\n            case 'scalar':\r\n            case 'single-quoted-scalar':\r\n            case 'double-quoted-scalar':\r\n                return yield* this.scalar(top);\r\n            case 'block-scalar':\r\n                return yield* this.blockScalar(top);\r\n            case 'block-map':\r\n                return yield* this.blockMap(top);\r\n            case 'block-seq':\r\n                return yield* this.blockSequence(top);\r\n            case 'flow-collection':\r\n                return yield* this.flowCollection(top);\r\n            case 'doc-end':\r\n                return yield* this.documentEnd(top);\r\n        }\r\n        /* istanbul ignore next should not happen */\r\n        yield* this.pop();\r\n    }\r\n    peek(n) {\r\n        return this.stack[this.stack.length - n];\r\n    }\r\n    *pop(error) {\r\n        const token = error ?? this.stack.pop();\r\n        /* istanbul ignore if should not happen */\r\n        if (!token) {\r\n            const message = 'Tried to pop an empty stack';\r\n            yield { type: 'error', offset: this.offset, source: '', message };\r\n        }\r\n        else if (this.stack.length === 0) {\r\n            yield token;\r\n        }\r\n        else {\r\n            const top = this.peek(1);\r\n            if (token.type === 'block-scalar') {\r\n                // Block scalars use their parent rather than header indent\r\n                token.indent = 'indent' in top ? top.indent : 0;\r\n            }\r\n            else if (token.type === 'flow-collection' && top.type === 'document') {\r\n                // Ignore all indent for top-level flow collections\r\n                token.indent = 0;\r\n            }\r\n            if (token.type === 'flow-collection')\r\n                fixFlowSeqItems(token);\r\n            switch (top.type) {\r\n                case 'document':\r\n                    top.value = token;\r\n                    break;\r\n                case 'block-scalar':\r\n                    top.props.push(token); // error\r\n                    break;\r\n                case 'block-map': {\r\n                    const it = top.items[top.items.length - 1];\r\n                    if (it.value) {\r\n                        top.items.push({ start: [], key: token, sep: [] });\r\n                        this.onKeyLine = true;\r\n                        return;\r\n                    }\r\n                    else if (it.sep) {\r\n                        it.value = token;\r\n                    }\r\n                    else {\r\n                        Object.assign(it, { key: token, sep: [] });\r\n                        this.onKeyLine = !it.explicitKey;\r\n                        return;\r\n                    }\r\n                    break;\r\n                }\r\n                case 'block-seq': {\r\n                    const it = top.items[top.items.length - 1];\r\n                    if (it.value)\r\n                        top.items.push({ start: [], value: token });\r\n                    else\r\n                        it.value = token;\r\n                    break;\r\n                }\r\n                case 'flow-collection': {\r\n                    const it = top.items[top.items.length - 1];\r\n                    if (!it || it.value)\r\n                        top.items.push({ start: [], key: token, sep: [] });\r\n                    else if (it.sep)\r\n                        it.value = token;\r\n                    else\r\n                        Object.assign(it, { key: token, sep: [] });\r\n                    return;\r\n                }\r\n                /* istanbul ignore next should not happen */\r\n                default:\r\n                    yield* this.pop();\r\n                    yield* this.pop(token);\r\n            }\r\n            if ((top.type === 'document' ||\r\n                top.type === 'block-map' ||\r\n                top.type === 'block-seq') &&\r\n                (token.type === 'block-map' || token.type === 'block-seq')) {\r\n                const last = token.items[token.items.length - 1];\r\n                if (last &&\r\n                    !last.sep &&\r\n                    !last.value &&\r\n                    last.start.length > 0 &&\r\n                    findNonEmptyIndex(last.start) === -1 &&\r\n                    (token.indent === 0 ||\r\n                        last.start.every(st => st.type !== 'comment' || st.indent < token.indent))) {\r\n                    if (top.type === 'document')\r\n                        top.end = last.start;\r\n                    else\r\n                        top.items.push({ start: last.start });\r\n                    token.items.splice(-1, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    *stream() {\r\n        switch (this.type) {\r\n            case 'directive-line':\r\n                yield { type: 'directive', offset: this.offset, source: this.source };\r\n                return;\r\n            case 'byte-order-mark':\r\n            case 'space':\r\n            case 'comment':\r\n            case 'newline':\r\n                yield this.sourceToken;\r\n                return;\r\n            case 'doc-mode':\r\n            case 'doc-start': {\r\n                const doc = {\r\n                    type: 'document',\r\n                    offset: this.offset,\r\n                    start: []\r\n                };\r\n                if (this.type === 'doc-start')\r\n                    doc.start.push(this.sourceToken);\r\n                this.stack.push(doc);\r\n                return;\r\n            }\r\n        }\r\n        yield {\r\n            type: 'error',\r\n            offset: this.offset,\r\n            message: `Unexpected ${this.type} token in YAML stream`,\r\n            source: this.source\r\n        };\r\n    }\r\n    *document(doc) {\r\n        if (doc.value)\r\n            return yield* this.lineEnd(doc);\r\n        switch (this.type) {\r\n            case 'doc-start': {\r\n                if (findNonEmptyIndex(doc.start) !== -1) {\r\n                    yield* this.pop();\r\n                    yield* this.step();\r\n                }\r\n                else\r\n                    doc.start.push(this.sourceToken);\r\n                return;\r\n            }\r\n            case 'anchor':\r\n            case 'tag':\r\n            case 'space':\r\n            case 'comment':\r\n            case 'newline':\r\n                doc.start.push(this.sourceToken);\r\n                return;\r\n        }\r\n        const bv = this.startBlockValue(doc);\r\n        if (bv)\r\n            this.stack.push(bv);\r\n        else {\r\n            yield {\r\n                type: 'error',\r\n                offset: this.offset,\r\n                message: `Unexpected ${this.type} token in YAML document`,\r\n                source: this.source\r\n            };\r\n        }\r\n    }\r\n    *scalar(scalar) {\r\n        if (this.type === 'map-value-ind') {\r\n            const prev = getPrevProps(this.peek(2));\r\n            const start = getFirstKeyStartProps(prev);\r\n            let sep;\r\n            if (scalar.end) {\r\n                sep = scalar.end;\r\n                sep.push(this.sourceToken);\r\n                delete scalar.end;\r\n            }\r\n            else\r\n                sep = [this.sourceToken];\r\n            const map = {\r\n                type: 'block-map',\r\n                offset: scalar.offset,\r\n                indent: scalar.indent,\r\n                items: [{ start, key: scalar, sep }]\r\n            };\r\n            this.onKeyLine = true;\r\n            this.stack[this.stack.length - 1] = map;\r\n        }\r\n        else\r\n            yield* this.lineEnd(scalar);\r\n    }\r\n    *blockScalar(scalar) {\r\n        switch (this.type) {\r\n            case 'space':\r\n            case 'comment':\r\n            case 'newline':\r\n                scalar.props.push(this.sourceToken);\r\n                return;\r\n            case 'scalar':\r\n                scalar.source = this.source;\r\n                // block-scalar source includes trailing newline\r\n                this.atNewLine = true;\r\n                this.indent = 0;\r\n                if (this.onNewLine) {\r\n                    let nl = this.source.indexOf('\\n') + 1;\r\n                    while (nl !== 0) {\r\n                        this.onNewLine(this.offset + nl);\r\n                        nl = this.source.indexOf('\\n', nl) + 1;\r\n                    }\r\n                }\r\n                yield* this.pop();\r\n                break;\r\n            /* istanbul ignore next should not happen */\r\n            default:\r\n                yield* this.pop();\r\n                yield* this.step();\r\n        }\r\n    }\r\n    *blockMap(map) {\r\n        const it = map.items[map.items.length - 1];\r\n        // it.sep is true-ish if pair already has key or : separator\r\n        switch (this.type) {\r\n            case 'newline':\r\n                this.onKeyLine = false;\r\n                if (it.value) {\r\n                    const end = 'end' in it.value ? it.value.end : undefined;\r\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\r\n                    if (last?.type === 'comment')\r\n                        end?.push(this.sourceToken);\r\n                    else\r\n                        map.items.push({ start: [this.sourceToken] });\r\n                }\r\n                else if (it.sep) {\r\n                    it.sep.push(this.sourceToken);\r\n                }\r\n                else {\r\n                    it.start.push(this.sourceToken);\r\n                }\r\n                return;\r\n            case 'space':\r\n            case 'comment':\r\n                if (it.value) {\r\n                    map.items.push({ start: [this.sourceToken] });\r\n                }\r\n                else if (it.sep) {\r\n                    it.sep.push(this.sourceToken);\r\n                }\r\n                else {\r\n                    if (this.atIndentedComment(it.start, map.indent)) {\r\n                        const prev = map.items[map.items.length - 2];\r\n                        const end = prev?.value?.end;\r\n                        if (Array.isArray(end)) {\r\n                            Array.prototype.push.apply(end, it.start);\r\n                            end.push(this.sourceToken);\r\n                            map.items.pop();\r\n                            return;\r\n                        }\r\n                    }\r\n                    it.start.push(this.sourceToken);\r\n                }\r\n                return;\r\n        }\r\n        if (this.indent >= map.indent) {\r\n            const atMapIndent = !this.onKeyLine && this.indent === map.indent;\r\n            const atNextItem = atMapIndent &&\r\n                (it.sep || it.explicitKey) &&\r\n                this.type !== 'seq-item-ind';\r\n            // For empty nodes, assign newline-separated not indented empty tokens to following node\r\n            let start = [];\r\n            if (atNextItem && it.sep && !it.value) {\r\n                const nl = [];\r\n                for (let i = 0; i < it.sep.length; ++i) {\r\n                    const st = it.sep[i];\r\n                    switch (st.type) {\r\n                        case 'newline':\r\n                            nl.push(i);\r\n                            break;\r\n                        case 'space':\r\n                            break;\r\n                        case 'comment':\r\n                            if (st.indent > map.indent)\r\n                                nl.length = 0;\r\n                            break;\r\n                        default:\r\n                            nl.length = 0;\r\n                    }\r\n                }\r\n                if (nl.length >= 2)\r\n                    start = it.sep.splice(nl[1]);\r\n            }\r\n            switch (this.type) {\r\n                case 'anchor':\r\n                case 'tag':\r\n                    if (atNextItem || it.value) {\r\n                        start.push(this.sourceToken);\r\n                        map.items.push({ start });\r\n                        this.onKeyLine = true;\r\n                    }\r\n                    else if (it.sep) {\r\n                        it.sep.push(this.sourceToken);\r\n                    }\r\n                    else {\r\n                        it.start.push(this.sourceToken);\r\n                    }\r\n                    return;\r\n                case 'explicit-key-ind':\r\n                    if (!it.sep && !it.explicitKey) {\r\n                        it.start.push(this.sourceToken);\r\n                        it.explicitKey = true;\r\n                    }\r\n                    else if (atNextItem || it.value) {\r\n                        start.push(this.sourceToken);\r\n                        map.items.push({ start, explicitKey: true });\r\n                    }\r\n                    else {\r\n                        this.stack.push({\r\n                            type: 'block-map',\r\n                            offset: this.offset,\r\n                            indent: this.indent,\r\n                            items: [{ start: [this.sourceToken], explicitKey: true }]\r\n                        });\r\n                    }\r\n                    this.onKeyLine = true;\r\n                    return;\r\n                case 'map-value-ind':\r\n                    if (it.explicitKey) {\r\n                        if (!it.sep) {\r\n                            if (includesToken(it.start, 'newline')) {\r\n                                Object.assign(it, { key: null, sep: [this.sourceToken] });\r\n                            }\r\n                            else {\r\n                                const start = getFirstKeyStartProps(it.start);\r\n                                this.stack.push({\r\n                                    type: 'block-map',\r\n                                    offset: this.offset,\r\n                                    indent: this.indent,\r\n                                    items: [{ start, key: null, sep: [this.sourceToken] }]\r\n                                });\r\n                            }\r\n                        }\r\n                        else if (it.value) {\r\n                            map.items.push({ start: [], key: null, sep: [this.sourceToken] });\r\n                        }\r\n                        else if (includesToken(it.sep, 'map-value-ind')) {\r\n                            this.stack.push({\r\n                                type: 'block-map',\r\n                                offset: this.offset,\r\n                                indent: this.indent,\r\n                                items: [{ start, key: null, sep: [this.sourceToken] }]\r\n                            });\r\n                        }\r\n                        else if (isFlowToken(it.key) &&\r\n                            !includesToken(it.sep, 'newline')) {\r\n                            const start = getFirstKeyStartProps(it.start);\r\n                            const key = it.key;\r\n                            const sep = it.sep;\r\n                            sep.push(this.sourceToken);\r\n                            // @ts-expect-error type guard is wrong here\r\n                            delete it.key;\r\n                            // @ts-expect-error type guard is wrong here\r\n                            delete it.sep;\r\n                            this.stack.push({\r\n                                type: 'block-map',\r\n                                offset: this.offset,\r\n                                indent: this.indent,\r\n                                items: [{ start, key, sep }]\r\n                            });\r\n                        }\r\n                        else if (start.length > 0) {\r\n                            // Not actually at next item\r\n                            it.sep = it.sep.concat(start, this.sourceToken);\r\n                        }\r\n                        else {\r\n                            it.sep.push(this.sourceToken);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (!it.sep) {\r\n                            Object.assign(it, { key: null, sep: [this.sourceToken] });\r\n                        }\r\n                        else if (it.value || atNextItem) {\r\n                            map.items.push({ start, key: null, sep: [this.sourceToken] });\r\n                        }\r\n                        else if (includesToken(it.sep, 'map-value-ind')) {\r\n                            this.stack.push({\r\n                                type: 'block-map',\r\n                                offset: this.offset,\r\n                                indent: this.indent,\r\n                                items: [{ start: [], key: null, sep: [this.sourceToken] }]\r\n                            });\r\n                        }\r\n                        else {\r\n                            it.sep.push(this.sourceToken);\r\n                        }\r\n                    }\r\n                    this.onKeyLine = true;\r\n                    return;\r\n                case 'alias':\r\n                case 'scalar':\r\n                case 'single-quoted-scalar':\r\n                case 'double-quoted-scalar': {\r\n                    const fs = this.flowScalar(this.type);\r\n                    if (atNextItem || it.value) {\r\n                        map.items.push({ start, key: fs, sep: [] });\r\n                        this.onKeyLine = true;\r\n                    }\r\n                    else if (it.sep) {\r\n                        this.stack.push(fs);\r\n                    }\r\n                    else {\r\n                        Object.assign(it, { key: fs, sep: [] });\r\n                        this.onKeyLine = true;\r\n                    }\r\n                    return;\r\n                }\r\n                default: {\r\n                    const bv = this.startBlockValue(map);\r\n                    if (bv) {\r\n                        if (bv.type === 'block-seq') {\r\n                            if (!it.explicitKey &&\r\n                                it.sep &&\r\n                                !includesToken(it.sep, 'newline')) {\r\n                                yield* this.pop({\r\n                                    type: 'error',\r\n                                    offset: this.offset,\r\n                                    message: 'Unexpected block-seq-ind on same line with key',\r\n                                    source: this.source\r\n                                });\r\n                                return;\r\n                            }\r\n                        }\r\n                        else if (atMapIndent) {\r\n                            map.items.push({ start });\r\n                        }\r\n                        this.stack.push(bv);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        yield* this.pop();\r\n        yield* this.step();\r\n    }\r\n    *blockSequence(seq) {\r\n        const it = seq.items[seq.items.length - 1];\r\n        switch (this.type) {\r\n            case 'newline':\r\n                if (it.value) {\r\n                    const end = 'end' in it.value ? it.value.end : undefined;\r\n                    const last = Array.isArray(end) ? end[end.length - 1] : undefined;\r\n                    if (last?.type === 'comment')\r\n                        end?.push(this.sourceToken);\r\n                    else\r\n                        seq.items.push({ start: [this.sourceToken] });\r\n                }\r\n                else\r\n                    it.start.push(this.sourceToken);\r\n                return;\r\n            case 'space':\r\n            case 'comment':\r\n                if (it.value)\r\n                    seq.items.push({ start: [this.sourceToken] });\r\n                else {\r\n                    if (this.atIndentedComment(it.start, seq.indent)) {\r\n                        const prev = seq.items[seq.items.length - 2];\r\n                        const end = prev?.value?.end;\r\n                        if (Array.isArray(end)) {\r\n                            Array.prototype.push.apply(end, it.start);\r\n                            end.push(this.sourceToken);\r\n                            seq.items.pop();\r\n                            return;\r\n                        }\r\n                    }\r\n                    it.start.push(this.sourceToken);\r\n                }\r\n                return;\r\n            case 'anchor':\r\n            case 'tag':\r\n                if (it.value || this.indent <= seq.indent)\r\n                    break;\r\n                it.start.push(this.sourceToken);\r\n                return;\r\n            case 'seq-item-ind':\r\n                if (this.indent !== seq.indent)\r\n                    break;\r\n                if (it.value || includesToken(it.start, 'seq-item-ind'))\r\n                    seq.items.push({ start: [this.sourceToken] });\r\n                else\r\n                    it.start.push(this.sourceToken);\r\n                return;\r\n        }\r\n        if (this.indent > seq.indent) {\r\n            const bv = this.startBlockValue(seq);\r\n            if (bv) {\r\n                this.stack.push(bv);\r\n                return;\r\n            }\r\n        }\r\n        yield* this.pop();\r\n        yield* this.step();\r\n    }\r\n    *flowCollection(fc) {\r\n        const it = fc.items[fc.items.length - 1];\r\n        if (this.type === 'flow-error-end') {\r\n            let top;\r\n            do {\r\n                yield* this.pop();\r\n                top = this.peek(1);\r\n            } while (top && top.type === 'flow-collection');\r\n        }\r\n        else if (fc.end.length === 0) {\r\n            switch (this.type) {\r\n                case 'comma':\r\n                case 'explicit-key-ind':\r\n                    if (!it || it.sep)\r\n                        fc.items.push({ start: [this.sourceToken] });\r\n                    else\r\n                        it.start.push(this.sourceToken);\r\n                    return;\r\n                case 'map-value-ind':\r\n                    if (!it || it.value)\r\n                        fc.items.push({ start: [], key: null, sep: [this.sourceToken] });\r\n                    else if (it.sep)\r\n                        it.sep.push(this.sourceToken);\r\n                    else\r\n                        Object.assign(it, { key: null, sep: [this.sourceToken] });\r\n                    return;\r\n                case 'space':\r\n                case 'comment':\r\n                case 'newline':\r\n                case 'anchor':\r\n                case 'tag':\r\n                    if (!it || it.value)\r\n                        fc.items.push({ start: [this.sourceToken] });\r\n                    else if (it.sep)\r\n                        it.sep.push(this.sourceToken);\r\n                    else\r\n                        it.start.push(this.sourceToken);\r\n                    return;\r\n                case 'alias':\r\n                case 'scalar':\r\n                case 'single-quoted-scalar':\r\n                case 'double-quoted-scalar': {\r\n                    const fs = this.flowScalar(this.type);\r\n                    if (!it || it.value)\r\n                        fc.items.push({ start: [], key: fs, sep: [] });\r\n                    else if (it.sep)\r\n                        this.stack.push(fs);\r\n                    else\r\n                        Object.assign(it, { key: fs, sep: [] });\r\n                    return;\r\n                }\r\n                case 'flow-map-end':\r\n                case 'flow-seq-end':\r\n                    fc.end.push(this.sourceToken);\r\n                    return;\r\n            }\r\n            const bv = this.startBlockValue(fc);\r\n            /* istanbul ignore else should not happen */\r\n            if (bv)\r\n                this.stack.push(bv);\r\n            else {\r\n                yield* this.pop();\r\n                yield* this.step();\r\n            }\r\n        }\r\n        else {\r\n            const parent = this.peek(2);\r\n            if (parent.type === 'block-map' &&\r\n                ((this.type === 'map-value-ind' && parent.indent === fc.indent) ||\r\n                    (this.type === 'newline' &&\r\n                        !parent.items[parent.items.length - 1].sep))) {\r\n                yield* this.pop();\r\n                yield* this.step();\r\n            }\r\n            else if (this.type === 'map-value-ind' &&\r\n                parent.type !== 'flow-collection') {\r\n                const prev = getPrevProps(parent);\r\n                const start = getFirstKeyStartProps(prev);\r\n                fixFlowSeqItems(fc);\r\n                const sep = fc.end.splice(1, fc.end.length);\r\n                sep.push(this.sourceToken);\r\n                const map = {\r\n                    type: 'block-map',\r\n                    offset: fc.offset,\r\n                    indent: fc.indent,\r\n                    items: [{ start, key: fc, sep }]\r\n                };\r\n                this.onKeyLine = true;\r\n                this.stack[this.stack.length - 1] = map;\r\n            }\r\n            else {\r\n                yield* this.lineEnd(fc);\r\n            }\r\n        }\r\n    }\r\n    flowScalar(type) {\r\n        if (this.onNewLine) {\r\n            let nl = this.source.indexOf('\\n') + 1;\r\n            while (nl !== 0) {\r\n                this.onNewLine(this.offset + nl);\r\n                nl = this.source.indexOf('\\n', nl) + 1;\r\n            }\r\n        }\r\n        return {\r\n            type,\r\n            offset: this.offset,\r\n            indent: this.indent,\r\n            source: this.source\r\n        };\r\n    }\r\n    startBlockValue(parent) {\r\n        switch (this.type) {\r\n            case 'alias':\r\n            case 'scalar':\r\n            case 'single-quoted-scalar':\r\n            case 'double-quoted-scalar':\r\n                return this.flowScalar(this.type);\r\n            case 'block-scalar-header':\r\n                return {\r\n                    type: 'block-scalar',\r\n                    offset: this.offset,\r\n                    indent: this.indent,\r\n                    props: [this.sourceToken],\r\n                    source: ''\r\n                };\r\n            case 'flow-map-start':\r\n            case 'flow-seq-start':\r\n                return {\r\n                    type: 'flow-collection',\r\n                    offset: this.offset,\r\n                    indent: this.indent,\r\n                    start: this.sourceToken,\r\n                    items: [],\r\n                    end: []\r\n                };\r\n            case 'seq-item-ind':\r\n                return {\r\n                    type: 'block-seq',\r\n                    offset: this.offset,\r\n                    indent: this.indent,\r\n                    items: [{ start: [this.sourceToken] }]\r\n                };\r\n            case 'explicit-key-ind': {\r\n                this.onKeyLine = true;\r\n                const prev = getPrevProps(parent);\r\n                const start = getFirstKeyStartProps(prev);\r\n                start.push(this.sourceToken);\r\n                return {\r\n                    type: 'block-map',\r\n                    offset: this.offset,\r\n                    indent: this.indent,\r\n                    items: [{ start, explicitKey: true }]\r\n                };\r\n            }\r\n            case 'map-value-ind': {\r\n                this.onKeyLine = true;\r\n                const prev = getPrevProps(parent);\r\n                const start = getFirstKeyStartProps(prev);\r\n                return {\r\n                    type: 'block-map',\r\n                    offset: this.offset,\r\n                    indent: this.indent,\r\n                    items: [{ start, key: null, sep: [this.sourceToken] }]\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    atIndentedComment(start, indent) {\r\n        if (this.type !== 'comment')\r\n            return false;\r\n        if (this.indent <= indent)\r\n            return false;\r\n        return start.every(st => st.type === 'newline' || st.type === 'space');\r\n    }\r\n    *documentEnd(docEnd) {\r\n        if (this.type !== 'doc-mode') {\r\n            if (docEnd.end)\r\n                docEnd.end.push(this.sourceToken);\r\n            else\r\n                docEnd.end = [this.sourceToken];\r\n            if (this.type === 'newline')\r\n                yield* this.pop();\r\n        }\r\n    }\r\n    *lineEnd(token) {\r\n        switch (this.type) {\r\n            case 'comma':\r\n            case 'doc-start':\r\n            case 'doc-end':\r\n            case 'flow-seq-end':\r\n            case 'flow-map-end':\r\n            case 'map-value-ind':\r\n                yield* this.pop();\r\n                yield* this.step();\r\n                break;\r\n            case 'newline':\r\n                this.onKeyLine = false;\r\n            // fallthrough\r\n            case 'space':\r\n            case 'comment':\r\n            default:\r\n                // all other values are errors\r\n                if (token.end)\r\n                    token.end.push(this.sourceToken);\r\n                else\r\n                    token.end = [this.sourceToken];\r\n                if (this.type === 'newline')\r\n                    yield* this.pop();\r\n        }\r\n    }\r\n}\r\n\r\nexport { Parser };\r\n", "import { Composer } from './compose/composer.js';\r\nimport { Document } from './doc/Document.js';\r\nimport { prettifyError, YAMLParseError } from './errors.js';\r\nimport { warn } from './log.js';\r\nimport { isDocument } from './nodes/identity.js';\r\nimport { LineCounter } from './parse/line-counter.js';\r\nimport { Parser } from './parse/parser.js';\r\n\r\nfunction parseOptions(options) {\r\n    const prettyErrors = options.prettyErrors !== false;\r\n    const lineCounter = options.lineCounter || (prettyErrors && new LineCounter()) || null;\r\n    return { lineCounter, prettyErrors };\r\n}\r\n/**\r\n * Parse the input as a stream of YAML documents.\r\n *\r\n * Documents should be separated from each other by `...` or `---` marker lines.\r\n *\r\n * @returns If an empty `docs` array is returned, it will be of type\r\n *   EmptyStream and contain additional stream information. In\r\n *   TypeScript, you should use `'empty' in docs` as a type guard for it.\r\n */\r\nfunction parseAllDocuments(source, options = {}) {\r\n    const { lineCounter, prettyErrors } = parseOptions(options);\r\n    const parser = new Parser(lineCounter?.addNewLine);\r\n    const composer = new Composer(options);\r\n    const docs = Array.from(composer.compose(parser.parse(source)));\r\n    if (prettyErrors && lineCounter)\r\n        for (const doc of docs) {\r\n            doc.errors.forEach(prettifyError(source, lineCounter));\r\n            doc.warnings.forEach(prettifyError(source, lineCounter));\r\n        }\r\n    if (docs.length > 0)\r\n        return docs;\r\n    return Object.assign([], { empty: true }, composer.streamInfo());\r\n}\r\n/** Parse an input string into a single YAML.Document */\r\nfunction parseDocument(source, options = {}) {\r\n    const { lineCounter, prettyErrors } = parseOptions(options);\r\n    const parser = new Parser(lineCounter?.addNewLine);\r\n    const composer = new Composer(options);\r\n    // `doc` is always set by compose.end(true) at the very latest\r\n    let doc = null;\r\n    for (const _doc of composer.compose(parser.parse(source), true, source.length)) {\r\n        if (!doc)\r\n            doc = _doc;\r\n        else if (doc.options.logLevel !== 'silent') {\r\n            doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));\r\n            break;\r\n        }\r\n    }\r\n    if (prettyErrors && lineCounter) {\r\n        doc.errors.forEach(prettifyError(source, lineCounter));\r\n        doc.warnings.forEach(prettifyError(source, lineCounter));\r\n    }\r\n    return doc;\r\n}\r\nfunction parse(src, reviver, options) {\r\n    let _reviver = undefined;\r\n    if (typeof reviver === 'function') {\r\n        _reviver = reviver;\r\n    }\r\n    else if (options === undefined && reviver && typeof reviver === 'object') {\r\n        options = reviver;\r\n    }\r\n    const doc = parseDocument(src, options);\r\n    if (!doc)\r\n        return null;\r\n    doc.warnings.forEach(warning => warn(doc.options.logLevel, warning));\r\n    if (doc.errors.length > 0) {\r\n        if (doc.options.logLevel !== 'silent')\r\n            throw doc.errors[0];\r\n        else\r\n            doc.errors = [];\r\n    }\r\n    return doc.toJS(Object.assign({ reviver: _reviver }, options));\r\n}\r\nfunction stringify(value, replacer, options) {\r\n    let _replacer = null;\r\n    if (typeof replacer === 'function' || Array.isArray(replacer)) {\r\n        _replacer = replacer;\r\n    }\r\n    else if (options === undefined && replacer) {\r\n        options = replacer;\r\n    }\r\n    if (typeof options === 'string')\r\n        options = options.length;\r\n    if (typeof options === 'number') {\r\n        const indent = Math.round(options);\r\n        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };\r\n    }\r\n    if (value === undefined) {\r\n        const { keepUndefined } = options ?? replacer ?? {};\r\n        if (!keepUndefined)\r\n            return undefined;\r\n    }\r\n    if (isDocument(value) && !_replacer)\r\n        return value.toString(options);\r\n    return new Document(value, _replacer, options).toString(options);\r\n}\r\n\r\nexport { parse, parseAllDocuments, parseDocument, stringify };\r\n", "// `export * as default from ...` fails on Webpack v4\r\n// https://github.com/eemeli/yaml/issues/228\r\nimport * as YAML from './dist/index.js'\r\nexport default YAML\r\nexport * from './dist/index.js'\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAAA;AAAA,EAAA;AAAA;AAAA;;;ACAA,IAAM,QAAQ,OAAO,IAAI,YAAY;AACrC,IAAM,MAAM,OAAO,IAAI,eAAe;AACtC,IAAM,MAAM,OAAO,IAAI,UAAU;AACjC,IAAM,OAAO,OAAO,IAAI,WAAW;AACnC,IAAM,SAAS,OAAO,IAAI,aAAa;AACvC,IAAM,MAAM,OAAO,IAAI,UAAU;AACjC,IAAM,YAAY,OAAO,IAAI,gBAAgB;AAC7C,IAAM,UAAU,CAAC,SAAS,CAAC,CAAC,QAAQ,OAAO,SAAS,YAAY,KAAK,SAAS,MAAM;AACpF,IAAM,aAAa,CAAC,SAAS,CAAC,CAAC,QAAQ,OAAO,SAAS,YAAY,KAAK,SAAS,MAAM;AACvF,IAAM,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,OAAO,SAAS,YAAY,KAAK,SAAS,MAAM;AAClF,IAAM,SAAS,CAAC,SAAS,CAAC,CAAC,QAAQ,OAAO,SAAS,YAAY,KAAK,SAAS,MAAM;AACnF,IAAM,WAAW,CAAC,SAAS,CAAC,CAAC,QAAQ,OAAO,SAAS,YAAY,KAAK,SAAS,MAAM;AACrF,IAAM,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,OAAO,SAAS,YAAY,KAAK,SAAS,MAAM;AAClF,SAAS,aAAa,MAAM;AACxB,MAAI,QAAQ,OAAO,SAAS;AACxB,YAAQ,KAAK,SAAS,GAAG;AAAA,MACrB,KAAK;AAAA,MACL,KAAK;AACD,eAAO;AAAA,IACf;AACJ,SAAO;AACX;AACA,SAAS,OAAO,MAAM;AAClB,MAAI,QAAQ,OAAO,SAAS;AACxB,YAAQ,KAAK,SAAS,GAAG;AAAA,MACrB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO;AAAA,IACf;AACJ,SAAO;AACX;AACA,IAAM,YAAY,CAAC,UAAU,SAAS,IAAI,KAAK,aAAa,IAAI,MAAM,CAAC,CAAC,KAAK;;;AC/B7E,IAAM,QAAQ,OAAO,aAAa;AAClC,IAAM,OAAO,OAAO,eAAe;AACnC,IAAM,SAAS,OAAO,aAAa;AA+BnC,SAAS,MAAM,MAAM,SAAS;AAC1B,QAAM,WAAW,YAAY,OAAO;AACpC,MAAI,WAAW,IAAI,GAAG;AAClB,UAAM,KAAK,OAAO,MAAM,KAAK,UAAU,UAAU,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;AACtE,QAAI,OAAO;AACP,WAAK,WAAW;AAAA,EACxB;AAEI,WAAO,MAAM,MAAM,UAAU,OAAO,OAAO,CAAC,CAAC,CAAC;AACtD;AAKA,MAAM,QAAQ;AAEd,MAAM,OAAO;AAEb,MAAM,SAAS;AACf,SAAS,OAAO,KAAK,MAAM,SAAS,MAAM;AACtC,QAAM,OAAO,YAAY,KAAK,MAAM,SAAS,IAAI;AACjD,MAAI,OAAO,IAAI,KAAK,OAAO,IAAI,GAAG;AAC9B,gBAAY,KAAK,MAAM,IAAI;AAC3B,WAAO,OAAO,KAAK,MAAM,SAAS,IAAI;AAAA,EAC1C;AACA,MAAI,OAAO,SAAS,UAAU;AAC1B,QAAI,aAAa,IAAI,GAAG;AACpB,aAAO,OAAO,OAAO,KAAK,OAAO,IAAI,CAAC;AACtC,eAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,EAAE,GAAG;AACxC,cAAM,KAAK,OAAO,GAAG,KAAK,MAAM,CAAC,GAAG,SAAS,IAAI;AACjD,YAAI,OAAO,OAAO;AACd,cAAI,KAAK;AAAA,iBACJ,OAAO;AACZ,iBAAO;AAAA,iBACF,OAAO,QAAQ;AACpB,eAAK,MAAM,OAAO,GAAG,CAAC;AACtB,eAAK;AAAA,QACT;AAAA,MACJ;AAAA,IACJ,WACS,OAAO,IAAI,GAAG;AACnB,aAAO,OAAO,OAAO,KAAK,OAAO,IAAI,CAAC;AACtC,YAAM,KAAK,OAAO,OAAO,KAAK,KAAK,SAAS,IAAI;AAChD,UAAI,OAAO;AACP,eAAO;AAAA,eACF,OAAO;AACZ,aAAK,MAAM;AACf,YAAM,KAAK,OAAO,SAAS,KAAK,OAAO,SAAS,IAAI;AACpD,UAAI,OAAO;AACP,eAAO;AAAA,eACF,OAAO;AACZ,aAAK,QAAQ;AAAA,IACrB;AAAA,EACJ;AACA,SAAO;AACX;AAgCA,eAAe,WAAW,MAAM,SAAS;AACrC,QAAM,WAAW,YAAY,OAAO;AACpC,MAAI,WAAW,IAAI,GAAG;AAClB,UAAM,KAAK,MAAM,YAAY,MAAM,KAAK,UAAU,UAAU,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;AACjF,QAAI,OAAO;AACP,WAAK,WAAW;AAAA,EACxB;AAEI,UAAM,YAAY,MAAM,MAAM,UAAU,OAAO,OAAO,CAAC,CAAC,CAAC;AACjE;AAKA,WAAW,QAAQ;AAEnB,WAAW,OAAO;AAElB,WAAW,SAAS;AACpB,eAAe,YAAY,KAAK,MAAM,SAAS,MAAM;AACjD,QAAM,OAAO,MAAM,YAAY,KAAK,MAAM,SAAS,IAAI;AACvD,MAAI,OAAO,IAAI,KAAK,OAAO,IAAI,GAAG;AAC9B,gBAAY,KAAK,MAAM,IAAI;AAC3B,WAAO,YAAY,KAAK,MAAM,SAAS,IAAI;AAAA,EAC/C;AACA,MAAI,OAAO,SAAS,UAAU;AAC1B,QAAI,aAAa,IAAI,GAAG;AACpB,aAAO,OAAO,OAAO,KAAK,OAAO,IAAI,CAAC;AACtC,eAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,EAAE,GAAG;AACxC,cAAM,KAAK,MAAM,YAAY,GAAG,KAAK,MAAM,CAAC,GAAG,SAAS,IAAI;AAC5D,YAAI,OAAO,OAAO;AACd,cAAI,KAAK;AAAA,iBACJ,OAAO;AACZ,iBAAO;AAAA,iBACF,OAAO,QAAQ;AACpB,eAAK,MAAM,OAAO,GAAG,CAAC;AACtB,eAAK;AAAA,QACT;AAAA,MACJ;AAAA,IACJ,WACS,OAAO,IAAI,GAAG;AACnB,aAAO,OAAO,OAAO,KAAK,OAAO,IAAI,CAAC;AACtC,YAAM,KAAK,MAAM,YAAY,OAAO,KAAK,KAAK,SAAS,IAAI;AAC3D,UAAI,OAAO;AACP,eAAO;AAAA,eACF,OAAO;AACZ,aAAK,MAAM;AACf,YAAM,KAAK,MAAM,YAAY,SAAS,KAAK,OAAO,SAAS,IAAI;AAC/D,UAAI,OAAO;AACP,eAAO;AAAA,eACF,OAAO;AACZ,aAAK,QAAQ;AAAA,IACrB;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,YAAY,SAAS;AAC1B,MAAI,OAAO,YAAY,aAClB,QAAQ,cAAc,QAAQ,QAAQ,QAAQ,QAAQ;AACvD,WAAO,OAAO,OAAO;AAAA,MACjB,OAAO,QAAQ;AAAA,MACf,KAAK,QAAQ;AAAA,MACb,QAAQ,QAAQ;AAAA,MAChB,KAAK,QAAQ;AAAA,IACjB,GAAG,QAAQ,SAAS;AAAA,MAChB,KAAK,QAAQ;AAAA,MACb,QAAQ,QAAQ;AAAA,MAChB,KAAK,QAAQ;AAAA,IACjB,GAAG,QAAQ,cAAc;AAAA,MACrB,KAAK,QAAQ;AAAA,MACb,KAAK,QAAQ;AAAA,IACjB,GAAG,OAAO;AAAA,EACd;AACA,SAAO;AACX;AACA,SAAS,YAAY,KAAK,MAAM,SAAS,MAAM;AArM/C;AAsMI,MAAI,OAAO,YAAY;AACnB,WAAO,QAAQ,KAAK,MAAM,IAAI;AAClC,MAAI,MAAM,IAAI;AACV,YAAO,aAAQ,QAAR,iCAAc,KAAK,MAAM;AACpC,MAAI,MAAM,IAAI;AACV,YAAO,aAAQ,QAAR,iCAAc,KAAK,MAAM;AACpC,MAAI,OAAO,IAAI;AACX,YAAO,aAAQ,SAAR,iCAAe,KAAK,MAAM;AACrC,MAAI,SAAS,IAAI;AACb,YAAO,aAAQ,WAAR,iCAAiB,KAAK,MAAM;AACvC,MAAI,QAAQ,IAAI;AACZ,YAAO,aAAQ,UAAR,iCAAgB,KAAK,MAAM;AACtC,SAAO;AACX;AACA,SAAS,YAAY,KAAK,MAAM,MAAM;AAClC,QAAM,SAAS,KAAK,KAAK,SAAS,CAAC;AACnC,MAAI,aAAa,MAAM,GAAG;AACtB,WAAO,MAAM,GAAG,IAAI;AAAA,EACxB,WACS,OAAO,MAAM,GAAG;AACrB,QAAI,QAAQ;AACR,aAAO,MAAM;AAAA;AAEb,aAAO,QAAQ;AAAA,EACvB,WACS,WAAW,MAAM,GAAG;AACzB,WAAO,WAAW;AAAA,EACtB,OACK;AACD,UAAM,KAAK,QAAQ,MAAM,IAAI,UAAU;AACvC,UAAM,IAAI,MAAM,4BAA4B,EAAE,SAAS;AAAA,EAC3D;AACJ;;;ACnOA,IAAM,cAAc;AAAA,EAChB,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACT;AACA,IAAM,gBAAgB,CAAC,OAAO,GAAG,QAAQ,cAAc,QAAM,YAAY,EAAE,CAAC;AAC5E,IAAM,aAAN,MAAM,YAAW;AAAA,EACb,YAAY,MAAM,MAAM;AAKpB,SAAK,WAAW;AAEhB,SAAK,SAAS;AACd,SAAK,OAAO,OAAO,OAAO,CAAC,GAAG,YAAW,aAAa,IAAI;AAC1D,SAAK,OAAO,OAAO,OAAO,CAAC,GAAG,YAAW,aAAa,IAAI;AAAA,EAC9D;AAAA,EACA,QAAQ;AACJ,UAAM,OAAO,IAAI,YAAW,KAAK,MAAM,KAAK,IAAI;AAChD,SAAK,WAAW,KAAK;AACrB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACT,UAAM,MAAM,IAAI,YAAW,KAAK,MAAM,KAAK,IAAI;AAC/C,YAAQ,KAAK,KAAK,SAAS;AAAA,MACvB,KAAK;AACD,aAAK,iBAAiB;AACtB;AAAA,MACJ,KAAK;AACD,aAAK,iBAAiB;AACtB,aAAK,OAAO;AAAA,UACR,UAAU,YAAW,YAAY;AAAA,UACjC,SAAS;AAAA,QACb;AACA,aAAK,OAAO,OAAO,OAAO,CAAC,GAAG,YAAW,WAAW;AACpD;AAAA,IACR;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,MAAM,SAAS;AACf,QAAI,KAAK,gBAAgB;AACrB,WAAK,OAAO,EAAE,UAAU,YAAW,YAAY,UAAU,SAAS,MAAM;AACxE,WAAK,OAAO,OAAO,OAAO,CAAC,GAAG,YAAW,WAAW;AACpD,WAAK,iBAAiB;AAAA,IAC1B;AACA,UAAM,QAAQ,KAAK,KAAK,EAAE,MAAM,QAAQ;AACxC,UAAM,OAAO,MAAM,MAAM;AACzB,YAAQ,MAAM;AAAA,MACV,KAAK,QAAQ;AACT,YAAI,MAAM,WAAW,GAAG;AACpB,kBAAQ,GAAG,iDAAiD;AAC5D,cAAI,MAAM,SAAS;AACf,mBAAO;AAAA,QACf;AACA,cAAM,CAAC,QAAQ,MAAM,IAAI;AACzB,aAAK,KAAK,MAAM,IAAI;AACpB,eAAO;AAAA,MACX;AAAA,MACA,KAAK,SAAS;AACV,aAAK,KAAK,WAAW;AACrB,YAAI,MAAM,WAAW,GAAG;AACpB,kBAAQ,GAAG,iDAAiD;AAC5D,iBAAO;AAAA,QACX;AACA,cAAM,CAAC,OAAO,IAAI;AAClB,YAAI,YAAY,SAAS,YAAY,OAAO;AACxC,eAAK,KAAK,UAAU;AACpB,iBAAO;AAAA,QACX,OACK;AACD,gBAAM,UAAU,aAAa,KAAK,OAAO;AACzC,kBAAQ,GAAG,4BAA4B,OAAO,IAAI,OAAO;AACzD,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,MACA;AACI,gBAAQ,GAAG,qBAAqB,IAAI,IAAI,IAAI;AAC5C,eAAO;AAAA,IACf;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,QAAQ,SAAS;AACrB,QAAI,WAAW;AACX,aAAO;AACX,QAAI,OAAO,CAAC,MAAM,KAAK;AACnB,cAAQ,oBAAoB,MAAM,EAAE;AACpC,aAAO;AAAA,IACX;AACA,QAAI,OAAO,CAAC,MAAM,KAAK;AACnB,YAAM,WAAW,OAAO,MAAM,GAAG,EAAE;AACnC,UAAI,aAAa,OAAO,aAAa,MAAM;AACvC,gBAAQ,qCAAqC,MAAM,cAAc;AACjE,eAAO;AAAA,MACX;AACA,UAAI,OAAO,OAAO,SAAS,CAAC,MAAM;AAC9B,gBAAQ,iCAAiC;AAC7C,aAAO;AAAA,IACX;AACA,UAAM,CAAC,EAAE,QAAQ,MAAM,IAAI,OAAO,MAAM,iBAAiB;AACzD,QAAI,CAAC;AACD,cAAQ,OAAO,MAAM,oBAAoB;AAC7C,UAAM,SAAS,KAAK,KAAK,MAAM;AAC/B,QAAI,QAAQ;AACR,UAAI;AACA,eAAO,SAAS,mBAAmB,MAAM;AAAA,MAC7C,SACO,OAAO;AACV,gBAAQ,OAAO,KAAK,CAAC;AACrB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,WAAW;AACX,aAAO;AACX,YAAQ,0BAA0B,MAAM,EAAE;AAC1C,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,KAAK;AACX,eAAW,CAAC,QAAQ,MAAM,KAAK,OAAO,QAAQ,KAAK,IAAI,GAAG;AACtD,UAAI,IAAI,WAAW,MAAM;AACrB,eAAO,SAAS,cAAc,IAAI,UAAU,OAAO,MAAM,CAAC;AAAA,IAClE;AACA,WAAO,IAAI,CAAC,MAAM,MAAM,MAAM,KAAK,GAAG;AAAA,EAC1C;AAAA,EACA,SAAS,KAAK;AACV,UAAM,QAAQ,KAAK,KAAK,WAClB,CAAC,SAAS,KAAK,KAAK,WAAW,KAAK,EAAE,IACtC,CAAC;AACP,UAAM,aAAa,OAAO,QAAQ,KAAK,IAAI;AAC3C,QAAI;AACJ,QAAI,OAAO,WAAW,SAAS,KAAK,OAAO,IAAI,QAAQ,GAAG;AACtD,YAAM,OAAO,CAAC;AACd,YAAM,IAAI,UAAU,CAAC,MAAM,SAAS;AAChC,YAAI,OAAO,IAAI,KAAK,KAAK;AACrB,eAAK,KAAK,GAAG,IAAI;AAAA,MACzB,CAAC;AACD,iBAAW,OAAO,KAAK,IAAI;AAAA,IAC/B;AAEI,iBAAW,CAAC;AAChB,eAAW,CAAC,QAAQ,MAAM,KAAK,YAAY;AACvC,UAAI,WAAW,QAAQ,WAAW;AAC9B;AACJ,UAAI,CAAC,OAAO,SAAS,KAAK,QAAM,GAAG,WAAW,MAAM,CAAC;AACjD,cAAM,KAAK,QAAQ,MAAM,IAAI,MAAM,EAAE;AAAA,IAC7C;AACA,WAAO,MAAM,KAAK,IAAI;AAAA,EAC1B;AACJ;AACA,WAAW,cAAc,EAAE,UAAU,OAAO,SAAS,MAAM;AAC3D,WAAW,cAAc,EAAE,MAAM,qBAAqB;;;ACrKtD,SAAS,cAAc,QAAQ;AAC3B,MAAI,sBAAsB,KAAK,MAAM,GAAG;AACpC,UAAM,KAAK,KAAK,UAAU,MAAM;AAChC,UAAM,MAAM,6DAA6D,EAAE;AAC3E,UAAM,IAAI,MAAM,GAAG;AAAA,EACvB;AACA,SAAO;AACX;AACA,SAAS,YAAY,MAAM;AACvB,QAAM,UAAU,oBAAI,IAAI;AACxB,QAAM,MAAM;AAAA,IACR,MAAM,MAAM,MAAM;AACd,UAAI,KAAK;AACL,gBAAQ,IAAI,KAAK,MAAM;AAAA,IAC/B;AAAA,EACJ,CAAC;AACD,SAAO;AACX;AAEA,SAAS,cAAc,QAAQ,SAAS;AACpC,WAAS,IAAI,GAAG,MAAM,EAAE,GAAG;AACvB,UAAM,OAAO,GAAG,MAAM,GAAG,CAAC;AAC1B,QAAI,CAAC,QAAQ,IAAI,IAAI;AACjB,aAAO;AAAA,EACf;AACJ;AACA,SAAS,kBAAkB,KAAK,QAAQ;AACpC,QAAM,eAAe,CAAC;AACtB,QAAM,gBAAgB,oBAAI,IAAI;AAC9B,MAAI,cAAc;AAClB,SAAO;AAAA,IACH,UAAU,CAAC,WAAW;AAClB,mBAAa,KAAK,MAAM;AACxB,sBAAgB,cAAc,YAAY,GAAG;AAC7C,YAAM,SAAS,cAAc,QAAQ,WAAW;AAChD,kBAAY,IAAI,MAAM;AACtB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,YAAY,MAAM;AACd,iBAAW,UAAU,cAAc;AAC/B,cAAM,MAAM,cAAc,IAAI,MAAM;AACpC,YAAI,OAAO,QAAQ,YACf,IAAI,WACH,SAAS,IAAI,IAAI,KAAK,aAAa,IAAI,IAAI,IAAI;AAChD,cAAI,KAAK,SAAS,IAAI;AAAA,QAC1B,OACK;AACD,gBAAM,QAAQ,IAAI,MAAM,4DAA4D;AACpF,gBAAM,SAAS;AACf,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,EACJ;AACJ;;;AC7DA,SAAS,aAAa,SAAS,KAAK,KAAK,KAAK;AAC1C,MAAI,OAAO,OAAO,QAAQ,UAAU;AAChC,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,eAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,EAAE,GAAG;AAC5C,cAAM,KAAK,IAAI,CAAC;AAChB,cAAM,KAAK,aAAa,SAAS,KAAK,OAAO,CAAC,GAAG,EAAE;AAEnD,YAAI,OAAO;AACP,iBAAO,IAAI,CAAC;AAAA,iBACP,OAAO;AACZ,cAAI,CAAC,IAAI;AAAA,MACjB;AAAA,IACJ,WACS,eAAe,KAAK;AACzB,iBAAW,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,GAAG;AACpC,cAAM,KAAK,IAAI,IAAI,CAAC;AACpB,cAAM,KAAK,aAAa,SAAS,KAAK,GAAG,EAAE;AAC3C,YAAI,OAAO;AACP,cAAI,OAAO,CAAC;AAAA,iBACP,OAAO;AACZ,cAAI,IAAI,GAAG,EAAE;AAAA,MACrB;AAAA,IACJ,WACS,eAAe,KAAK;AACzB,iBAAW,MAAM,MAAM,KAAK,GAAG,GAAG;AAC9B,cAAM,KAAK,aAAa,SAAS,KAAK,IAAI,EAAE;AAC5C,YAAI,OAAO;AACP,cAAI,OAAO,EAAE;AAAA,iBACR,OAAO,IAAI;AAChB,cAAI,OAAO,EAAE;AACb,cAAI,IAAI,EAAE;AAAA,QACd;AAAA,MACJ;AAAA,IACJ,OACK;AACD,iBAAW,CAAC,GAAG,EAAE,KAAK,OAAO,QAAQ,GAAG,GAAG;AACvC,cAAM,KAAK,aAAa,SAAS,KAAK,GAAG,EAAE;AAC3C,YAAI,OAAO;AACP,iBAAO,IAAI,CAAC;AAAA,iBACP,OAAO;AACZ,cAAI,CAAC,IAAI;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO,QAAQ,KAAK,KAAK,KAAK,GAAG;AACrC;;;ACxCA,SAAS,KAAK,OAAO,KAAK,KAAK;AAE3B,MAAI,MAAM,QAAQ,KAAK;AACnB,WAAO,MAAM,IAAI,CAAC,GAAG,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,GAAG,CAAC;AACtD,MAAI,SAAS,OAAO,MAAM,WAAW,YAAY;AAE7C,QAAI,CAAC,OAAO,CAAC,UAAU,KAAK;AACxB,aAAO,MAAM,OAAO,KAAK,GAAG;AAChC,UAAM,OAAO,EAAE,YAAY,GAAG,OAAO,GAAG,KAAK,OAAU;AACvD,QAAI,QAAQ,IAAI,OAAO,IAAI;AAC3B,QAAI,WAAW,CAAAC,SAAO;AAClB,WAAK,MAAMA;AACX,aAAO,IAAI;AAAA,IACf;AACA,UAAM,MAAM,MAAM,OAAO,KAAK,GAAG;AACjC,QAAI,IAAI;AACJ,UAAI,SAAS,GAAG;AACpB,WAAO;AAAA,EACX;AACA,MAAI,OAAO,UAAU,YAAY,EAAC,2BAAK;AACnC,WAAO,OAAO,KAAK;AACvB,SAAO;AACX;;;AC9BA,IAAM,WAAN,MAAe;AAAA,EACX,YAAY,MAAM;AACd,WAAO,eAAe,MAAM,WAAW,EAAE,OAAO,KAAK,CAAC;AAAA,EAC1D;AAAA;AAAA,EAEA,QAAQ;AACJ,UAAM,OAAO,OAAO,OAAO,OAAO,eAAe,IAAI,GAAG,OAAO,0BAA0B,IAAI,CAAC;AAC9F,QAAI,KAAK;AACL,WAAK,QAAQ,KAAK,MAAM,MAAM;AAClC,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,KAAK,KAAK,EAAE,UAAU,eAAe,UAAU,QAAQ,IAAI,CAAC,GAAG;AAC3D,QAAI,CAAC,WAAW,GAAG;AACf,YAAM,IAAI,UAAU,iCAAiC;AACzD,UAAM,MAAM;AAAA,MACR,SAAS,oBAAI,IAAI;AAAA,MACjB;AAAA,MACA,MAAM;AAAA,MACN,UAAU,aAAa;AAAA,MACvB,cAAc;AAAA,MACd,eAAe,OAAO,kBAAkB,WAAW,gBAAgB;AAAA,IACvE;AACA,UAAM,MAAM,KAAK,MAAM,IAAI,GAAG;AAC9B,QAAI,OAAO,aAAa;AACpB,iBAAW,EAAE,OAAO,KAAAC,KAAI,KAAK,IAAI,QAAQ,OAAO;AAC5C,iBAASA,MAAK,KAAK;AAC3B,WAAO,OAAO,YAAY,aACpB,aAAa,SAAS,EAAE,IAAI,IAAI,GAAG,IAAI,GAAG,IAC1C;AAAA,EACV;AACJ;;;AC7BA,IAAM,QAAN,cAAoB,SAAS;AAAA,EACzB,YAAY,QAAQ;AAChB,UAAM,KAAK;AACX,SAAK,SAAS;AACd,WAAO,eAAe,MAAM,OAAO;AAAA,MAC/B,MAAM;AACF,cAAM,IAAI,MAAM,8BAA8B;AAAA,MAClD;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,KAAK,KAAK;AACd,QAAI;AACJ,QAAI,2BAAK,mBAAmB;AACxB,cAAQ,IAAI;AAAA,IAChB,OACK;AACD,cAAQ,CAAC;AACT,YAAM,KAAK;AAAA,QACP,MAAM,CAAC,MAAM,SAAS;AAClB,cAAI,QAAQ,IAAI,KAAK,UAAU,IAAI;AAC/B,kBAAM,KAAK,IAAI;AAAA,QACvB;AAAA,MACJ,CAAC;AACD,UAAI;AACA,YAAI,oBAAoB;AAAA,IAChC;AACA,QAAI,QAAQ;AACZ,eAAW,QAAQ,OAAO;AACtB,UAAI,SAAS;AACT;AACJ,UAAI,KAAK,WAAW,KAAK;AACrB,gBAAQ;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,MAAM,KAAK;AACd,QAAI,CAAC;AACD,aAAO,EAAE,QAAQ,KAAK,OAAO;AACjC,UAAM,EAAE,SAAS,KAAK,cAAc,IAAI;AACxC,UAAM,SAAS,KAAK,QAAQ,KAAK,GAAG;AACpC,QAAI,CAAC,QAAQ;AACT,YAAM,MAAM,+DAA+D,KAAK,MAAM;AACtF,YAAM,IAAI,eAAe,GAAG;AAAA,IAChC;AACA,QAAI,OAAO,QAAQ,IAAI,MAAM;AAC7B,QAAI,CAAC,MAAM;AAEP,WAAK,QAAQ,MAAM,GAAG;AACtB,aAAO,QAAQ,IAAI,MAAM;AAAA,IAC7B;AAEA,QAAI,CAAC,QAAQ,KAAK,QAAQ,QAAW;AACjC,YAAM,MAAM;AACZ,YAAM,IAAI,eAAe,GAAG;AAAA,IAChC;AACA,QAAI,iBAAiB,GAAG;AACpB,WAAK,SAAS;AACd,UAAI,KAAK,eAAe;AACpB,aAAK,aAAa,cAAc,KAAK,QAAQ,OAAO;AACxD,UAAI,KAAK,QAAQ,KAAK,aAAa,eAAe;AAC9C,cAAM,MAAM;AACZ,cAAM,IAAI,eAAe,GAAG;AAAA,MAChC;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,SAAS,KAAK,YAAY,cAAc;AACpC,UAAM,MAAM,IAAI,KAAK,MAAM;AAC3B,QAAI,KAAK;AACL,oBAAc,KAAK,MAAM;AACzB,UAAI,IAAI,QAAQ,oBAAoB,CAAC,IAAI,QAAQ,IAAI,KAAK,MAAM,GAAG;AAC/D,cAAM,MAAM,+DAA+D,KAAK,MAAM;AACtF,cAAM,IAAI,MAAM,GAAG;AAAA,MACvB;AACA,UAAI,IAAI;AACJ,eAAO,GAAG,GAAG;AAAA,IACrB;AACA,WAAO;AAAA,EACX;AACJ;AACA,SAAS,cAAc,KAAK,MAAM,SAAS;AACvC,MAAI,QAAQ,IAAI,GAAG;AACf,UAAM,SAAS,KAAK,QAAQ,GAAG;AAC/B,UAAM,SAAS,WAAW,UAAU,QAAQ,IAAI,MAAM;AACtD,WAAO,SAAS,OAAO,QAAQ,OAAO,aAAa;AAAA,EACvD,WACS,aAAa,IAAI,GAAG;AACzB,QAAI,QAAQ;AACZ,eAAW,QAAQ,KAAK,OAAO;AAC3B,YAAM,IAAI,cAAc,KAAK,MAAM,OAAO;AAC1C,UAAI,IAAI;AACJ,gBAAQ;AAAA,IAChB;AACA,WAAO;AAAA,EACX,WACS,OAAO,IAAI,GAAG;AACnB,UAAM,KAAK,cAAc,KAAK,KAAK,KAAK,OAAO;AAC/C,UAAM,KAAK,cAAc,KAAK,KAAK,OAAO,OAAO;AACjD,WAAO,KAAK,IAAI,IAAI,EAAE;AAAA,EAC1B;AACA,SAAO;AACX;;;AC3GA,IAAM,gBAAgB,CAAC,UAAU,CAAC,SAAU,OAAO,UAAU,cAAc,OAAO,UAAU;AAC5F,IAAM,SAAN,cAAqB,SAAS;AAAA,EAC1B,YAAY,OAAO;AACf,UAAM,MAAM;AACZ,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,OAAO,KAAK,KAAK;AACb,YAAO,2BAAK,QAAO,KAAK,QAAQ,KAAK,KAAK,OAAO,KAAK,GAAG;AAAA,EAC7D;AAAA,EACA,WAAW;AACP,WAAO,OAAO,KAAK,KAAK;AAAA,EAC5B;AACJ;AACA,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,QAAQ;AACf,OAAO,eAAe;AACtB,OAAO,eAAe;;;ACjBtB,IAAM,mBAAmB;AACzB,SAAS,cAAc,OAAO,SAAS,MAAM;AACzC,MAAI,SAAS;AACT,UAAM,QAAQ,KAAK,OAAO,OAAK,EAAE,QAAQ,OAAO;AAChD,UAAM,SAAS,MAAM,KAAK,OAAK,CAAC,EAAE,MAAM,KAAK,MAAM,CAAC;AACpD,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,OAAO,OAAO,YAAY;AAC9C,WAAO;AAAA,EACX;AACA,SAAO,KAAK,KAAK,OAAE;AAbvB;AAa0B,oBAAE,aAAF,2BAAa,WAAU,CAAC,EAAE;AAAA,GAAM;AAC1D;AACA,SAAS,WAAW,OAAO,SAAS,KAAK;AAfzC;AAgBI,MAAI,WAAW,KAAK;AAChB,YAAQ,MAAM;AAClB,MAAI,OAAO,KAAK;AACZ,WAAO;AACX,MAAI,OAAO,KAAK,GAAG;AACf,UAAMC,QAAM,eAAI,OAAO,GAAG,GAAE,eAAhB,4BAA6B,IAAI,QAAQ,MAAM;AAC3D,IAAAA,KAAI,MAAM,KAAK,KAAK;AACpB,WAAOA;AAAA,EACX;AACA,MAAI,iBAAiB,UACjB,iBAAiB,UACjB,iBAAiB,WAChB,OAAO,WAAW,eAAe,iBAAiB,QACrD;AAEE,YAAQ,MAAM,QAAQ;AAAA,EAC1B;AACA,QAAM,EAAE,uBAAuB,UAAU,UAAU,QAAAC,SAAQ,cAAc,IAAI;AAG7E,MAAI,MAAM;AACV,MAAI,yBAAyB,SAAS,OAAO,UAAU,UAAU;AAC7D,UAAM,cAAc,IAAI,KAAK;AAC7B,QAAI,KAAK;AACL,UAAI,WAAW,IAAI,SAAS,SAAS,KAAK;AAC1C,aAAO,IAAI,MAAM,IAAI,MAAM;AAAA,IAC/B,OACK;AACD,YAAM,EAAE,QAAQ,MAAM,MAAM,KAAK;AACjC,oBAAc,IAAI,OAAO,GAAG;AAAA,IAChC;AAAA,EACJ;AACA,MAAI,mCAAS,WAAW;AACpB,cAAU,mBAAmB,QAAQ,MAAM,CAAC;AAChD,MAAI,SAAS,cAAc,OAAO,SAASA,QAAO,IAAI;AACtD,MAAI,CAAC,QAAQ;AACT,QAAI,SAAS,OAAO,MAAM,WAAW,YAAY;AAE7C,cAAQ,MAAM,OAAO;AAAA,IACzB;AACA,QAAI,CAAC,SAAS,OAAO,UAAU,UAAU;AACrC,YAAMC,QAAO,IAAI,OAAO,KAAK;AAC7B,UAAI;AACA,YAAI,OAAOA;AACf,aAAOA;AAAA,IACX;AACA,aACI,iBAAiB,MACXD,QAAO,GAAG,IACV,OAAO,YAAY,OAAO,KAAK,IAC3BA,QAAO,GAAG,IACVA,QAAO,GAAG;AAAA,EAC5B;AACA,MAAI,UAAU;AACV,aAAS,MAAM;AACf,WAAO,IAAI;AAAA,EACf;AACA,QAAM,QAAO,iCAAQ,cACf,OAAO,WAAW,IAAI,QAAQ,OAAO,GAAG,IACxC,SAAO,sCAAQ,cAAR,mBAAmB,UAAS,aAC/B,OAAO,UAAU,KAAK,IAAI,QAAQ,OAAO,GAAG,IAC5C,IAAI,OAAO,KAAK;AAC1B,MAAI;AACA,SAAK,MAAM;AAAA,WACN,CAAC,OAAO;AACb,SAAK,MAAM,OAAO;AACtB,MAAI;AACA,QAAI,OAAO;AACf,SAAO;AACX;;;ACjFA,SAAS,mBAAmBE,SAAQ,MAAM,OAAO;AAC7C,MAAI,IAAI;AACR,WAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACvC,UAAM,IAAI,KAAK,CAAC;AAChB,QAAI,OAAO,MAAM,YAAY,OAAO,UAAU,CAAC,KAAK,KAAK,GAAG;AACxD,YAAM,IAAI,CAAC;AACX,QAAE,CAAC,IAAI;AACP,UAAI;AAAA,IACR,OACK;AACD,UAAI,oBAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAAA,IACxB;AAAA,EACJ;AACA,SAAO,WAAW,GAAG,QAAW;AAAA,IAC5B,uBAAuB;AAAA,IACvB,eAAe;AAAA,IACf,UAAU,MAAM;AACZ,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAClE;AAAA,IACA,QAAAA;AAAA,IACA,eAAe,oBAAI,IAAI;AAAA,EAC3B,CAAC;AACL;AAGA,IAAM,cAAc,CAAC,SAAS,QAAQ,QACjC,OAAO,SAAS,YAAY,CAAC,CAAC,KAAK,OAAO,QAAQ,EAAE,EAAE,KAAK,EAAE;AAClE,IAAM,aAAN,cAAyB,SAAS;AAAA,EAC9B,YAAY,MAAMA,SAAQ;AACtB,UAAM,IAAI;AACV,WAAO,eAAe,MAAM,UAAU;AAAA,MAClC,OAAOA;AAAA,MACP,cAAc;AAAA,MACd,YAAY;AAAA,MACZ,UAAU;AAAA,IACd,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAMA,SAAQ;AACV,UAAM,OAAO,OAAO,OAAO,OAAO,eAAe,IAAI,GAAG,OAAO,0BAA0B,IAAI,CAAC;AAC9F,QAAIA;AACA,WAAK,SAASA;AAClB,SAAK,QAAQ,KAAK,MAAM,IAAI,QAAM,OAAO,EAAE,KAAK,OAAO,EAAE,IAAI,GAAG,MAAMA,OAAM,IAAI,EAAE;AAClF,QAAI,KAAK;AACL,WAAK,QAAQ,KAAK,MAAM,MAAM;AAClC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,MAAM,OAAO;AACf,QAAI,YAAY,IAAI;AAChB,WAAK,IAAI,KAAK;AAAA,SACb;AACD,YAAM,CAAC,KAAK,GAAG,IAAI,IAAI;AACvB,YAAM,OAAO,KAAK,IAAI,KAAK,IAAI;AAC/B,UAAI,aAAa,IAAI;AACjB,aAAK,MAAM,MAAM,KAAK;AAAA,eACjB,SAAS,UAAa,KAAK;AAChC,aAAK,IAAI,KAAK,mBAAmB,KAAK,QAAQ,MAAM,KAAK,CAAC;AAAA;AAE1D,cAAM,IAAI,MAAM,+BAA+B,GAAG,qBAAqB,IAAI,EAAE;AAAA,IACrF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,MAAM;AACX,UAAM,CAAC,KAAK,GAAG,IAAI,IAAI;AACvB,QAAI,KAAK,WAAW;AAChB,aAAO,KAAK,OAAO,GAAG;AAC1B,UAAM,OAAO,KAAK,IAAI,KAAK,IAAI;AAC/B,QAAI,aAAa,IAAI;AACjB,aAAO,KAAK,SAAS,IAAI;AAAA;AAEzB,YAAM,IAAI,MAAM,+BAA+B,GAAG,qBAAqB,IAAI,EAAE;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,MAAM,YAAY;AACpB,UAAM,CAAC,KAAK,GAAG,IAAI,IAAI;AACvB,UAAM,OAAO,KAAK,IAAI,KAAK,IAAI;AAC/B,QAAI,KAAK,WAAW;AAChB,aAAO,CAAC,cAAc,SAAS,IAAI,IAAI,KAAK,QAAQ;AAAA;AAEpD,aAAO,aAAa,IAAI,IAAI,KAAK,MAAM,MAAM,UAAU,IAAI;AAAA,EACnE;AAAA,EACA,iBAAiB,aAAa;AAC1B,WAAO,KAAK,MAAM,MAAM,UAAQ;AAC5B,UAAI,CAAC,OAAO,IAAI;AACZ,eAAO;AACX,YAAM,IAAI,KAAK;AACf,aAAQ,KAAK,QACR,eACG,SAAS,CAAC,KACV,EAAE,SAAS,QACX,CAAC,EAAE,iBACH,CAAC,EAAE,WACH,CAAC,EAAE;AAAA,IACf,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,MAAM,MAAM;AACR,UAAM,CAAC,KAAK,GAAG,IAAI,IAAI;AACvB,QAAI,KAAK,WAAW;AAChB,aAAO,KAAK,IAAI,GAAG;AACvB,UAAM,OAAO,KAAK,IAAI,KAAK,IAAI;AAC/B,WAAO,aAAa,IAAI,IAAI,KAAK,MAAM,IAAI,IAAI;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,OAAO;AACf,UAAM,CAAC,KAAK,GAAG,IAAI,IAAI;AACvB,QAAI,KAAK,WAAW,GAAG;AACnB,WAAK,IAAI,KAAK,KAAK;AAAA,IACvB,OACK;AACD,YAAM,OAAO,KAAK,IAAI,KAAK,IAAI;AAC/B,UAAI,aAAa,IAAI;AACjB,aAAK,MAAM,MAAM,KAAK;AAAA,eACjB,SAAS,UAAa,KAAK;AAChC,aAAK,IAAI,KAAK,mBAAmB,KAAK,QAAQ,MAAM,KAAK,CAAC;AAAA;AAE1D,cAAM,IAAI,MAAM,+BAA+B,GAAG,qBAAqB,IAAI,EAAE;AAAA,IACrF;AAAA,EACJ;AACJ;;;ACzIA,IAAM,mBAAmB,CAAC,QAAQ,IAAI,QAAQ,mBAAmB,GAAG;AACpE,SAAS,cAAc,SAAS,QAAQ;AACpC,MAAI,QAAQ,KAAK,OAAO;AACpB,WAAO,QAAQ,UAAU,CAAC;AAC9B,SAAO,SAAS,QAAQ,QAAQ,cAAc,MAAM,IAAI;AAC5D;AACA,IAAM,cAAc,CAAC,KAAK,QAAQ,YAAY,IAAI,SAAS,IAAI,IACzD,cAAc,SAAS,MAAM,IAC7B,QAAQ,SAAS,IAAI,IACjB,OAAO,cAAc,SAAS,MAAM,KACnC,IAAI,SAAS,GAAG,IAAI,KAAK,OAAO;;;ACjB3C,IAAM,YAAY;AAClB,IAAM,aAAa;AACnB,IAAM,cAAc;AAMpB,SAAS,cAAc,MAAM,QAAQ,OAAO,QAAQ,EAAE,eAAe,YAAY,IAAI,kBAAkB,IAAI,QAAQ,WAAW,IAAI,CAAC,GAAG;AAClI,MAAI,CAAC,aAAa,YAAY;AAC1B,WAAO;AACX,MAAI,YAAY;AACZ,sBAAkB;AACtB,QAAM,UAAU,KAAK,IAAI,IAAI,iBAAiB,IAAI,YAAY,OAAO,MAAM;AAC3E,MAAI,KAAK,UAAU;AACf,WAAO;AACX,QAAM,QAAQ,CAAC;AACf,QAAM,eAAe,CAAC;AACtB,MAAI,MAAM,YAAY,OAAO;AAC7B,MAAI,OAAO,kBAAkB,UAAU;AACnC,QAAI,gBAAgB,YAAY,KAAK,IAAI,GAAG,eAAe;AACvD,YAAM,KAAK,CAAC;AAAA;AAEZ,YAAM,YAAY;AAAA,EAC1B;AACA,MAAI,QAAQ;AACZ,MAAI,OAAO;AACX,MAAI,WAAW;AACf,MAAI,IAAI;AACR,MAAI,WAAW;AACf,MAAI,SAAS;AACb,MAAI,SAAS,YAAY;AACrB,QAAI,yBAAyB,MAAM,GAAG,OAAO,MAAM;AACnD,QAAI,MAAM;AACN,YAAM,IAAI;AAAA,EAClB;AACA,WAAS,IAAK,KAAK,KAAM,KAAK,CAAE,KAAK;AACjC,QAAI,SAAS,eAAe,OAAO,MAAM;AACrC,iBAAW;AACX,cAAQ,KAAK,IAAI,CAAC,GAAG;AAAA,QACjB,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ;AACI,eAAK;AAAA,MACb;AACA,eAAS;AAAA,IACb;AACA,QAAI,OAAO,MAAM;AACb,UAAI,SAAS;AACT,YAAI,yBAAyB,MAAM,GAAG,OAAO,MAAM;AACvD,YAAM,IAAI,OAAO,SAAS;AAC1B,cAAQ;AAAA,IACZ,OACK;AACD,UAAI,OAAO,OACP,QACA,SAAS,OACT,SAAS,QACT,SAAS,KAAM;AAEf,cAAM,OAAO,KAAK,IAAI,CAAC;AACvB,YAAI,QAAQ,SAAS,OAAO,SAAS,QAAQ,SAAS;AAClD,kBAAQ;AAAA,MAChB;AACA,UAAI,KAAK,KAAK;AACV,YAAI,OAAO;AACP,gBAAM,KAAK,KAAK;AAChB,gBAAM,QAAQ;AACd,kBAAQ;AAAA,QACZ,WACS,SAAS,aAAa;AAE3B,iBAAO,SAAS,OAAO,SAAS,KAAM;AAClC,mBAAO;AACP,iBAAK,KAAM,KAAK,CAAE;AAClB,uBAAW;AAAA,UACf;AAEA,gBAAM,IAAI,IAAI,SAAS,IAAI,IAAI,IAAI,WAAW;AAE9C,cAAI,aAAa,CAAC;AACd,mBAAO;AACX,gBAAM,KAAK,CAAC;AACZ,uBAAa,CAAC,IAAI;AAClB,gBAAM,IAAI;AACV,kBAAQ;AAAA,QACZ,OACK;AACD,qBAAW;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,MAAI,YAAY;AACZ,eAAW;AACf,MAAI,MAAM,WAAW;AACjB,WAAO;AACX,MAAI;AACA,WAAO;AACX,MAAI,MAAM,KAAK,MAAM,GAAG,MAAM,CAAC,CAAC;AAChC,WAASC,KAAI,GAAGA,KAAI,MAAM,QAAQ,EAAEA,IAAG;AACnC,UAAM,OAAO,MAAMA,EAAC;AACpB,UAAMC,OAAM,MAAMD,KAAI,CAAC,KAAK,KAAK;AACjC,QAAI,SAAS;AACT,YAAM;AAAA,EAAK,MAAM,GAAG,KAAK,MAAM,GAAGC,IAAG,CAAC;AAAA,SACrC;AACD,UAAI,SAAS,eAAe,aAAa,IAAI;AACzC,eAAO,GAAG,KAAK,IAAI,CAAC;AACxB,aAAO;AAAA,EAAK,MAAM,GAAG,KAAK,MAAM,OAAO,GAAGA,IAAG,CAAC;AAAA,IAClD;AAAA,EACJ;AACA,SAAO;AACX;AAKA,SAAS,yBAAyB,MAAM,GAAG,QAAQ;AAC/C,MAAI,MAAM;AACV,MAAI,QAAQ,IAAI;AAChB,MAAI,KAAK,KAAK,KAAK;AACnB,SAAO,OAAO,OAAO,OAAO,KAAM;AAC9B,QAAI,IAAI,QAAQ,QAAQ;AACpB,WAAK,KAAK,EAAE,CAAC;AAAA,IACjB,OACK;AACD,SAAG;AACC,aAAK,KAAK,EAAE,CAAC;AAAA,MACjB,SAAS,MAAM,OAAO;AACtB,YAAM;AACN,cAAQ,IAAI;AACZ,WAAK,KAAK,KAAK;AAAA,IACnB;AAAA,EACJ;AACA,SAAO;AACX;;;AC5IA,IAAM,iBAAiB,CAAC,KAAKC,cAAa;AAAA,EACtC,eAAeA,WAAU,IAAI,OAAO,SAAS,IAAI;AAAA,EACjD,WAAW,IAAI,QAAQ;AAAA,EACvB,iBAAiB,IAAI,QAAQ;AACjC;AAGA,IAAM,yBAAyB,CAAC,QAAQ,mBAAmB,KAAK,GAAG;AACnE,SAAS,oBAAoB,KAAK,WAAW,cAAc;AACvD,MAAI,CAAC,aAAa,YAAY;AAC1B,WAAO;AACX,QAAM,QAAQ,YAAY;AAC1B,QAAM,SAAS,IAAI;AACnB,MAAI,UAAU;AACV,WAAO;AACX,WAAS,IAAI,GAAG,QAAQ,GAAG,IAAI,QAAQ,EAAE,GAAG;AACxC,QAAI,IAAI,CAAC,MAAM,MAAM;AACjB,UAAI,IAAI,QAAQ;AACZ,eAAO;AACX,cAAQ,IAAI;AACZ,UAAI,SAAS,SAAS;AAClB,eAAO;AAAA,IACf;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,mBAAmB,OAAO,KAAK;AACpC,QAAM,OAAO,KAAK,UAAU,KAAK;AACjC,MAAI,IAAI,QAAQ;AACZ,WAAO;AACX,QAAM,EAAE,YAAY,IAAI;AACxB,QAAM,qBAAqB,IAAI,QAAQ;AACvC,QAAM,SAAS,IAAI,WAAW,uBAAuB,KAAK,IAAI,OAAO;AACrE,MAAI,MAAM;AACV,MAAI,QAAQ;AACZ,WAAS,IAAI,GAAG,KAAK,KAAK,CAAC,GAAG,IAAI,KAAK,KAAK,EAAE,CAAC,GAAG;AAC9C,QAAI,OAAO,OAAO,KAAK,IAAI,CAAC,MAAM,QAAQ,KAAK,IAAI,CAAC,MAAM,KAAK;AAE3D,aAAO,KAAK,MAAM,OAAO,CAAC,IAAI;AAC9B,WAAK;AACL,cAAQ;AACR,WAAK;AAAA,IACT;AACA,QAAI,OAAO;AACP,cAAQ,KAAK,IAAI,CAAC,GAAG;AAAA,QACjB,KAAK;AACD;AACI,mBAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,kBAAM,OAAO,KAAK,OAAO,IAAI,GAAG,CAAC;AACjC,oBAAQ,MAAM;AAAA,cACV,KAAK;AACD,uBAAO;AACP;AAAA,cACJ,KAAK;AACD,uBAAO;AACP;AAAA,cACJ,KAAK;AACD,uBAAO;AACP;AAAA,cACJ,KAAK;AACD,uBAAO;AACP;AAAA,cACJ,KAAK;AACD,uBAAO;AACP;AAAA,cACJ,KAAK;AACD,uBAAO;AACP;AAAA,cACJ,KAAK;AACD,uBAAO;AACP;AAAA,cACJ,KAAK;AACD,uBAAO;AACP;AAAA,cACJ;AACI,oBAAI,KAAK,OAAO,GAAG,CAAC,MAAM;AACtB,yBAAO,QAAQ,KAAK,OAAO,CAAC;AAAA;AAE5B,yBAAO,KAAK,OAAO,GAAG,CAAC;AAAA,YACnC;AACA,iBAAK;AACL,oBAAQ,IAAI;AAAA,UAChB;AACA;AAAA,QACJ,KAAK;AACD,cAAI,eACA,KAAK,IAAI,CAAC,MAAM,OAChB,KAAK,SAAS,oBAAoB;AAClC,iBAAK;AAAA,UACT,OACK;AAED,mBAAO,KAAK,MAAM,OAAO,CAAC,IAAI;AAC9B,mBAAO,KAAK,IAAI,CAAC,MAAM,QACnB,KAAK,IAAI,CAAC,MAAM,OAChB,KAAK,IAAI,CAAC,MAAM,KAAK;AACrB,qBAAO;AACP,mBAAK;AAAA,YACT;AACA,mBAAO;AAEP,gBAAI,KAAK,IAAI,CAAC,MAAM;AAChB,qBAAO;AACX,iBAAK;AACL,oBAAQ,IAAI;AAAA,UAChB;AACA;AAAA,QACJ;AACI,eAAK;AAAA,MACb;AAAA,EACR;AACA,QAAM,QAAQ,MAAM,KAAK,MAAM,KAAK,IAAI;AACxC,SAAO,cACD,MACA,cAAc,KAAK,QAAQ,aAAa,eAAe,KAAK,KAAK,CAAC;AAC5E;AACA,SAAS,mBAAmB,OAAO,KAAK;AACpC,MAAI,IAAI,QAAQ,gBAAgB,SAC3B,IAAI,eAAe,MAAM,SAAS,IAAI,KACvC,kBAAkB,KAAK,KAAK;AAE5B,WAAO,mBAAmB,OAAO,GAAG;AACxC,QAAM,SAAS,IAAI,WAAW,uBAAuB,KAAK,IAAI,OAAO;AACrE,QAAM,MAAM,MAAM,MAAM,QAAQ,MAAM,IAAI,EAAE,QAAQ,QAAQ;AAAA,EAAO,MAAM,EAAE,IAAI;AAC/E,SAAO,IAAI,cACL,MACA,cAAc,KAAK,QAAQ,WAAW,eAAe,KAAK,KAAK,CAAC;AAC1E;AACA,SAAS,aAAa,OAAO,KAAK;AAC9B,QAAM,EAAE,YAAY,IAAI,IAAI;AAC5B,MAAI;AACJ,MAAI,gBAAgB;AAChB,SAAK;AAAA,OACJ;AACD,UAAM,YAAY,MAAM,SAAS,GAAG;AACpC,UAAM,YAAY,MAAM,SAAS,GAAG;AACpC,QAAI,aAAa,CAAC;AACd,WAAK;AAAA,aACA,aAAa,CAAC;AACnB,WAAK;AAAA;AAEL,WAAK,cAAc,qBAAqB;AAAA,EAChD;AACA,SAAO,GAAG,OAAO,GAAG;AACxB;AAGA,IAAI;AACJ,IAAI;AACA,qBAAmB,IAAI,OAAO,0BAA0B,GAAG;AAC/D,QACM;AACF,qBAAmB;AACvB;AACA,SAAS,YAAY,EAAE,SAAS,MAAM,MAAM,GAAG,KAAK,WAAW,aAAa;AACxE,QAAM,EAAE,YAAY,eAAe,UAAU,IAAI,IAAI;AAGrD,MAAI,CAAC,cAAc,YAAY,KAAK,KAAK,KAAK,QAAQ,KAAK,KAAK,GAAG;AAC/D,WAAO,aAAa,OAAO,GAAG;AAAA,EAClC;AACA,QAAM,SAAS,IAAI,WACd,IAAI,oBAAoB,uBAAuB,KAAK,IAAI,OAAO;AACpE,QAAM,UAAU,eAAe,YACzB,OACA,eAAe,YAAY,SAAS,OAAO,eACvC,QACA,SAAS,OAAO,gBACZ,OACA,CAAC,oBAAoB,OAAO,WAAW,OAAO,MAAM;AAClE,MAAI,CAAC;AACD,WAAO,UAAU,QAAQ;AAE7B,MAAI;AACJ,MAAI;AACJ,OAAK,WAAW,MAAM,QAAQ,WAAW,GAAG,EAAE,UAAU;AACpD,UAAM,KAAK,MAAM,WAAW,CAAC;AAC7B,QAAI,OAAO,QAAQ,OAAO,OAAQ,OAAO;AACrC;AAAA,EACR;AACA,MAAI,MAAM,MAAM,UAAU,QAAQ;AAClC,QAAM,WAAW,IAAI,QAAQ,IAAI;AACjC,MAAI,aAAa,IAAI;AACjB,YAAQ;AAAA,EACZ,WACS,UAAU,OAAO,aAAa,IAAI,SAAS,GAAG;AACnD,YAAQ;AACR,QAAI;AACA,kBAAY;AAAA,EACpB,OACK;AACD,YAAQ;AAAA,EACZ;AACA,MAAI,KAAK;AACL,YAAQ,MAAM,MAAM,GAAG,CAAC,IAAI,MAAM;AAClC,QAAI,IAAI,IAAI,SAAS,CAAC,MAAM;AACxB,YAAM,IAAI,MAAM,GAAG,EAAE;AACzB,UAAM,IAAI,QAAQ,kBAAkB,KAAK,MAAM,EAAE;AAAA,EACrD;AAEA,MAAI,iBAAiB;AACrB,MAAI;AACJ,MAAI,aAAa;AACjB,OAAK,WAAW,GAAG,WAAW,MAAM,QAAQ,EAAE,UAAU;AACpD,UAAM,KAAK,MAAM,QAAQ;AACzB,QAAI,OAAO;AACP,uBAAiB;AAAA,aACZ,OAAO;AACZ,mBAAa;AAAA;AAEb;AAAA,EACR;AACA,MAAI,QAAQ,MAAM,UAAU,GAAG,aAAa,WAAW,aAAa,IAAI,QAAQ;AAChF,MAAI,OAAO;AACP,YAAQ,MAAM,UAAU,MAAM,MAAM;AACpC,YAAQ,MAAM,QAAQ,QAAQ,KAAK,MAAM,EAAE;AAAA,EAC/C;AACA,QAAM,aAAa,SAAS,MAAM;AAElC,MAAI,UAAU,iBAAiB,aAAa,MAAM;AAClD,MAAI,SAAS;AACT,cAAU,MAAM,cAAc,QAAQ,QAAQ,cAAc,GAAG,CAAC;AAChE,QAAI;AACA,gBAAU;AAAA,EAClB;AACA,MAAI,CAAC,SAAS;AACV,UAAM,cAAc,MACf,QAAQ,QAAQ,MAAM,EACtB,QAAQ,kDAAkD,MAAM,EAEhE,QAAQ,QAAQ,KAAK,MAAM,EAAE;AAClC,QAAI,kBAAkB;AACtB,UAAM,cAAc,eAAe,KAAK,IAAI;AAC5C,QAAI,eAAe,YAAY,SAAS,OAAO,cAAc;AACzD,kBAAY,aAAa,MAAM;AAC3B,0BAAkB;AAAA,MACtB;AAAA,IACJ;AACA,UAAM,OAAO,cAAc,GAAG,KAAK,GAAG,WAAW,GAAG,GAAG,IAAI,QAAQ,YAAY,WAAW;AAC1F,QAAI,CAAC;AACD,aAAO,IAAI,MAAM;AAAA,EAAK,MAAM,GAAG,IAAI;AAAA,EAC3C;AACA,UAAQ,MAAM,QAAQ,QAAQ,KAAK,MAAM,EAAE;AAC3C,SAAO,IAAI,MAAM;AAAA,EAAK,MAAM,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG;AACtD;AACA,SAAS,YAAY,MAAM,KAAK,WAAW,aAAa;AACpD,QAAM,EAAE,MAAM,MAAM,IAAI;AACxB,QAAM,EAAE,cAAc,aAAa,QAAQ,YAAY,OAAO,IAAI;AAClE,MAAK,eAAe,MAAM,SAAS,IAAI,KAClC,UAAU,WAAW,KAAK,KAAK,GAAI;AACpC,WAAO,aAAa,OAAO,GAAG;AAAA,EAClC;AACA,MAAI,oFAAoF,KAAK,KAAK,GAAG;AAOjG,WAAO,eAAe,UAAU,CAAC,MAAM,SAAS,IAAI,IAC9C,aAAa,OAAO,GAAG,IACvB,YAAY,MAAM,KAAK,WAAW,WAAW;AAAA,EACvD;AACA,MAAI,CAAC,eACD,CAAC,UACD,SAAS,OAAO,SAChB,MAAM,SAAS,IAAI,GAAG;AAEtB,WAAO,YAAY,MAAM,KAAK,WAAW,WAAW;AAAA,EACxD;AACA,MAAI,uBAAuB,KAAK,GAAG;AAC/B,QAAI,WAAW,IAAI;AACf,UAAI,mBAAmB;AACvB,aAAO,YAAY,MAAM,KAAK,WAAW,WAAW;AAAA,IACxD,WACS,eAAe,WAAW,YAAY;AAC3C,aAAO,aAAa,OAAO,GAAG;AAAA,IAClC;AAAA,EACJ;AACA,QAAM,MAAM,MAAM,QAAQ,QAAQ;AAAA,EAAO,MAAM,EAAE;AAIjD,MAAI,cAAc;AACd,UAAM,OAAO,CAAC,QAAK;AA/R3B;AA+R8B,iBAAI,WAAW,IAAI,QAAQ,6BAA2B,SAAI,SAAJ,mBAAU,KAAK;AAAA;AAC3F,UAAM,EAAE,QAAQ,KAAK,IAAI,IAAI,IAAI;AACjC,QAAI,KAAK,KAAK,IAAI,MAAK,iCAAQ,KAAK;AAChC,aAAO,aAAa,OAAO,GAAG;AAAA,EACtC;AACA,SAAO,cACD,MACA,cAAc,KAAK,QAAQ,WAAW,eAAe,KAAK,KAAK,CAAC;AAC1E;AACA,SAAS,gBAAgB,MAAM,KAAK,WAAW,aAAa;AACxD,QAAM,EAAE,aAAa,OAAO,IAAI;AAChC,QAAM,KAAK,OAAO,KAAK,UAAU,WAC3B,OACA,OAAO,OAAO,CAAC,GAAG,MAAM,EAAE,OAAO,OAAO,KAAK,KAAK,EAAE,CAAC;AAC3D,MAAI,EAAE,KAAK,IAAI;AACf,MAAI,SAAS,OAAO,cAAc;AAE9B,QAAI,kDAAkD,KAAK,GAAG,KAAK;AAC/D,aAAO,OAAO;AAAA,EACtB;AACA,QAAM,aAAa,CAAC,UAAU;AAC1B,YAAQ,OAAO;AAAA,MACX,KAAK,OAAO;AAAA,MACZ,KAAK,OAAO;AACR,eAAO,eAAe,SAChB,aAAa,GAAG,OAAO,GAAG,IAC1B,YAAY,IAAI,KAAK,WAAW,WAAW;AAAA,MACrD,KAAK,OAAO;AACR,eAAO,mBAAmB,GAAG,OAAO,GAAG;AAAA,MAC3C,KAAK,OAAO;AACR,eAAO,mBAAmB,GAAG,OAAO,GAAG;AAAA,MAC3C,KAAK,OAAO;AACR,eAAO,YAAY,IAAI,KAAK,WAAW,WAAW;AAAA,MACtD;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AACA,MAAI,MAAM,WAAW,IAAI;AACzB,MAAI,QAAQ,MAAM;AACd,UAAM,EAAE,gBAAgB,kBAAkB,IAAI,IAAI;AAClD,UAAM,IAAK,eAAe,kBAAmB;AAC7C,UAAM,WAAW,CAAC;AAClB,QAAI,QAAQ;AACR,YAAM,IAAI,MAAM,mCAAmC,CAAC,EAAE;AAAA,EAC9D;AACA,SAAO;AACX;;;ACxUA,SAAS,uBAAuB,KAAK,SAAS;AAC1C,QAAM,MAAM,OAAO,OAAO;AAAA,IACtB,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,gBAAgB;AAAA,IAChB,mBAAmB;AAAA,IACnB,YAAY;AAAA,IACZ,oBAAoB;AAAA,IACpB,gCAAgC;AAAA,IAChC,UAAU;AAAA,IACV,uBAAuB;AAAA,IACvB,WAAW;AAAA,IACX,WAAW;AAAA,IACX,iBAAiB;AAAA,IACjB,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,SAAS;AAAA,IACT,kBAAkB;AAAA,EACtB,GAAG,IAAI,OAAO,iBAAiB,OAAO;AACtC,MAAI;AACJ,UAAQ,IAAI,iBAAiB;AAAA,IACzB,KAAK;AACD,eAAS;AACT;AAAA,IACJ,KAAK;AACD,eAAS;AACT;AAAA,IACJ;AACI,eAAS;AAAA,EACjB;AACA,SAAO;AAAA,IACH,SAAS,oBAAI,IAAI;AAAA,IACjB;AAAA,IACA,uBAAuB,IAAI,wBAAwB,MAAM;AAAA,IACzD,QAAQ;AAAA,IACR,YAAY,OAAO,IAAI,WAAW,WAAW,IAAI,OAAO,IAAI,MAAM,IAAI;AAAA,IACtE;AAAA,IACA,SAAS;AAAA,EACb;AACJ;AACA,SAAS,aAAa,MAAM,MAAM;AA9ClC;AA+CI,MAAI,KAAK,KAAK;AACV,UAAM,QAAQ,KAAK,OAAO,OAAK,EAAE,QAAQ,KAAK,GAAG;AACjD,QAAI,MAAM,SAAS;AACf,aAAO,MAAM,KAAK,OAAK,EAAE,WAAW,KAAK,MAAM,KAAK,MAAM,CAAC;AAAA,EACnE;AACA,MAAI,SAAS;AACb,MAAI;AACJ,MAAI,SAAS,IAAI,GAAG;AAChB,UAAM,KAAK;AACX,QAAI,QAAQ,KAAK,OAAO,OAAE;AAxDlC,UAAAC;AAwDqC,cAAAA,MAAA,EAAE,aAAF,gBAAAA,IAAA,QAAa;AAAA,KAAI;AAC9C,QAAI,MAAM,SAAS,GAAG;AAClB,YAAM,YAAY,MAAM,OAAO,OAAK,EAAE,IAAI;AAC1C,UAAI,UAAU,SAAS;AACnB,gBAAQ;AAAA,IAChB;AACA,aACI,MAAM,KAAK,OAAK,EAAE,WAAW,KAAK,MAAM,KAAK,MAAM,KAAK,OAAK,CAAC,EAAE,MAAM;AAAA,EAC9E,OACK;AACD,UAAM;AACN,aAAS,KAAK,KAAK,OAAK,EAAE,aAAa,eAAe,EAAE,SAAS;AAAA,EACrE;AACA,MAAI,CAAC,QAAQ;AACT,UAAM,SAAO,gCAAK,gBAAL,mBAAkB,UAAS,QAAQ,OAAO,SAAS,OAAO;AACvE,UAAM,IAAI,MAAM,wBAAwB,IAAI,QAAQ;AAAA,EACxD;AACA,SAAO;AACX;AAEA,SAAS,eAAe,MAAM,QAAQ,EAAE,SAAS,IAAI,GAAG;AACpD,MAAI,CAAC,IAAI;AACL,WAAO;AACX,QAAM,QAAQ,CAAC;AACf,QAAM,UAAU,SAAS,IAAI,KAAK,aAAa,IAAI,MAAM,KAAK;AAC9D,MAAI,UAAU,cAAc,MAAM,GAAG;AACjC,YAAQ,IAAI,MAAM;AAClB,UAAM,KAAK,IAAI,MAAM,EAAE;AAAA,EAC3B;AACA,QAAM,MAAM,KAAK,QAAQ,OAAO,UAAU,OAAO,OAAO;AACxD,MAAI;AACA,UAAM,KAAK,IAAI,WAAW,UAAU,GAAG,CAAC;AAC5C,SAAO,MAAM,KAAK,GAAG;AACzB;AACA,SAAS,UAAU,MAAM,KAAK,WAAW,aAAa;AA1FtD;AA2FI,MAAI,OAAO,IAAI;AACX,WAAO,KAAK,SAAS,KAAK,WAAW,WAAW;AACpD,MAAI,QAAQ,IAAI,GAAG;AACf,QAAI,IAAI,IAAI;AACR,aAAO,KAAK,SAAS,GAAG;AAC5B,SAAI,SAAI,oBAAJ,mBAAqB,IAAI,OAAO;AAChC,YAAM,IAAI,UAAU,yDAAyD;AAAA,IACjF,OACK;AACD,UAAI,IAAI;AACJ,YAAI,gBAAgB,IAAI,IAAI;AAAA;AAE5B,YAAI,kBAAkB,oBAAI,IAAI,CAAC,IAAI,CAAC;AACxC,aAAO,KAAK,QAAQ,IAAI,GAAG;AAAA,IAC/B;AAAA,EACJ;AACA,MAAI,SAAS;AACb,QAAM,OAAO,OAAO,IAAI,IAClB,OACA,IAAI,IAAI,WAAW,MAAM,EAAE,UAAU,OAAM,SAAS,EAAG,CAAC;AAC9D,aAAW,SAAS,aAAa,IAAI,IAAI,OAAO,MAAM,IAAI;AAC1D,QAAM,QAAQ,eAAe,MAAM,QAAQ,GAAG;AAC9C,MAAI,MAAM,SAAS;AACf,QAAI,iBAAiB,IAAI,iBAAiB,KAAK,MAAM,SAAS;AAClE,QAAM,MAAM,OAAO,OAAO,cAAc,aAClC,OAAO,UAAU,MAAM,KAAK,WAAW,WAAW,IAClD,SAAS,IAAI,IACT,gBAAgB,MAAM,KAAK,WAAW,WAAW,IACjD,KAAK,SAAS,KAAK,WAAW,WAAW;AACnD,MAAI,CAAC;AACD,WAAO;AACX,SAAO,SAAS,IAAI,KAAK,IAAI,CAAC,MAAM,OAAO,IAAI,CAAC,MAAM,MAChD,GAAG,KAAK,IAAI,GAAG,KACf,GAAG,KAAK;AAAA,EAAK,IAAI,MAAM,GAAG,GAAG;AACvC;;;ACxHA,SAAS,cAAc,EAAE,KAAK,MAAM,GAAG,KAAK,WAAW,aAAa;AAChE,QAAM,EAAE,eAAe,KAAK,QAAQ,YAAY,SAAS,EAAE,eAAe,WAAW,WAAW,EAAE,IAAI;AACtG,MAAI,aAAc,OAAO,GAAG,KAAK,IAAI,WAAY;AACjD,MAAI,YAAY;AACZ,QAAI,YAAY;AACZ,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACtE;AACA,QAAI,aAAa,GAAG,KAAM,CAAC,OAAO,GAAG,KAAK,OAAO,QAAQ,UAAW;AAChE,YAAM,MAAM;AACZ,YAAM,IAAI,MAAM,GAAG;AAAA,IACvB;AAAA,EACJ;AACA,MAAI,cAAc,CAAC,eACd,CAAC,OACG,cAAc,SAAS,QAAQ,CAAC,IAAI,UACrC,aAAa,GAAG,MACf,SAAS,GAAG,IACP,IAAI,SAAS,OAAO,gBAAgB,IAAI,SAAS,OAAO,gBACxD,OAAO,QAAQ;AAC7B,QAAM,OAAO,OAAO,CAAC,GAAG,KAAK;AAAA,IACzB,eAAe;AAAA,IACf,aAAa,CAAC,gBAAgB,cAAc,CAAC;AAAA,IAC7C,QAAQ,SAAS;AAAA,EACrB,CAAC;AACD,MAAI,iBAAiB;AACrB,MAAI,YAAY;AAChB,MAAI,MAAM,UAAU,KAAK,KAAK,MAAO,iBAAiB,MAAO,MAAO,YAAY,IAAK;AACrF,MAAI,CAAC,eAAe,CAAC,IAAI,UAAU,IAAI,SAAS,MAAM;AAClD,QAAI;AACA,YAAM,IAAI,MAAM,8EAA8E;AAClG,kBAAc;AAAA,EAClB;AACA,MAAI,IAAI,QAAQ;AACZ,QAAI,iBAAiB,SAAS,MAAM;AAChC,UAAI,kBAAkB;AAClB,kBAAU;AACd,aAAO,QAAQ,KAAK,MAAM,cAAc,KAAK,GAAG,KAAK;AAAA,IACzD;AAAA,EACJ,WACU,iBAAiB,CAAC,cAAgB,SAAS,QAAQ,aAAc;AACvE,UAAM,KAAK,GAAG;AACd,QAAI,cAAc,CAAC,gBAAgB;AAC/B,aAAO,YAAY,KAAK,IAAI,QAAQ,cAAc,UAAU,CAAC;AAAA,IACjE,WACS,aAAa;AAClB,kBAAY;AAChB,WAAO;AAAA,EACX;AACA,MAAI;AACA,iBAAa;AACjB,MAAI,aAAa;AACb,QAAI;AACA,aAAO,YAAY,KAAK,IAAI,QAAQ,cAAc,UAAU,CAAC;AACjE,UAAM,KAAK,GAAG;AAAA,EAAK,MAAM;AAAA,EAC7B,OACK;AACD,UAAM,GAAG,GAAG;AACZ,QAAI;AACA,aAAO,YAAY,KAAK,IAAI,QAAQ,cAAc,UAAU,CAAC;AAAA,EACrE;AACA,MAAI,KAAK,KAAK;AACd,MAAI,OAAO,KAAK,GAAG;AACf,UAAM,CAAC,CAAC,MAAM;AACd,UAAM,MAAM;AACZ,mBAAe,MAAM;AAAA,EACzB,OACK;AACD,UAAM;AACN,UAAM;AACN,mBAAe;AACf,QAAI,SAAS,OAAO,UAAU;AAC1B,cAAQ,IAAI,WAAW,KAAK;AAAA,EACpC;AACA,MAAI,cAAc;AAClB,MAAI,CAAC,eAAe,CAAC,cAAc,SAAS,KAAK;AAC7C,QAAI,gBAAgB,IAAI,SAAS;AACrC,cAAY;AACZ,MAAI,CAAC,aACD,WAAW,UAAU,KACrB,CAAC,IAAI,UACL,CAAC,eACD,MAAM,KAAK,KACX,CAAC,MAAM,QACP,CAAC,MAAM,OACP,CAAC,MAAM,QAAQ;AAEf,QAAI,SAAS,IAAI,OAAO,UAAU,CAAC;AAAA,EACvC;AACA,MAAI,mBAAmB;AACvB,QAAM,WAAW,UAAU,OAAO,KAAK,MAAO,mBAAmB,MAAO,MAAO,YAAY,IAAK;AAChG,MAAI,KAAK;AACT,MAAI,cAAc,OAAO,KAAK;AAC1B,SAAK,MAAM,OAAO;AAClB,QAAI,KAAK;AACL,YAAM,KAAK,cAAc,GAAG;AAC5B,YAAM;AAAA,EAAK,cAAc,IAAI,IAAI,MAAM,CAAC;AAAA,IAC5C;AACA,QAAI,aAAa,MAAM,CAAC,IAAI,QAAQ;AAChC,UAAI,OAAO;AACP,aAAK;AAAA,IACb,OACK;AACD,YAAM;AAAA,EAAK,IAAI,MAAM;AAAA,IACzB;AAAA,EACJ,WACS,CAAC,eAAe,aAAa,KAAK,GAAG;AAC1C,UAAM,MAAM,SAAS,CAAC;AACtB,UAAM,MAAM,SAAS,QAAQ,IAAI;AACjC,UAAM,aAAa,QAAQ;AAC3B,UAAM,OAAO,IAAI,UAAU,MAAM,QAAQ,MAAM,MAAM,WAAW;AAChE,QAAI,cAAc,CAAC,MAAM;AACrB,UAAI,eAAe;AACnB,UAAI,eAAe,QAAQ,OAAO,QAAQ,MAAM;AAC5C,YAAI,MAAM,SAAS,QAAQ,GAAG;AAC9B,YAAI,QAAQ,OACR,QAAQ,MACR,MAAM,OACN,SAAS,MAAM,CAAC,MAAM,KAAK;AAC3B,gBAAM,SAAS,QAAQ,KAAK,MAAM,CAAC;AAAA,QACvC;AACA,YAAI,QAAQ,MAAM,MAAM;AACpB,yBAAe;AAAA,MACvB;AACA,UAAI,CAAC;AACD,aAAK;AAAA,EAAK,IAAI,MAAM;AAAA,IAC5B;AAAA,EACJ,WACS,aAAa,MAAM,SAAS,CAAC,MAAM,MAAM;AAC9C,SAAK;AAAA,EACT;AACA,SAAO,KAAK;AACZ,MAAI,IAAI,QAAQ;AACZ,QAAI,oBAAoB;AACpB,gBAAU;AAAA,EAClB,WACS,gBAAgB,CAAC,kBAAkB;AACxC,WAAO,YAAY,KAAK,IAAI,QAAQ,cAAc,YAAY,CAAC;AAAA,EACnE,WACS,aAAa,aAAa;AAC/B,gBAAY;AAAA,EAChB;AACA,SAAO;AACX;;;AC/IA,SAAS,KAAK,UAAU,SAAS;AAC7B,MAAI,aAAa,WAAW,aAAa,QAAQ;AAC7C,YAAQ,KAAK,OAAO;AAAA,EACxB;AACJ;;;ACEA,IAAM,YAAY;AAClB,IAAM,QAAQ;AAAA,EACV,UAAU,WAAS,UAAU,aACxB,OAAO,UAAU,YAAY,MAAM,gBAAgB;AAAA,EACxD,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,MAAM,OAAO,OAAO,IAAI,OAAO,OAAO,SAAS,CAAC,GAAG;AAAA,IACxD,YAAY;AAAA,EAChB,CAAC;AAAA,EACD,WAAW,MAAM;AACrB;AACA,IAAM,aAAa,CAAC,KAAK,SAAS,MAAM,SAAS,GAAG,KAC/C,SAAS,GAAG,MACR,CAAC,IAAI,QAAQ,IAAI,SAAS,OAAO,UAClC,MAAM,SAAS,IAAI,KAAK,OAC5B,2BAAK,IAAI,OAAO,KAAK,KAAK,SAAO,IAAI,QAAQ,MAAM,OAAO,IAAI;AAClE,SAAS,gBAAgB,KAAKC,MAAK,OAAO;AACtC,UAAQ,OAAO,QAAQ,KAAK,IAAI,MAAM,QAAQ,IAAI,GAAG,IAAI;AACzD,MAAI,MAAM,KAAK;AACX,eAAW,MAAM,MAAM;AACnB,iBAAW,KAAKA,MAAK,EAAE;AAAA,WACtB,MAAM,QAAQ,KAAK;AACxB,eAAW,MAAM;AACb,iBAAW,KAAKA,MAAK,EAAE;AAAA;AAE3B,eAAW,KAAKA,MAAK,KAAK;AAClC;AACA,SAAS,WAAW,KAAKA,MAAK,OAAO;AACjC,QAAM,SAAS,OAAO,QAAQ,KAAK,IAAI,MAAM,QAAQ,IAAI,GAAG,IAAI;AAChE,MAAI,CAAC,MAAM,MAAM;AACb,UAAM,IAAI,MAAM,2CAA2C;AAC/D,QAAM,SAAS,OAAO,OAAO,MAAM,KAAK,GAAG;AAC3C,aAAW,CAAC,KAAKC,MAAK,KAAK,QAAQ;AAC/B,QAAID,gBAAe,KAAK;AACpB,UAAI,CAACA,KAAI,IAAI,GAAG;AACZ,QAAAA,KAAI,IAAI,KAAKC,MAAK;AAAA,IAC1B,WACSD,gBAAe,KAAK;AACzB,MAAAA,KAAI,IAAI,GAAG;AAAA,IACf,WACS,CAAC,OAAO,UAAU,eAAe,KAAKA,MAAK,GAAG,GAAG;AACtD,aAAO,eAAeA,MAAK,KAAK;AAAA,QAC5B,OAAAC;AAAA,QACA,UAAU;AAAA,QACV,YAAY;AAAA,QACZ,cAAc;AAAA,MAClB,CAAC;AAAA,IACL;AAAA,EACJ;AACA,SAAOD;AACX;;;ACvDA,SAAS,eAAe,KAAKE,MAAK,EAAE,KAAK,MAAM,GAAG;AAC9C,MAAI,OAAO,GAAG,KAAK,IAAI;AACnB,QAAI,WAAW,KAAKA,MAAK,KAAK;AAAA,WAEzB,WAAW,KAAK,GAAG;AACxB,oBAAgB,KAAKA,MAAK,KAAK;AAAA,OAC9B;AACD,UAAM,QAAQ,KAAK,KAAK,IAAI,GAAG;AAC/B,QAAIA,gBAAe,KAAK;AACpB,MAAAA,KAAI,IAAI,OAAO,KAAK,OAAO,OAAO,GAAG,CAAC;AAAA,IAC1C,WACSA,gBAAe,KAAK;AACzB,MAAAA,KAAI,IAAI,KAAK;AAAA,IACjB,OACK;AACD,YAAM,YAAY,aAAa,KAAK,OAAO,GAAG;AAC9C,YAAM,UAAU,KAAK,OAAO,WAAW,GAAG;AAC1C,UAAI,aAAaA;AACb,eAAO,eAAeA,MAAK,WAAW;AAAA,UAClC,OAAO;AAAA,UACP,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,cAAc;AAAA,QAClB,CAAC;AAAA;AAED,QAAAA,KAAI,SAAS,IAAI;AAAA,IACzB;AAAA,EACJ;AACA,SAAOA;AACX;AACA,SAAS,aAAa,KAAK,OAAO,KAAK;AACnC,MAAI,UAAU;AACV,WAAO;AAEX,MAAI,OAAO,UAAU;AACjB,WAAO,OAAO,KAAK;AACvB,MAAI,OAAO,GAAG,MAAK,2BAAK,MAAK;AACzB,UAAM,SAAS,uBAAuB,IAAI,KAAK,CAAC,CAAC;AACjD,WAAO,UAAU,oBAAI,IAAI;AACzB,eAAW,QAAQ,IAAI,QAAQ,KAAK;AAChC,aAAO,QAAQ,IAAI,KAAK,MAAM;AAClC,WAAO,SAAS;AAChB,WAAO,iBAAiB;AACxB,UAAM,SAAS,IAAI,SAAS,MAAM;AAClC,QAAI,CAAC,IAAI,cAAc;AACnB,UAAI,UAAU,KAAK,UAAU,MAAM;AACnC,UAAI,QAAQ,SAAS;AACjB,kBAAU,QAAQ,UAAU,GAAG,EAAE,IAAI;AACzC,WAAK,IAAI,IAAI,QAAQ,UAAU,kFAAkF,OAAO,0CAA0C;AAClK,UAAI,eAAe;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AACA,SAAO,KAAK,UAAU,KAAK;AAC/B;;;ACvDA,SAAS,WAAW,KAAK,OAAO,KAAK;AACjC,QAAM,IAAI,WAAW,KAAK,QAAW,GAAG;AACxC,QAAM,IAAI,WAAW,OAAO,QAAW,GAAG;AAC1C,SAAO,IAAI,KAAK,GAAG,CAAC;AACxB;AACA,IAAM,OAAN,MAAM,MAAK;AAAA,EACP,YAAY,KAAK,QAAQ,MAAM;AAC3B,WAAO,eAAe,MAAM,WAAW,EAAE,OAAO,KAAK,CAAC;AACtD,SAAK,MAAM;AACX,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,MAAMC,SAAQ;AACV,QAAI,EAAE,KAAK,MAAM,IAAI;AACrB,QAAI,OAAO,GAAG;AACV,YAAM,IAAI,MAAMA,OAAM;AAC1B,QAAI,OAAO,KAAK;AACZ,cAAQ,MAAM,MAAMA,OAAM;AAC9B,WAAO,IAAI,MAAK,KAAK,KAAK;AAAA,EAC9B;AAAA,EACA,OAAO,GAAG,KAAK;AACX,UAAM,QAAO,2BAAK,YAAW,oBAAI,IAAI,IAAI,CAAC;AAC1C,WAAO,eAAe,KAAK,MAAM,IAAI;AAAA,EACzC;AAAA,EACA,SAAS,KAAK,WAAW,aAAa;AAClC,YAAO,2BAAK,OACN,cAAc,MAAM,KAAK,WAAW,WAAW,IAC/C,KAAK,UAAU,IAAI;AAAA,EAC7B;AACJ;;;AC7BA,SAAS,oBAAoB,YAAY,KAAK,SAAS;AACnD,QAAM,OAAO,IAAI,UAAU,WAAW;AACtC,QAAMC,aAAY,OAAO,0BAA0B;AACnD,SAAOA,WAAU,YAAY,KAAK,OAAO;AAC7C;AACA,SAAS,yBAAyB,EAAE,SAAS,MAAM,GAAG,KAAK,EAAE,iBAAiB,WAAW,YAAY,aAAa,UAAU,GAAG;AAC3H,QAAM,EAAE,QAAQ,SAAS,EAAE,cAAc,EAAE,IAAI;AAC/C,QAAM,UAAU,OAAO,OAAO,CAAC,GAAG,KAAK,EAAE,QAAQ,YAAY,MAAM,KAAK,CAAC;AACzE,MAAI,YAAY;AAChB,QAAM,QAAQ,CAAC;AACf,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACnC,UAAM,OAAO,MAAM,CAAC;AACpB,QAAIC,WAAU;AACd,QAAI,OAAO,IAAI,GAAG;AACd,UAAI,CAAC,aAAa,KAAK;AACnB,cAAM,KAAK,EAAE;AACjB,uBAAiB,KAAK,OAAO,KAAK,eAAe,SAAS;AAC1D,UAAI,KAAK;AACL,QAAAA,WAAU,KAAK;AAAA,IACvB,WACS,OAAO,IAAI,GAAG;AACnB,YAAM,KAAK,OAAO,KAAK,GAAG,IAAI,KAAK,MAAM;AACzC,UAAI,IAAI;AACJ,YAAI,CAAC,aAAa,GAAG;AACjB,gBAAM,KAAK,EAAE;AACjB,yBAAiB,KAAK,OAAO,GAAG,eAAe,SAAS;AAAA,MAC5D;AAAA,IACJ;AACA,gBAAY;AACZ,QAAIC,OAAM,UAAU,MAAM,SAAS,MAAOD,WAAU,MAAO,MAAO,YAAY,IAAK;AACnF,QAAIA;AACA,MAAAC,QAAO,YAAYA,MAAK,YAAY,cAAcD,QAAO,CAAC;AAC9D,QAAI,aAAaA;AACb,kBAAY;AAChB,UAAM,KAAK,kBAAkBC,IAAG;AAAA,EACpC;AACA,MAAI;AACJ,MAAI,MAAM,WAAW,GAAG;AACpB,UAAM,UAAU,QAAQ,UAAU;AAAA,EACtC,OACK;AACD,UAAM,MAAM,CAAC;AACb,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACnC,YAAM,OAAO,MAAM,CAAC;AACpB,aAAO,OAAO;AAAA,EAAK,MAAM,GAAG,IAAI,KAAK;AAAA,IACzC;AAAA,EACJ;AACA,MAAI,SAAS;AACT,WAAO,OAAO,cAAc,cAAc,OAAO,GAAG,MAAM;AAC1D,QAAI;AACA,gBAAU;AAAA,EAClB,WACS,aAAa;AAClB,gBAAY;AAChB,SAAO;AACX;AACA,SAAS,wBAAwB,EAAE,MAAM,GAAG,KAAK,EAAE,WAAW,WAAW,GAAG;AACxE,QAAM,EAAE,QAAQ,YAAY,uBAAuB,WAAW,SAAS,EAAE,cAAc,EAAE,IAAI;AAC7F,gBAAc;AACd,QAAM,UAAU,OAAO,OAAO,CAAC,GAAG,KAAK;AAAA,IACnC,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,MAAM;AAAA,EACV,CAAC;AACD,MAAI,aAAa;AACjB,MAAI,eAAe;AACnB,QAAM,QAAQ,CAAC;AACf,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACnC,UAAM,OAAO,MAAM,CAAC;AACpB,QAAI,UAAU;AACd,QAAI,OAAO,IAAI,GAAG;AACd,UAAI,KAAK;AACL,cAAM,KAAK,EAAE;AACjB,uBAAiB,KAAK,OAAO,KAAK,eAAe,KAAK;AACtD,UAAI,KAAK;AACL,kBAAU,KAAK;AAAA,IACvB,WACS,OAAO,IAAI,GAAG;AACnB,YAAM,KAAK,OAAO,KAAK,GAAG,IAAI,KAAK,MAAM;AACzC,UAAI,IAAI;AACJ,YAAI,GAAG;AACH,gBAAM,KAAK,EAAE;AACjB,yBAAiB,KAAK,OAAO,GAAG,eAAe,KAAK;AACpD,YAAI,GAAG;AACH,uBAAa;AAAA,MACrB;AACA,YAAM,KAAK,OAAO,KAAK,KAAK,IAAI,KAAK,QAAQ;AAC7C,UAAI,IAAI;AACJ,YAAI,GAAG;AACH,oBAAU,GAAG;AACjB,YAAI,GAAG;AACH,uBAAa;AAAA,MACrB,WACS,KAAK,SAAS,SAAQ,yBAAI,UAAS;AACxC,kBAAU,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,QAAI;AACA,mBAAa;AACjB,QAAI,MAAM,UAAU,MAAM,SAAS,MAAO,UAAU,IAAK;AACzD,QAAI,IAAI,MAAM,SAAS;AACnB,aAAO;AACX,QAAI;AACA,aAAO,YAAY,KAAK,YAAY,cAAc,OAAO,CAAC;AAC9D,QAAI,CAAC,eAAe,MAAM,SAAS,gBAAgB,IAAI,SAAS,IAAI;AAChE,mBAAa;AACjB,UAAM,KAAK,GAAG;AACd,mBAAe,MAAM;AAAA,EACzB;AACA,QAAM,EAAE,OAAO,IAAI,IAAI;AACvB,MAAI,MAAM,WAAW,GAAG;AACpB,WAAO,QAAQ;AAAA,EACnB,OACK;AACD,QAAI,CAAC,YAAY;AACb,YAAM,MAAM,MAAM,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,SAAS,GAAG,CAAC;AAChE,mBAAa,IAAI,QAAQ,YAAY,KAAK,MAAM,IAAI,QAAQ;AAAA,IAChE;AACA,QAAI,YAAY;AACZ,UAAI,MAAM;AACV,iBAAW,QAAQ;AACf,eAAO,OAAO;AAAA,EAAK,UAAU,GAAG,MAAM,GAAG,IAAI,KAAK;AACtD,aAAO,GAAG,GAAG;AAAA,EAAK,MAAM,GAAG,GAAG;AAAA,IAClC,OACK;AACD,aAAO,GAAG,KAAK,GAAG,SAAS,GAAG,MAAM,KAAK,GAAG,CAAC,GAAG,SAAS,GAAG,GAAG;AAAA,IACnE;AAAA,EACJ;AACJ;AACA,SAAS,iBAAiB,EAAE,QAAQ,SAAS,EAAE,cAAc,EAAE,GAAG,OAAO,SAAS,WAAW;AACzF,MAAI,WAAW;AACX,cAAU,QAAQ,QAAQ,QAAQ,EAAE;AACxC,MAAI,SAAS;AACT,UAAM,KAAK,cAAc,cAAc,OAAO,GAAG,MAAM;AACvD,UAAM,KAAK,GAAG,UAAU,CAAC;AAAA,EAC7B;AACJ;;;ACrIA,SAAS,SAAS,OAAO,KAAK;AAC1B,QAAM,IAAI,SAAS,GAAG,IAAI,IAAI,QAAQ;AACtC,aAAW,MAAM,OAAO;AACpB,QAAI,OAAO,EAAE,GAAG;AACZ,UAAI,GAAG,QAAQ,OAAO,GAAG,QAAQ;AAC7B,eAAO;AACX,UAAI,SAAS,GAAG,GAAG,KAAK,GAAG,IAAI,UAAU;AACrC,eAAO;AAAA,IACf;AAAA,EACJ;AACA,SAAO;AACX;AACA,IAAM,UAAN,cAAsB,WAAW;AAAA,EAC7B,WAAW,UAAU;AACjB,WAAO;AAAA,EACX;AAAA,EACA,YAAYC,SAAQ;AAChB,UAAM,KAAKA,OAAM;AACjB,SAAK,QAAQ,CAAC;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,KAAKA,SAAQ,KAAK,KAAK;AAC1B,UAAM,EAAE,eAAe,SAAS,IAAI;AACpC,UAAMC,OAAM,IAAI,KAAKD,OAAM;AAC3B,UAAM,MAAM,CAAC,KAAK,UAAU;AACxB,UAAI,OAAO,aAAa;AACpB,gBAAQ,SAAS,KAAK,KAAK,KAAK,KAAK;AAAA,eAChC,MAAM,QAAQ,QAAQ,KAAK,CAAC,SAAS,SAAS,GAAG;AACtD;AACJ,UAAI,UAAU,UAAa;AACvB,QAAAC,KAAI,MAAM,KAAK,WAAW,KAAK,OAAO,GAAG,CAAC;AAAA,IAClD;AACA,QAAI,eAAe,KAAK;AACpB,iBAAW,CAAC,KAAK,KAAK,KAAK;AACvB,YAAI,KAAK,KAAK;AAAA,IACtB,WACS,OAAO,OAAO,QAAQ,UAAU;AACrC,iBAAW,OAAO,OAAO,KAAK,GAAG;AAC7B,YAAI,KAAK,IAAI,GAAG,CAAC;AAAA,IACzB;AACA,QAAI,OAAOD,QAAO,mBAAmB,YAAY;AAC7C,MAAAC,KAAI,MAAM,KAAKD,QAAO,cAAc;AAAA,IACxC;AACA,WAAOC;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,MAAM,WAAW;AA7DzB;AA8DQ,QAAI;AACJ,QAAI,OAAO,IAAI;AACX,cAAQ;AAAA,aACH,CAAC,QAAQ,OAAO,SAAS,YAAY,EAAE,SAAS,OAAO;AAE5D,cAAQ,IAAI,KAAK,MAAM,6BAAM,KAAK;AAAA,IACtC;AAEI,cAAQ,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AACzC,UAAM,OAAO,SAAS,KAAK,OAAO,MAAM,GAAG;AAC3C,UAAM,eAAc,UAAK,WAAL,mBAAa;AACjC,QAAI,MAAM;AACN,UAAI,CAAC;AACD,cAAM,IAAI,MAAM,OAAO,MAAM,GAAG,cAAc;AAElD,UAAI,SAAS,KAAK,KAAK,KAAK,cAAc,MAAM,KAAK;AACjD,aAAK,MAAM,QAAQ,MAAM;AAAA;AAEzB,aAAK,QAAQ,MAAM;AAAA,IAC3B,WACS,aAAa;AAClB,YAAM,IAAI,KAAK,MAAM,UAAU,UAAQ,YAAY,OAAO,IAAI,IAAI,CAAC;AACnE,UAAI,MAAM;AACN,aAAK,MAAM,KAAK,KAAK;AAAA;AAErB,aAAK,MAAM,OAAO,GAAG,GAAG,KAAK;AAAA,IACrC,OACK;AACD,WAAK,MAAM,KAAK,KAAK;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,OAAO,KAAK;AACR,UAAM,KAAK,SAAS,KAAK,OAAO,GAAG;AACnC,QAAI,CAAC;AACD,aAAO;AACX,UAAM,MAAM,KAAK,MAAM,OAAO,KAAK,MAAM,QAAQ,EAAE,GAAG,CAAC;AACvD,WAAO,IAAI,SAAS;AAAA,EACxB;AAAA,EACA,IAAI,KAAK,YAAY;AACjB,UAAM,KAAK,SAAS,KAAK,OAAO,GAAG;AACnC,UAAM,OAAO,yBAAI;AACjB,YAAQ,CAAC,cAAc,SAAS,IAAI,IAAI,KAAK,QAAQ,SAAS;AAAA,EAClE;AAAA,EACA,IAAI,KAAK;AACL,WAAO,CAAC,CAAC,SAAS,KAAK,OAAO,GAAG;AAAA,EACrC;AAAA,EACA,IAAI,KAAK,OAAO;AACZ,SAAK,IAAI,IAAI,KAAK,KAAK,KAAK,GAAG,IAAI;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,GAAG,KAAK,MAAM;AACjB,UAAMA,OAAM,OAAO,IAAI,KAAK,KAAI,2BAAK,YAAW,oBAAI,IAAI,IAAI,CAAC;AAC7D,QAAI,2BAAK;AACL,UAAI,SAASA,IAAG;AACpB,eAAW,QAAQ,KAAK;AACpB,qBAAe,KAAKA,MAAK,IAAI;AACjC,WAAOA;AAAA,EACX;AAAA,EACA,SAAS,KAAK,WAAW,aAAa;AAClC,QAAI,CAAC;AACD,aAAO,KAAK,UAAU,IAAI;AAC9B,eAAW,QAAQ,KAAK,OAAO;AAC3B,UAAI,CAAC,OAAO,IAAI;AACZ,cAAM,IAAI,MAAM,sCAAsC,KAAK,UAAU,IAAI,CAAC,UAAU;AAAA,IAC5F;AACA,QAAI,CAAC,IAAI,iBAAiB,KAAK,iBAAiB,KAAK;AACjD,YAAM,OAAO,OAAO,CAAC,GAAG,KAAK,EAAE,eAAe,KAAK,CAAC;AACxD,WAAO,oBAAoB,MAAM,KAAK;AAAA,MAClC,iBAAiB;AAAA,MACjB,WAAW,EAAE,OAAO,KAAK,KAAK,IAAI;AAAA,MAClC,YAAY,IAAI,UAAU;AAAA,MAC1B;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;;;AC1IA,IAAM,MAAM;AAAA,EACR,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,KAAK;AAAA,EACL,QAAQC,MAAK,SAAS;AAClB,QAAI,CAAC,MAAMA,IAAG;AACV,cAAQ,iCAAiC;AAC7C,WAAOA;AAAA,EACX;AAAA,EACA,YAAY,CAACC,SAAQ,KAAK,QAAQ,QAAQ,KAAKA,SAAQ,KAAK,GAAG;AACnE;;;ACPA,IAAM,UAAN,cAAsB,WAAW;AAAA,EAC7B,WAAW,UAAU;AACjB,WAAO;AAAA,EACX;AAAA,EACA,YAAYC,SAAQ;AAChB,UAAM,KAAKA,OAAM;AACjB,SAAK,QAAQ,CAAC;AAAA,EAClB;AAAA,EACA,IAAI,OAAO;AACP,SAAK,MAAM,KAAK,KAAK;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,KAAK;AACR,UAAM,MAAM,YAAY,GAAG;AAC3B,QAAI,OAAO,QAAQ;AACf,aAAO;AACX,UAAM,MAAM,KAAK,MAAM,OAAO,KAAK,CAAC;AACpC,WAAO,IAAI,SAAS;AAAA,EACxB;AAAA,EACA,IAAI,KAAK,YAAY;AACjB,UAAM,MAAM,YAAY,GAAG;AAC3B,QAAI,OAAO,QAAQ;AACf,aAAO;AACX,UAAM,KAAK,KAAK,MAAM,GAAG;AACzB,WAAO,CAAC,cAAc,SAAS,EAAE,IAAI,GAAG,QAAQ;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,KAAK;AACL,UAAM,MAAM,YAAY,GAAG;AAC3B,WAAO,OAAO,QAAQ,YAAY,MAAM,KAAK,MAAM;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,KAAK,OAAO;AACZ,UAAM,MAAM,YAAY,GAAG;AAC3B,QAAI,OAAO,QAAQ;AACf,YAAM,IAAI,MAAM,+BAA+B,GAAG,GAAG;AACzD,UAAM,OAAO,KAAK,MAAM,GAAG;AAC3B,QAAI,SAAS,IAAI,KAAK,cAAc,KAAK;AACrC,WAAK,QAAQ;AAAA;AAEb,WAAK,MAAM,GAAG,IAAI;AAAA,EAC1B;AAAA,EACA,OAAO,GAAG,KAAK;AACX,UAAMC,OAAM,CAAC;AACb,QAAI,2BAAK;AACL,UAAI,SAASA,IAAG;AACpB,QAAI,IAAI;AACR,eAAW,QAAQ,KAAK;AACpB,MAAAA,KAAI,KAAK,KAAK,MAAM,OAAO,GAAG,GAAG,GAAG,CAAC;AACzC,WAAOA;AAAA,EACX;AAAA,EACA,SAAS,KAAK,WAAW,aAAa;AAClC,QAAI,CAAC;AACD,aAAO,KAAK,UAAU,IAAI;AAC9B,WAAO,oBAAoB,MAAM,KAAK;AAAA,MAClC,iBAAiB;AAAA,MACjB,WAAW,EAAE,OAAO,KAAK,KAAK,IAAI;AAAA,MAClC,aAAa,IAAI,UAAU,MAAM;AAAA,MACjC;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,OAAO,KAAKD,SAAQ,KAAK,KAAK;AAC1B,UAAM,EAAE,SAAS,IAAI;AACrB,UAAMC,OAAM,IAAI,KAAKD,OAAM;AAC3B,QAAI,OAAO,OAAO,YAAY,OAAO,GAAG,GAAG;AACvC,UAAI,IAAI;AACR,eAAS,MAAM,KAAK;AAChB,YAAI,OAAO,aAAa,YAAY;AAChC,gBAAM,MAAM,eAAe,MAAM,KAAK,OAAO,GAAG;AAChD,eAAK,SAAS,KAAK,KAAK,KAAK,EAAE;AAAA,QACnC;AACA,QAAAC,KAAI,MAAM,KAAK,WAAW,IAAI,QAAW,GAAG,CAAC;AAAA,MACjD;AAAA,IACJ;AACA,WAAOA;AAAA,EACX;AACJ;AACA,SAAS,YAAY,KAAK;AACtB,MAAI,MAAM,SAAS,GAAG,IAAI,IAAI,QAAQ;AACtC,MAAI,OAAO,OAAO,QAAQ;AACtB,UAAM,OAAO,GAAG;AACpB,SAAO,OAAO,QAAQ,YAAY,OAAO,UAAU,GAAG,KAAK,OAAO,IAC5D,MACA;AACV;;;AC3GA,IAAM,MAAM;AAAA,EACR,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,KAAK;AAAA,EACL,QAAQC,MAAK,SAAS;AAClB,QAAI,CAAC,MAAMA,IAAG;AACV,cAAQ,kCAAkC;AAC9C,WAAOA;AAAA,EACX;AAAA,EACA,YAAY,CAACC,SAAQ,KAAK,QAAQ,QAAQ,KAAKA,SAAQ,KAAK,GAAG;AACnE;;;ACZA,IAAM,SAAS;AAAA,EACX,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,SAAS,SAAO;AAAA,EAChB,UAAU,MAAM,KAAK,WAAW,aAAa;AACzC,UAAM,OAAO,OAAO,EAAE,cAAc,KAAK,GAAG,GAAG;AAC/C,WAAO,gBAAgB,MAAM,KAAK,WAAW,WAAW;AAAA,EAC5D;AACJ;;;ACTA,IAAM,UAAU;AAAA,EACZ,UAAU,WAAS,SAAS;AAAA,EAC5B,YAAY,MAAM,IAAI,OAAO,IAAI;AAAA,EACjC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,MAAM,IAAI,OAAO,IAAI;AAAA,EAC9B,WAAW,CAAC,EAAE,OAAO,GAAG,QAAQ,OAAO,WAAW,YAAY,QAAQ,KAAK,KAAK,MAAM,IAChF,SACA,IAAI,QAAQ;AACtB;;;ACVA,IAAM,UAAU;AAAA,EACZ,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,SAAO,IAAI,OAAO,IAAI,CAAC,MAAM,OAAO,IAAI,CAAC,MAAM,GAAG;AAAA,EAC3D,UAAU,EAAE,QAAQ,MAAM,GAAG,KAAK;AAC9B,QAAI,UAAU,QAAQ,KAAK,KAAK,MAAM,GAAG;AACrC,YAAM,KAAK,OAAO,CAAC,MAAM,OAAO,OAAO,CAAC,MAAM;AAC9C,UAAI,UAAU;AACV,eAAO;AAAA,IACf;AACA,WAAO,QAAQ,IAAI,QAAQ,UAAU,IAAI,QAAQ;AAAA,EACrD;AACJ;;;AChBA,SAAS,gBAAgB,EAAE,QAAQ,mBAAmB,KAAK,MAAM,GAAG;AAChE,MAAI,OAAO,UAAU;AACjB,WAAO,OAAO,KAAK;AACvB,QAAM,MAAM,OAAO,UAAU,WAAW,QAAQ,OAAO,KAAK;AAC5D,MAAI,CAAC,SAAS,GAAG;AACb,WAAO,MAAM,GAAG,IAAI,SAAS,MAAM,IAAI,UAAU;AACrD,MAAI,IAAI,KAAK,UAAU,KAAK;AAC5B,MAAI,CAAC,UACD,sBACC,CAAC,OAAO,QAAQ,8BACjB,MAAM,KAAK,CAAC,GAAG;AACf,QAAI,IAAI,EAAE,QAAQ,GAAG;AACrB,QAAI,IAAI,GAAG;AACP,UAAI,EAAE;AACN,WAAK;AAAA,IACT;AACA,QAAI,IAAI,qBAAqB,EAAE,SAAS,IAAI;AAC5C,WAAO,MAAM;AACT,WAAK;AAAA,EACb;AACA,SAAO;AACX;;;AClBA,IAAM,WAAW;AAAA,EACb,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,SAAO,IAAI,MAAM,EAAE,EAAE,YAAY,MAAM,QAC1C,MACA,IAAI,CAAC,MAAM,MACP,OAAO,oBACP,OAAO;AAAA,EACjB,WAAW;AACf;AACA,IAAM,WAAW;AAAA,EACb,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,SAAO,WAAW,GAAG;AAAA,EAC9B,UAAU,MAAM;AACZ,UAAM,MAAM,OAAO,KAAK,KAAK;AAC7B,WAAO,SAAS,GAAG,IAAI,IAAI,cAAc,IAAI,gBAAgB,IAAI;AAAA,EACrE;AACJ;AACA,IAAM,QAAQ;AAAA,EACV,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,QAAQ,KAAK;AACT,UAAM,OAAO,IAAI,OAAO,WAAW,GAAG,CAAC;AACvC,UAAM,MAAM,IAAI,QAAQ,GAAG;AAC3B,QAAI,QAAQ,MAAM,IAAI,IAAI,SAAS,CAAC,MAAM;AACtC,WAAK,oBAAoB,IAAI,SAAS,MAAM;AAChD,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACf;;;ACtCA,IAAM,cAAc,CAAC,UAAU,OAAO,UAAU,YAAY,OAAO,UAAU,KAAK;AAClF,IAAM,aAAa,CAAC,KAAK,QAAQ,OAAO,EAAE,YAAY,MAAO,cAAc,OAAO,GAAG,IAAI,SAAS,IAAI,UAAU,MAAM,GAAG,KAAK;AAC9H,SAAS,aAAa,MAAM,OAAO,QAAQ;AACvC,QAAM,EAAE,MAAM,IAAI;AAClB,MAAI,YAAY,KAAK,KAAK,SAAS;AAC/B,WAAO,SAAS,MAAM,SAAS,KAAK;AACxC,SAAO,gBAAgB,IAAI;AAC/B;AACA,IAAM,SAAS;AAAA,EACX,UAAU,WAAS,YAAY,KAAK,KAAK,SAAS;AAAA,EAClD,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,CAAC,KAAK,UAAU,QAAQ,WAAW,KAAK,GAAG,GAAG,GAAG;AAAA,EAC1D,WAAW,UAAQ,aAAa,MAAM,GAAG,IAAI;AACjD;AACA,IAAM,MAAM;AAAA,EACR,UAAU;AAAA,EACV,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,CAAC,KAAK,UAAU,QAAQ,WAAW,KAAK,GAAG,IAAI,GAAG;AAAA,EAC3D,WAAW;AACf;AACA,IAAM,SAAS;AAAA,EACX,UAAU,WAAS,YAAY,KAAK,KAAK,SAAS;AAAA,EAClD,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,CAAC,KAAK,UAAU,QAAQ,WAAW,KAAK,GAAG,IAAI,GAAG;AAAA,EAC3D,WAAW,UAAQ,aAAa,MAAM,IAAI,IAAI;AAClD;;;AC3BA,IAAM,SAAS;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;;;AChBA,SAASC,aAAY,OAAO;AACxB,SAAO,OAAO,UAAU,YAAY,OAAO,UAAU,KAAK;AAC9D;AACA,IAAM,gBAAgB,CAAC,EAAE,MAAM,MAAM,KAAK,UAAU,KAAK;AACzD,IAAM,cAAc;AAAA,EAChB;AAAA,IACI,UAAU,WAAS,OAAO,UAAU;AAAA,IACpC,SAAS;AAAA,IACT,KAAK;AAAA,IACL,SAAS,SAAO;AAAA,IAChB,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,UAAU,WAAS,SAAS;AAAA,IAC5B,YAAY,MAAM,IAAI,OAAO,IAAI;AAAA,IACjC,SAAS;AAAA,IACT,KAAK;AAAA,IACL,MAAM;AAAA,IACN,SAAS,MAAM;AAAA,IACf,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,UAAU,WAAS,OAAO,UAAU;AAAA,IACpC,SAAS;AAAA,IACT,KAAK;AAAA,IACL,MAAM;AAAA,IACN,SAAS,SAAO,QAAQ;AAAA,IACxB,WAAW;AAAA,EACf;AAAA,EACA;AAAA,IACI,UAAUA;AAAA,IACV,SAAS;AAAA,IACT,KAAK;AAAA,IACL,MAAM;AAAA,IACN,SAAS,CAAC,KAAK,UAAU,EAAE,YAAY,MAAM,cAAc,OAAO,GAAG,IAAI,SAAS,KAAK,EAAE;AAAA,IACzF,WAAW,CAAC,EAAE,MAAM,MAAMA,aAAY,KAAK,IAAI,MAAM,SAAS,IAAI,KAAK,UAAU,KAAK;AAAA,EAC1F;AAAA,EACA;AAAA,IACI,UAAU,WAAS,OAAO,UAAU;AAAA,IACpC,SAAS;AAAA,IACT,KAAK;AAAA,IACL,MAAM;AAAA,IACN,SAAS,SAAO,WAAW,GAAG;AAAA,IAC9B,WAAW;AAAA,EACf;AACJ;AACA,IAAM,YAAY;AAAA,EACd,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,QAAQ,KAAK,SAAS;AAClB,YAAQ,2BAA2B,KAAK,UAAU,GAAG,CAAC,EAAE;AACxD,WAAO;AAAA,EACX;AACJ;AACA,IAAMC,UAAS,CAAC,KAAK,GAAG,EAAE,OAAO,aAAa,SAAS;;;ACxDvD,IAAM,SAAS;AAAA,EACX,UAAU,WAAS,iBAAiB;AAAA;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASL,QAAQ,KAAK,SAAS;AAClB,QAAI,OAAO,SAAS,YAAY;AAE5B,YAAM,MAAM,KAAK,IAAI,QAAQ,WAAW,EAAE,CAAC;AAC3C,YAAM,SAAS,IAAI,WAAW,IAAI,MAAM;AACxC,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE;AAC9B,eAAO,CAAC,IAAI,IAAI,WAAW,CAAC;AAChC,aAAO;AAAA,IACX,OACK;AACD,cAAQ,0FAA0F;AAClG,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU,EAAE,SAAS,MAAM,MAAM,GAAG,KAAK,WAAW,aAAa;AAC7D,QAAI,CAAC;AACD,aAAO;AACX,UAAM,MAAM;AACZ,QAAI;AACJ,QAAI,OAAO,SAAS,YAAY;AAC5B,UAAI,IAAI;AACR,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE;AAC9B,aAAK,OAAO,aAAa,IAAI,CAAC,CAAC;AACnC,YAAM,KAAK,CAAC;AAAA,IAChB,OACK;AACD,YAAM,IAAI,MAAM,0FAA0F;AAAA,IAC9G;AACA,aAAS,OAAO,OAAO;AACvB,QAAI,SAAS,OAAO,cAAc;AAC9B,YAAM,YAAY,KAAK,IAAI,IAAI,QAAQ,YAAY,IAAI,OAAO,QAAQ,IAAI,QAAQ,eAAe;AACjG,YAAM,IAAI,KAAK,KAAK,IAAI,SAAS,SAAS;AAC1C,YAAM,QAAQ,IAAI,MAAM,CAAC;AACzB,eAAS,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,KAAK,WAAW;AAC/C,cAAM,CAAC,IAAI,IAAI,OAAO,GAAG,SAAS;AAAA,MACtC;AACA,YAAM,MAAM,KAAK,SAAS,OAAO,gBAAgB,OAAO,GAAG;AAAA,IAC/D;AACA,WAAO,gBAAgB,EAAE,SAAS,MAAM,OAAO,IAAI,GAAG,KAAK,WAAW,WAAW;AAAA,EACrF;AACJ;;;AClDA,SAAS,aAAaC,MAAK,SAAS;AAChC,MAAI,MAAMA,IAAG,GAAG;AACZ,aAAS,IAAI,GAAG,IAAIA,KAAI,MAAM,QAAQ,EAAE,GAAG;AACvC,UAAI,OAAOA,KAAI,MAAM,CAAC;AACtB,UAAI,OAAO,IAAI;AACX;AAAA,eACK,MAAM,IAAI,GAAG;AAClB,YAAI,KAAK,MAAM,SAAS;AACpB,kBAAQ,gDAAgD;AAC5D,cAAM,OAAO,KAAK,MAAM,CAAC,KAAK,IAAI,KAAK,IAAI,OAAO,IAAI,CAAC;AACvD,YAAI,KAAK;AACL,eAAK,IAAI,gBAAgB,KAAK,IAAI,gBAC5B,GAAG,KAAK,aAAa;AAAA,EAAK,KAAK,IAAI,aAAa,KAChD,KAAK;AACf,YAAI,KAAK,SAAS;AACd,gBAAM,KAAK,KAAK,SAAS,KAAK;AAC9B,aAAG,UAAU,GAAG,UACV,GAAG,KAAK,OAAO;AAAA,EAAK,GAAG,OAAO,KAC9B,KAAK;AAAA,QACf;AACA,eAAO;AAAA,MACX;AACA,MAAAA,KAAI,MAAM,CAAC,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,KAAK,IAAI;AAAA,IACtD;AAAA,EACJ;AAEI,YAAQ,kCAAkC;AAC9C,SAAOA;AACX;AACA,SAAS,YAAYC,SAAQ,UAAU,KAAK;AACxC,QAAM,EAAE,SAAS,IAAI;AACrB,QAAMC,SAAQ,IAAI,QAAQD,OAAM;AAChC,EAAAC,OAAM,MAAM;AACZ,MAAI,IAAI;AACR,MAAI,YAAY,OAAO,YAAY,OAAO,QAAQ;AAC9C,aAAS,MAAM,UAAU;AACrB,UAAI,OAAO,aAAa;AACpB,aAAK,SAAS,KAAK,UAAU,OAAO,GAAG,GAAG,EAAE;AAChD,UAAI,KAAK;AACT,UAAI,MAAM,QAAQ,EAAE,GAAG;AACnB,YAAI,GAAG,WAAW,GAAG;AACjB,gBAAM,GAAG,CAAC;AACV,kBAAQ,GAAG,CAAC;AAAA,QAChB;AAEI,gBAAM,IAAI,UAAU,gCAAgC,EAAE,EAAE;AAAA,MAChE,WACS,MAAM,cAAc,QAAQ;AACjC,cAAM,OAAO,OAAO,KAAK,EAAE;AAC3B,YAAI,KAAK,WAAW,GAAG;AACnB,gBAAM,KAAK,CAAC;AACZ,kBAAQ,GAAG,GAAG;AAAA,QAClB,OACK;AACD,gBAAM,IAAI,UAAU,oCAAoC,KAAK,MAAM,OAAO;AAAA,QAC9E;AAAA,MACJ,OACK;AACD,cAAM;AAAA,MACV;AACA,MAAAA,OAAM,MAAM,KAAK,WAAW,KAAK,OAAO,GAAG,CAAC;AAAA,IAChD;AACJ,SAAOA;AACX;AACA,IAAM,QAAQ;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,KAAK;AAAA,EACL,SAAS;AAAA,EACT,YAAY;AAChB;;;ACrEA,IAAM,WAAN,MAAM,kBAAiB,QAAQ;AAAA,EAC3B,cAAc;AACV,UAAM;AACN,SAAK,MAAM,QAAQ,UAAU,IAAI,KAAK,IAAI;AAC1C,SAAK,SAAS,QAAQ,UAAU,OAAO,KAAK,IAAI;AAChD,SAAK,MAAM,QAAQ,UAAU,IAAI,KAAK,IAAI;AAC1C,SAAK,MAAM,QAAQ,UAAU,IAAI,KAAK,IAAI;AAC1C,SAAK,MAAM,QAAQ,UAAU,IAAI,KAAK,IAAI;AAC1C,SAAK,MAAM,UAAS;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,GAAG,KAAK;AACX,QAAI,CAAC;AACD,aAAO,MAAM,OAAO,CAAC;AACzB,UAAMC,OAAM,oBAAI,IAAI;AACpB,QAAI,2BAAK;AACL,UAAI,SAASA,IAAG;AACpB,eAAW,QAAQ,KAAK,OAAO;AAC3B,UAAI,KAAK;AACT,UAAI,OAAO,IAAI,GAAG;AACd,cAAM,KAAK,KAAK,KAAK,IAAI,GAAG;AAC5B,gBAAQ,KAAK,KAAK,OAAO,KAAK,GAAG;AAAA,MACrC,OACK;AACD,cAAM,KAAK,MAAM,IAAI,GAAG;AAAA,MAC5B;AACA,UAAIA,KAAI,IAAI,GAAG;AACX,cAAM,IAAI,MAAM,8CAA8C;AAClE,MAAAA,KAAI,IAAI,KAAK,KAAK;AAAA,IACtB;AACA,WAAOA;AAAA,EACX;AAAA,EACA,OAAO,KAAKC,SAAQ,UAAU,KAAK;AAC/B,UAAMC,SAAQ,YAAYD,SAAQ,UAAU,GAAG;AAC/C,UAAME,QAAO,IAAI,KAAK;AACtB,IAAAA,MAAK,QAAQD,OAAM;AACnB,WAAOC;AAAA,EACX;AACJ;AACA,SAAS,MAAM;AACf,IAAM,OAAO;AAAA,EACT,YAAY;AAAA,EACZ,UAAU,WAAS,iBAAiB;AAAA,EACpC,WAAW;AAAA,EACX,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQC,MAAK,SAAS;AAClB,UAAMF,SAAQ,aAAaE,MAAK,OAAO;AACvC,UAAM,WAAW,CAAC;AAClB,eAAW,EAAE,IAAI,KAAKF,OAAM,OAAO;AAC/B,UAAI,SAAS,GAAG,GAAG;AACf,YAAI,SAAS,SAAS,IAAI,KAAK,GAAG;AAC9B,kBAAQ,iDAAiD,IAAI,KAAK,EAAE;AAAA,QACxE,OACK;AACD,mBAAS,KAAK,IAAI,KAAK;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,OAAO,OAAO,IAAI,SAAS,GAAGA,MAAK;AAAA,EAC9C;AAAA,EACA,YAAY,CAACD,SAAQ,UAAU,QAAQ,SAAS,KAAKA,SAAQ,UAAU,GAAG;AAC9E;;;ACrEA,SAAS,cAAc,EAAE,OAAO,OAAO,GAAG,KAAK;AAC3C,QAAM,UAAU,QAAQ,UAAU;AAClC,MAAI,UAAU,QAAQ,KAAK,KAAK,MAAM;AAClC,WAAO;AACX,SAAO,QAAQ,IAAI,QAAQ,UAAU,IAAI,QAAQ;AACrD;AACA,IAAM,UAAU;AAAA,EACZ,UAAU,WAAS,UAAU;AAAA,EAC7B,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,MAAM,IAAI,OAAO,IAAI;AAAA,EAC9B,WAAW;AACf;AACA,IAAM,WAAW;AAAA,EACb,UAAU,WAAS,UAAU;AAAA,EAC7B,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,MAAM,IAAI,OAAO,KAAK;AAAA,EAC/B,WAAW;AACf;;;ACpBA,IAAMI,YAAW;AAAA,EACb,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,CAAC,QAAQ,IAAI,MAAM,EAAE,EAAE,YAAY,MAAM,QAC5C,MACA,IAAI,CAAC,MAAM,MACP,OAAO,oBACP,OAAO;AAAA,EACjB,WAAW;AACf;AACA,IAAMC,YAAW;AAAA,EACb,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,CAAC,QAAQ,WAAW,IAAI,QAAQ,MAAM,EAAE,CAAC;AAAA,EAClD,UAAU,MAAM;AACZ,UAAM,MAAM,OAAO,KAAK,KAAK;AAC7B,WAAO,SAAS,GAAG,IAAI,IAAI,cAAc,IAAI,gBAAgB,IAAI;AAAA,EACrE;AACJ;AACA,IAAMC,SAAQ;AAAA,EACV,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,QAAQ,KAAK;AACT,UAAM,OAAO,IAAI,OAAO,WAAW,IAAI,QAAQ,MAAM,EAAE,CAAC,CAAC;AACzD,UAAM,MAAM,IAAI,QAAQ,GAAG;AAC3B,QAAI,QAAQ,IAAI;AACZ,YAAM,IAAI,IAAI,UAAU,MAAM,CAAC,EAAE,QAAQ,MAAM,EAAE;AACjD,UAAI,EAAE,EAAE,SAAS,CAAC,MAAM;AACpB,aAAK,oBAAoB,EAAE;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACf;;;ACzCA,IAAMC,eAAc,CAAC,UAAU,OAAO,UAAU,YAAY,OAAO,UAAU,KAAK;AAClF,SAASC,YAAW,KAAK,QAAQ,OAAO,EAAE,YAAY,GAAG;AACrD,QAAM,OAAO,IAAI,CAAC;AAClB,MAAI,SAAS,OAAO,SAAS;AACzB,cAAU;AACd,QAAM,IAAI,UAAU,MAAM,EAAE,QAAQ,MAAM,EAAE;AAC5C,MAAI,aAAa;AACb,YAAQ,OAAO;AAAA,MACX,KAAK;AACD,cAAM,KAAK,GAAG;AACd;AAAA,MACJ,KAAK;AACD,cAAM,KAAK,GAAG;AACd;AAAA,MACJ,KAAK;AACD,cAAM,KAAK,GAAG;AACd;AAAA,IACR;AACA,UAAMC,KAAI,OAAO,GAAG;AACpB,WAAO,SAAS,MAAM,OAAO,EAAE,IAAIA,KAAIA;AAAA,EAC3C;AACA,QAAM,IAAI,SAAS,KAAK,KAAK;AAC7B,SAAO,SAAS,MAAM,KAAK,IAAI;AACnC;AACA,SAASC,cAAa,MAAM,OAAO,QAAQ;AACvC,QAAM,EAAE,MAAM,IAAI;AAClB,MAAIH,aAAY,KAAK,GAAG;AACpB,UAAM,MAAM,MAAM,SAAS,KAAK;AAChC,WAAO,QAAQ,IAAI,MAAM,SAAS,IAAI,OAAO,CAAC,IAAI,SAAS;AAAA,EAC/D;AACA,SAAO,gBAAgB,IAAI;AAC/B;AACA,IAAM,SAAS;AAAA,EACX,UAAUA;AAAA,EACV,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,CAAC,KAAK,UAAU,QAAQC,YAAW,KAAK,GAAG,GAAG,GAAG;AAAA,EAC1D,WAAW,UAAQE,cAAa,MAAM,GAAG,IAAI;AACjD;AACA,IAAMC,UAAS;AAAA,EACX,UAAUJ;AAAA,EACV,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,CAAC,KAAK,UAAU,QAAQC,YAAW,KAAK,GAAG,GAAG,GAAG;AAAA,EAC1D,WAAW,UAAQE,cAAa,MAAM,GAAG,GAAG;AAChD;AACA,IAAME,OAAM;AAAA,EACR,UAAUL;AAAA,EACV,SAAS;AAAA,EACT,KAAK;AAAA,EACL,MAAM;AAAA,EACN,SAAS,CAAC,KAAK,UAAU,QAAQC,YAAW,KAAK,GAAG,IAAI,GAAG;AAAA,EAC3D,WAAW;AACf;AACA,IAAMK,UAAS;AAAA,EACX,UAAUN;AAAA,EACV,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,CAAC,KAAK,UAAU,QAAQC,YAAW,KAAK,GAAG,IAAI,GAAG;AAAA,EAC3D,WAAW,UAAQE,cAAa,MAAM,IAAI,IAAI;AAClD;;;AChEA,IAAM,UAAN,MAAM,iBAAgB,QAAQ;AAAA,EAC1B,YAAYI,SAAQ;AAChB,UAAMA,OAAM;AACZ,SAAK,MAAM,SAAQ;AAAA,EACvB;AAAA,EACA,IAAI,KAAK;AACL,QAAI;AACJ,QAAI,OAAO,GAAG;AACV,aAAO;AAAA,aACF,OACL,OAAO,QAAQ,YACf,SAAS,OACT,WAAW,OACX,IAAI,UAAU;AACd,aAAO,IAAI,KAAK,IAAI,KAAK,IAAI;AAAA;AAE7B,aAAO,IAAI,KAAK,KAAK,IAAI;AAC7B,UAAM,OAAO,SAAS,KAAK,OAAO,KAAK,GAAG;AAC1C,QAAI,CAAC;AACD,WAAK,MAAM,KAAK,IAAI;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,KAAK,UAAU;AACf,UAAM,OAAO,SAAS,KAAK,OAAO,GAAG;AACrC,WAAO,CAAC,YAAY,OAAO,IAAI,IACzB,SAAS,KAAK,GAAG,IACb,KAAK,IAAI,QACT,KAAK,MACT;AAAA,EACV;AAAA,EACA,IAAI,KAAK,OAAO;AACZ,QAAI,OAAO,UAAU;AACjB,YAAM,IAAI,MAAM,iEAAiE,OAAO,KAAK,EAAE;AACnG,UAAM,OAAO,SAAS,KAAK,OAAO,GAAG;AACrC,QAAI,QAAQ,CAAC,OAAO;AAChB,WAAK,MAAM,OAAO,KAAK,MAAM,QAAQ,IAAI,GAAG,CAAC;AAAA,IACjD,WACS,CAAC,QAAQ,OAAO;AACrB,WAAK,MAAM,KAAK,IAAI,KAAK,GAAG,CAAC;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,OAAO,GAAG,KAAK;AACX,WAAO,MAAM,OAAO,GAAG,KAAK,GAAG;AAAA,EACnC;AAAA,EACA,SAAS,KAAK,WAAW,aAAa;AAClC,QAAI,CAAC;AACD,aAAO,KAAK,UAAU,IAAI;AAC9B,QAAI,KAAK,iBAAiB,IAAI;AAC1B,aAAO,MAAM,SAAS,OAAO,OAAO,CAAC,GAAG,KAAK,EAAE,eAAe,KAAK,CAAC,GAAG,WAAW,WAAW;AAAA;AAE7F,YAAM,IAAI,MAAM,qCAAqC;AAAA,EAC7D;AAAA,EACA,OAAO,KAAKA,SAAQ,UAAU,KAAK;AAC/B,UAAM,EAAE,SAAS,IAAI;AACrB,UAAMC,OAAM,IAAI,KAAKD,OAAM;AAC3B,QAAI,YAAY,OAAO,YAAY,OAAO,QAAQ;AAC9C,eAAS,SAAS,UAAU;AACxB,YAAI,OAAO,aAAa;AACpB,kBAAQ,SAAS,KAAK,UAAU,OAAO,KAAK;AAChD,QAAAC,KAAI,MAAM,KAAK,WAAW,OAAO,MAAM,GAAG,CAAC;AAAA,MAC/C;AACJ,WAAOA;AAAA,EACX;AACJ;AACA,QAAQ,MAAM;AACd,IAAM,MAAM;AAAA,EACR,YAAY;AAAA,EACZ,UAAU,WAAS,iBAAiB;AAAA,EACpC,WAAW;AAAA,EACX,SAAS;AAAA,EACT,KAAK;AAAA,EACL,YAAY,CAACD,SAAQ,UAAU,QAAQ,QAAQ,KAAKA,SAAQ,UAAU,GAAG;AAAA,EACzE,QAAQE,MAAK,SAAS;AAClB,QAAI,MAAMA,IAAG,GAAG;AACZ,UAAIA,KAAI,iBAAiB,IAAI;AACzB,eAAO,OAAO,OAAO,IAAI,QAAQ,GAAGA,IAAG;AAAA;AAEvC,gBAAQ,qCAAqC;AAAA,IACrD;AAEI,cAAQ,iCAAiC;AAC7C,WAAOA;AAAA,EACX;AACJ;;;ACvFA,SAAS,iBAAiB,KAAK,UAAU;AACrC,QAAM,OAAO,IAAI,CAAC;AAClB,QAAM,QAAQ,SAAS,OAAO,SAAS,MAAM,IAAI,UAAU,CAAC,IAAI;AAChE,QAAM,MAAM,CAAC,MAAM,WAAW,OAAO,CAAC,IAAI,OAAO,CAAC;AAClD,QAAM,MAAM,MACP,QAAQ,MAAM,EAAE,EAChB,MAAM,GAAG,EACT,OAAO,CAACC,MAAK,MAAMA,OAAM,IAAI,EAAE,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACtD,SAAQ,SAAS,MAAM,IAAI,EAAE,IAAI,MAAM;AAC3C;AAMA,SAAS,qBAAqB,MAAM;AAChC,MAAI,EAAE,MAAM,IAAI;AAChB,MAAI,MAAM,CAAC,MAAM;AACjB,MAAI,OAAO,UAAU;AACjB,UAAM,OAAK,OAAO,CAAC;AAAA,WACd,MAAM,KAAK,KAAK,CAAC,SAAS,KAAK;AACpC,WAAO,gBAAgB,IAAI;AAC/B,MAAI,OAAO;AACX,MAAI,QAAQ,GAAG;AACX,WAAO;AACP,aAAS,IAAI,EAAE;AAAA,EACnB;AACA,QAAM,MAAM,IAAI,EAAE;AAClB,QAAM,QAAQ,CAAC,QAAQ,GAAG;AAC1B,MAAI,QAAQ,IAAI;AACZ,UAAM,QAAQ,CAAC;AAAA,EACnB,OACK;AACD,aAAS,QAAQ,MAAM,CAAC,KAAK;AAC7B,UAAM,QAAQ,QAAQ,GAAG;AACzB,QAAI,SAAS,IAAI;AACb,eAAS,QAAQ,MAAM,CAAC,KAAK;AAC7B,YAAM,QAAQ,KAAK;AAAA,IACvB;AAAA,EACJ;AACA,SAAQ,OACJ,MACK,IAAI,OAAK,OAAO,CAAC,EAAE,SAAS,GAAG,GAAG,CAAC,EACnC,KAAK,GAAG,EACR,QAAQ,cAAc,EAAE;AAErC;AACA,IAAM,UAAU;AAAA,EACZ,UAAU,WAAS,OAAO,UAAU,YAAY,OAAO,UAAU,KAAK;AAAA,EACtE,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,CAAC,KAAK,UAAU,EAAE,YAAY,MAAM,iBAAiB,KAAK,WAAW;AAAA,EAC9E,WAAW;AACf;AACA,IAAM,YAAY;AAAA,EACd,UAAU,WAAS,OAAO,UAAU;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA,EACL,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS,SAAO,iBAAiB,KAAK,KAAK;AAAA,EAC3C,WAAW;AACf;AACA,IAAM,YAAY;AAAA,EACd,UAAU,WAAS,iBAAiB;AAAA,EACpC,SAAS;AAAA,EACT,KAAK;AAAA;AAAA;AAAA;AAAA,EAIL,MAAM,OAAO,2JAKJ;AAAA,EACT,QAAQ,KAAK;AACT,UAAM,QAAQ,IAAI,MAAM,UAAU,IAAI;AACtC,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,sDAAsD;AAC1E,UAAM,CAAC,EAAE,MAAM,OAAO,KAAK,MAAM,QAAQ,MAAM,IAAI,MAAM,IAAI,MAAM;AACnE,UAAM,WAAW,MAAM,CAAC,IAAI,QAAQ,MAAM,CAAC,IAAI,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI;AACrE,QAAI,OAAO,KAAK,IAAI,MAAM,QAAQ,GAAG,KAAK,QAAQ,GAAG,UAAU,GAAG,UAAU,GAAG,QAAQ;AACvF,UAAM,KAAK,MAAM,CAAC;AAClB,QAAI,MAAM,OAAO,KAAK;AAClB,UAAI,IAAI,iBAAiB,IAAI,KAAK;AAClC,UAAI,KAAK,IAAI,CAAC,IAAI;AACd,aAAK;AACT,cAAQ,MAAQ;AAAA,IACpB;AACA,WAAO,IAAI,KAAK,IAAI;AAAA,EACxB;AAAA,EACA,WAAW,CAAC,EAAE,MAAM,OAAM,+BAAO,cAAc,QAAQ,uBAAuB,QAAO;AACzF;;;ACpFA,IAAMC,UAAS;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACAC;AAAA,EACAC;AAAA,EACAC;AAAA,EACAC;AAAA,EACAC;AAAA,EACAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;;;ACnBA,IAAM,UAAU,oBAAI,IAAI;AAAA,EACpB,CAAC,QAAQ,MAAM;AAAA,EACf,CAAC,YAAY,CAAC,KAAK,KAAK,MAAM,CAAC;AAAA,EAC/B,CAAC,QAAQC,OAAQ;AAAA,EACjB,CAAC,UAAUA,OAAQ;AAAA,EACnB,CAAC,YAAYA,OAAQ;AACzB,CAAC;AACD,IAAM,aAAa;AAAA,EACf;AAAA,EACA,MAAM;AAAA,EACN;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,MAAM;AAAA,EACN;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AACA,IAAM,gBAAgB;AAAA,EAClB,4BAA4B;AAAA,EAC5B,2BAA2B;AAAA,EAC3B,0BAA0B;AAAA,EAC1B,2BAA2B;AAAA,EAC3B,yBAAyB;AAAA,EACzB,+BAA+B;AACnC;AACA,SAAS,QAAQ,YAAY,YAAY,aAAa;AAClD,QAAM,aAAa,QAAQ,IAAI,UAAU;AACzC,MAAI,cAAc,CAAC,YAAY;AAC3B,WAAO,eAAe,CAAC,WAAW,SAAS,KAAK,IAC1C,WAAW,OAAO,KAAK,IACvB,WAAW,MAAM;AAAA,EAC3B;AACA,MAAI,OAAO;AACX,MAAI,CAAC,MAAM;AACP,QAAI,MAAM,QAAQ,UAAU;AACxB,aAAO,CAAC;AAAA,SACP;AACD,YAAM,OAAO,MAAM,KAAK,QAAQ,KAAK,CAAC,EACjC,OAAO,SAAO,QAAQ,QAAQ,EAC9B,IAAI,SAAO,KAAK,UAAU,GAAG,CAAC,EAC9B,KAAK,IAAI;AACd,YAAM,IAAI,MAAM,mBAAmB,UAAU,iBAAiB,IAAI,6BAA6B;AAAA,IACnG;AAAA,EACJ;AACA,MAAI,MAAM,QAAQ,UAAU,GAAG;AAC3B,eAAW,OAAO;AACd,aAAO,KAAK,OAAO,GAAG;AAAA,EAC9B,WACS,OAAO,eAAe,YAAY;AACvC,WAAO,WAAW,KAAK,MAAM,CAAC;AAAA,EAClC;AACA,MAAI;AACA,WAAO,KAAK,OAAO,KAAK;AAC5B,SAAO,KAAK,OAAO,CAACC,OAAM,QAAQ;AAC9B,UAAM,SAAS,OAAO,QAAQ,WAAW,WAAW,GAAG,IAAI;AAC3D,QAAI,CAAC,QAAQ;AACT,YAAM,UAAU,KAAK,UAAU,GAAG;AAClC,YAAM,OAAO,OAAO,KAAK,UAAU,EAC9B,IAAI,SAAO,KAAK,UAAU,GAAG,CAAC,EAC9B,KAAK,IAAI;AACd,YAAM,IAAI,MAAM,sBAAsB,OAAO,gBAAgB,IAAI,EAAE;AAAA,IACvE;AACA,QAAI,CAACA,MAAK,SAAS,MAAM;AACrB,MAAAA,MAAK,KAAK,MAAM;AACpB,WAAOA;AAAA,EACX,GAAG,CAAC,CAAC;AACT;;;ACvFA,IAAM,sBAAsB,CAAC,GAAG,MAAM,EAAE,MAAM,EAAE,MAAM,KAAK,EAAE,MAAM,EAAE,MAAM,IAAI;AAC/E,IAAM,SAAN,MAAM,QAAO;AAAA,EACT,YAAY,EAAE,QAAQ,YAAY,OAAAC,QAAO,kBAAkB,QAAAC,SAAQ,gBAAgB,iBAAiB,GAAG;AACnG,SAAK,SAAS,MAAM,QAAQ,MAAM,IAC5B,QAAQ,QAAQ,QAAQ,IACxB,SACI,QAAQ,MAAM,MAAM,IACpB;AACV,SAAK,OAAQ,OAAOA,YAAW,YAAYA,WAAW;AACtD,SAAK,YAAY,mBAAmB,gBAAgB,CAAC;AACrD,SAAK,OAAO,QAAQ,YAAY,KAAK,MAAMD,MAAK;AAChD,SAAK,kBAAkB,oBAAoB;AAC3C,WAAO,eAAe,MAAM,KAAK,EAAE,OAAO,IAAI,CAAC;AAC/C,WAAO,eAAe,MAAM,QAAQ,EAAE,OAAO,OAAO,CAAC;AACrD,WAAO,eAAe,MAAM,KAAK,EAAE,OAAO,IAAI,CAAC;AAE/C,SAAK,iBACD,OAAO,mBAAmB,aACpB,iBACA,mBAAmB,OACf,sBACA;AAAA,EAClB;AAAA,EACA,QAAQ;AACJ,UAAM,OAAO,OAAO,OAAO,QAAO,WAAW,OAAO,0BAA0B,IAAI,CAAC;AACnF,SAAK,OAAO,KAAK,KAAK,MAAM;AAC5B,WAAO;AAAA,EACX;AACJ;;;AC9BA,SAAS,kBAAkB,KAAK,SAAS;AAJzC;AAKI,QAAM,QAAQ,CAAC;AACf,MAAI,gBAAgB,QAAQ,eAAe;AAC3C,MAAI,QAAQ,eAAe,SAAS,IAAI,YAAY;AAChD,UAAM,MAAM,IAAI,WAAW,SAAS,GAAG;AACvC,QAAI,KAAK;AACL,YAAM,KAAK,GAAG;AACd,sBAAgB;AAAA,IACpB,WACS,IAAI,WAAW;AACpB,sBAAgB;AAAA,EACxB;AACA,MAAI;AACA,UAAM,KAAK,KAAK;AACpB,QAAM,MAAM,uBAAuB,KAAK,OAAO;AAC/C,QAAM,EAAE,cAAc,IAAI,IAAI;AAC9B,MAAI,IAAI,eAAe;AACnB,QAAI,MAAM,WAAW;AACjB,YAAM,QAAQ,EAAE;AACpB,UAAM,KAAK,cAAc,IAAI,aAAa;AAC1C,UAAM,QAAQ,cAAc,IAAI,EAAE,CAAC;AAAA,EACvC;AACA,MAAI,YAAY;AAChB,MAAI,iBAAiB;AACrB,MAAI,IAAI,UAAU;AACd,QAAI,OAAO,IAAI,QAAQ,GAAG;AACtB,UAAI,IAAI,SAAS,eAAe;AAC5B,cAAM,KAAK,EAAE;AACjB,UAAI,IAAI,SAAS,eAAe;AAC5B,cAAM,KAAK,cAAc,IAAI,SAAS,aAAa;AACnD,cAAM,KAAK,cAAc,IAAI,EAAE,CAAC;AAAA,MACpC;AAEA,UAAI,mBAAmB,CAAC,CAAC,IAAI;AAC7B,uBAAiB,IAAI,SAAS;AAAA,IAClC;AACA,UAAM,cAAc,iBAAiB,SAAY,MAAO,YAAY;AACpE,QAAI,OAAO,UAAU,IAAI,UAAU,KAAK,MAAO,iBAAiB,MAAO,WAAW;AAClF,QAAI;AACA,cAAQ,YAAY,MAAM,IAAI,cAAc,cAAc,CAAC;AAC/D,SAAK,KAAK,CAAC,MAAM,OAAO,KAAK,CAAC,MAAM,QAChC,MAAM,MAAM,SAAS,CAAC,MAAM,OAAO;AAGnC,YAAM,MAAM,SAAS,CAAC,IAAI,OAAO,IAAI;AAAA,IACzC;AAEI,YAAM,KAAK,IAAI;AAAA,EACvB,OACK;AACD,UAAM,KAAK,UAAU,IAAI,UAAU,GAAG,CAAC;AAAA,EAC3C;AACA,OAAI,SAAI,eAAJ,mBAAgB,QAAQ;AACxB,QAAI,IAAI,SAAS;AACb,YAAM,KAAK,cAAc,IAAI,OAAO;AACpC,UAAI,GAAG,SAAS,IAAI,GAAG;AACnB,cAAM,KAAK,KAAK;AAChB,cAAM,KAAK,cAAc,IAAI,EAAE,CAAC;AAAA,MACpC,OACK;AACD,cAAM,KAAK,OAAO,EAAE,EAAE;AAAA,MAC1B;AAAA,IACJ,OACK;AACD,YAAM,KAAK,KAAK;AAAA,IACpB;AAAA,EACJ,OACK;AACD,QAAI,KAAK,IAAI;AACb,QAAI,MAAM;AACN,WAAK,GAAG,QAAQ,QAAQ,EAAE;AAC9B,QAAI,IAAI;AACJ,WAAK,CAAC,aAAa,mBAAmB,MAAM,MAAM,SAAS,CAAC,MAAM;AAC9D,cAAM,KAAK,EAAE;AACjB,YAAM,KAAK,cAAc,cAAc,EAAE,GAAG,EAAE,CAAC;AAAA,IACnD;AAAA,EACJ;AACA,SAAO,MAAM,KAAK,IAAI,IAAI;AAC9B;;;ACtEA,IAAM,WAAN,MAAM,UAAS;AAAA,EACX,YAAY,OAAO,UAAU,SAAS;AAElC,SAAK,gBAAgB;AAErB,SAAK,UAAU;AAEf,SAAK,SAAS,CAAC;AAEf,SAAK,WAAW,CAAC;AACjB,WAAO,eAAe,MAAM,WAAW,EAAE,OAAO,IAAI,CAAC;AACrD,QAAI,YAAY;AAChB,QAAI,OAAO,aAAa,cAAc,MAAM,QAAQ,QAAQ,GAAG;AAC3D,kBAAY;AAAA,IAChB,WACS,YAAY,UAAa,UAAU;AACxC,gBAAU;AACV,iBAAW;AAAA,IACf;AACA,UAAM,MAAM,OAAO,OAAO;AAAA,MACtB,aAAa;AAAA,MACb,kBAAkB;AAAA,MAClB,UAAU;AAAA,MACV,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,SAAS;AAAA,IACb,GAAG,OAAO;AACV,SAAK,UAAU;AACf,QAAI,EAAE,QAAQ,IAAI;AAClB,QAAI,mCAAS,aAAa;AACtB,WAAK,aAAa,QAAQ,YAAY,WAAW;AACjD,UAAI,KAAK,WAAW,KAAK;AACrB,kBAAU,KAAK,WAAW,KAAK;AAAA,IACvC;AAEI,WAAK,aAAa,IAAI,WAAW,EAAE,QAAQ,CAAC;AAChD,SAAK,UAAU,SAAS,OAAO;AAE/B,SAAK,WACD,UAAU,SAAY,OAAO,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AACJ,UAAM,OAAO,OAAO,OAAO,UAAS,WAAW;AAAA,MAC3C,CAAC,SAAS,GAAG,EAAE,OAAO,IAAI;AAAA,IAC9B,CAAC;AACD,SAAK,gBAAgB,KAAK;AAC1B,SAAK,UAAU,KAAK;AACpB,SAAK,SAAS,KAAK,OAAO,MAAM;AAChC,SAAK,WAAW,KAAK,SAAS,MAAM;AACpC,SAAK,UAAU,OAAO,OAAO,CAAC,GAAG,KAAK,OAAO;AAC7C,QAAI,KAAK;AACL,WAAK,aAAa,KAAK,WAAW,MAAM;AAC5C,SAAK,SAAS,KAAK,OAAO,MAAM;AAEhC,SAAK,WAAW,OAAO,KAAK,QAAQ,IAC9B,KAAK,SAAS,MAAM,KAAK,MAAM,IAC/B,KAAK;AACX,QAAI,KAAK;AACL,WAAK,QAAQ,KAAK,MAAM,MAAM;AAClC,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,IAAI,OAAO;AACP,QAAI,iBAAiB,KAAK,QAAQ;AAC9B,WAAK,SAAS,IAAI,KAAK;AAAA,EAC/B;AAAA;AAAA,EAEA,MAAM,MAAM,OAAO;AACf,QAAI,iBAAiB,KAAK,QAAQ;AAC9B,WAAK,SAAS,MAAM,MAAM,KAAK;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,MAAM,MAAM;AACpB,QAAI,CAAC,KAAK,QAAQ;AACd,YAAM,OAAO,YAAY,IAAI;AAC7B,WAAK;AAAA,MAED,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,cAAc,QAAQ,KAAK,IAAI,IAAI;AAAA,IACrE;AACA,WAAO,IAAI,MAAM,KAAK,MAAM;AAAA,EAChC;AAAA,EACA,WAAW,OAAO,UAAU,SAAS;AACjC,QAAI,YAAY;AAChB,QAAI,OAAO,aAAa,YAAY;AAChC,cAAQ,SAAS,KAAK,EAAE,IAAI,MAAM,GAAG,IAAI,KAAK;AAC9C,kBAAY;AAAA,IAChB,WACS,MAAM,QAAQ,QAAQ,GAAG;AAC9B,YAAM,WAAW,CAAC,MAAM,OAAO,MAAM,YAAY,aAAa,UAAU,aAAa;AACrF,YAAM,QAAQ,SAAS,OAAO,QAAQ,EAAE,IAAI,MAAM;AAClD,UAAI,MAAM,SAAS;AACf,mBAAW,SAAS,OAAO,KAAK;AACpC,kBAAY;AAAA,IAChB,WACS,YAAY,UAAa,UAAU;AACxC,gBAAU;AACV,iBAAW;AAAA,IACf;AACA,UAAM,EAAE,uBAAuB,cAAc,MAAM,eAAe,UAAU,IAAI,IAAI,WAAW,CAAC;AAChG,UAAM,EAAE,UAAU,YAAY,cAAc,IAAI;AAAA,MAAkB;AAAA;AAAA,MAElE,gBAAgB;AAAA,IAAG;AACnB,UAAM,MAAM;AAAA,MACR,uBAAuB,yBAAyB;AAAA,MAChD,eAAe,iBAAiB;AAAA,MAChC;AAAA,MACA;AAAA,MACA,UAAU;AAAA,MACV,QAAQ,KAAK;AAAA,MACb;AAAA,IACJ;AACA,UAAM,OAAO,WAAW,OAAO,KAAK,GAAG;AACvC,QAAI,QAAQ,aAAa,IAAI;AACzB,WAAK,OAAO;AAChB,eAAW;AACX,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,KAAK,OAAO,UAAU,CAAC,GAAG;AACjC,UAAM,IAAI,KAAK,WAAW,KAAK,MAAM,OAAO;AAC5C,UAAM,IAAI,KAAK,WAAW,OAAO,MAAM,OAAO;AAC9C,WAAO,IAAI,KAAK,GAAG,CAAC;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,KAAK;AACR,WAAO,iBAAiB,KAAK,QAAQ,IAAI,KAAK,SAAS,OAAO,GAAG,IAAI;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,MAAM;AACX,QAAI,YAAY,IAAI,GAAG;AACnB,UAAI,KAAK,YAAY;AACjB,eAAO;AAEX,WAAK,WAAW;AAChB,aAAO;AAAA,IACX;AACA,WAAO,iBAAiB,KAAK,QAAQ,IAC/B,KAAK,SAAS,SAAS,IAAI,IAC3B;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAK,YAAY;AACjB,WAAO,aAAa,KAAK,QAAQ,IAC3B,KAAK,SAAS,IAAI,KAAK,UAAU,IACjC;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,MAAM,YAAY;AACpB,QAAI,YAAY,IAAI;AAChB,aAAO,CAAC,cAAc,SAAS,KAAK,QAAQ,IACtC,KAAK,SAAS,QACd,KAAK;AACf,WAAO,aAAa,KAAK,QAAQ,IAC3B,KAAK,SAAS,MAAM,MAAM,UAAU,IACpC;AAAA,EACV;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,KAAK;AACL,WAAO,aAAa,KAAK,QAAQ,IAAI,KAAK,SAAS,IAAI,GAAG,IAAI;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA,EAIA,MAAM,MAAM;AACR,QAAI,YAAY,IAAI;AAChB,aAAO,KAAK,aAAa;AAC7B,WAAO,aAAa,KAAK,QAAQ,IAAI,KAAK,SAAS,MAAM,IAAI,IAAI;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,KAAK,OAAO;AACZ,QAAI,KAAK,YAAY,MAAM;AAEvB,WAAK,WAAW,mBAAmB,KAAK,QAAQ,CAAC,GAAG,GAAG,KAAK;AAAA,IAChE,WACS,iBAAiB,KAAK,QAAQ,GAAG;AACtC,WAAK,SAAS,IAAI,KAAK,KAAK;AAAA,IAChC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,OAAO;AACf,QAAI,YAAY,IAAI,GAAG;AAEnB,WAAK,WAAW;AAAA,IACpB,WACS,KAAK,YAAY,MAAM;AAE5B,WAAK,WAAW,mBAAmB,KAAK,QAAQ,MAAM,KAAK,IAAI,GAAG,KAAK;AAAA,IAC3E,WACS,iBAAiB,KAAK,QAAQ,GAAG;AACtC,WAAK,SAAS,MAAM,MAAM,KAAK;AAAA,IACnC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,SAAS,UAAU,CAAC,GAAG;AAC7B,QAAI,OAAO,YAAY;AACnB,gBAAU,OAAO,OAAO;AAC5B,QAAI;AACJ,YAAQ,SAAS;AAAA,MACb,KAAK;AACD,YAAI,KAAK;AACL,eAAK,WAAW,KAAK,UAAU;AAAA;AAE/B,eAAK,aAAa,IAAI,WAAW,EAAE,SAAS,MAAM,CAAC;AACvD,cAAM,EAAE,kBAAkB,OAAO,QAAQ,WAAW;AACpD;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,YAAI,KAAK;AACL,eAAK,WAAW,KAAK,UAAU;AAAA;AAE/B,eAAK,aAAa,IAAI,WAAW,EAAE,QAAQ,CAAC;AAChD,cAAM,EAAE,kBAAkB,MAAM,QAAQ,OAAO;AAC/C;AAAA,MACJ,KAAK;AACD,YAAI,KAAK;AACL,iBAAO,KAAK;AAChB,cAAM;AACN;AAAA,MACJ,SAAS;AACL,cAAM,KAAK,KAAK,UAAU,OAAO;AACjC,cAAM,IAAI,MAAM,+DAA+D,EAAE,EAAE;AAAA,MACvF;AAAA,IACJ;AAEA,QAAI,QAAQ,kBAAkB;AAC1B,WAAK,SAAS,QAAQ;AAAA,aACjB;AACL,WAAK,SAAS,IAAI,OAAO,OAAO,OAAO,KAAK,OAAO,CAAC;AAAA;AAEpD,YAAM,IAAI,MAAM,qEAAqE;AAAA,EAC7F;AAAA;AAAA,EAEA,KAAK,EAAE,MAAM,SAAS,UAAU,eAAe,UAAU,QAAQ,IAAI,CAAC,GAAG;AACrE,UAAM,MAAM;AAAA,MACR,SAAS,oBAAI,IAAI;AAAA,MACjB,KAAK;AAAA,MACL,MAAM,CAAC;AAAA,MACP,UAAU,aAAa;AAAA,MACvB,cAAc;AAAA,MACd,eAAe,OAAO,kBAAkB,WAAW,gBAAgB;AAAA,IACvE;AACA,UAAM,MAAM,KAAK,KAAK,UAAU,WAAW,IAAI,GAAG;AAClD,QAAI,OAAO,aAAa;AACpB,iBAAW,EAAE,OAAO,KAAAE,KAAI,KAAK,IAAI,QAAQ,OAAO;AAC5C,iBAASA,MAAK,KAAK;AAC3B,WAAO,OAAO,YAAY,aACpB,aAAa,SAAS,EAAE,IAAI,IAAI,GAAG,IAAI,GAAG,IAC1C;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,SAAS,UAAU;AACtB,WAAO,KAAK,KAAK,EAAE,MAAM,MAAM,SAAS,UAAU,OAAO,SAAS,CAAC;AAAA,EACvE;AAAA;AAAA,EAEA,SAAS,UAAU,CAAC,GAAG;AACnB,QAAI,KAAK,OAAO,SAAS;AACrB,YAAM,IAAI,MAAM,4CAA4C;AAChE,QAAI,YAAY,YACX,CAAC,OAAO,UAAU,QAAQ,MAAM,KAAK,OAAO,QAAQ,MAAM,KAAK,IAAI;AACpE,YAAM,IAAI,KAAK,UAAU,QAAQ,MAAM;AACvC,YAAM,IAAI,MAAM,mDAAmD,CAAC,EAAE;AAAA,IAC1E;AACA,WAAO,kBAAkB,MAAM,OAAO;AAAA,EAC1C;AACJ;AACA,SAAS,iBAAiB,UAAU;AAChC,MAAI,aAAa,QAAQ;AACrB,WAAO;AACX,QAAM,IAAI,MAAM,iDAAiD;AACrE;;;AC5UA,IAAM,YAAN,cAAwB,MAAM;AAAA,EAC1B,YAAY,MAAM,KAAK,MAAM,SAAS;AAClC,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,MAAM;AAAA,EACf;AACJ;AACA,IAAM,iBAAN,cAA6B,UAAU;AAAA,EACnC,YAAY,KAAK,MAAM,SAAS;AAC5B,UAAM,kBAAkB,KAAK,MAAM,OAAO;AAAA,EAC9C;AACJ;AACA,IAAM,cAAN,cAA0B,UAAU;AAAA,EAChC,YAAY,KAAK,MAAM,SAAS;AAC5B,UAAM,eAAe,KAAK,MAAM,OAAO;AAAA,EAC3C;AACJ;AACA,IAAM,gBAAgB,CAAC,KAAK,OAAO,CAAC,UAAU;AAC1C,MAAI,MAAM,IAAI,CAAC,MAAM;AACjB;AACJ,QAAM,UAAU,MAAM,IAAI,IAAI,SAAO,GAAG,QAAQ,GAAG,CAAC;AACpD,QAAM,EAAE,MAAM,IAAI,IAAI,MAAM,QAAQ,CAAC;AACrC,QAAM,WAAW,YAAY,IAAI,YAAY,GAAG;AAChD,MAAI,KAAK,MAAM;AACf,MAAI,UAAU,IACT,UAAU,GAAG,WAAW,OAAO,CAAC,GAAG,GAAG,WAAW,IAAI,CAAC,EACtD,QAAQ,YAAY,EAAE;AAE3B,MAAI,MAAM,MAAM,QAAQ,SAAS,IAAI;AACjC,UAAM,YAAY,KAAK,IAAI,KAAK,IAAI,QAAQ,SAAS,EAAE;AACvD,cAAU,MAAM,QAAQ,UAAU,SAAS;AAC3C,UAAM,YAAY;AAAA,EACtB;AACA,MAAI,QAAQ,SAAS;AACjB,cAAU,QAAQ,UAAU,GAAG,EAAE,IAAI;AAEzC,MAAI,OAAO,KAAK,OAAO,KAAK,QAAQ,UAAU,GAAG,EAAE,CAAC,GAAG;AAEnD,QAAI,OAAO,IAAI,UAAU,GAAG,WAAW,OAAO,CAAC,GAAG,GAAG,WAAW,OAAO,CAAC,CAAC;AACzE,QAAI,KAAK,SAAS;AACd,aAAO,KAAK,UAAU,GAAG,EAAE,IAAI;AACnC,cAAU,OAAO;AAAA,EACrB;AACA,MAAI,OAAO,KAAK,OAAO,GAAG;AACtB,QAAI,QAAQ;AACZ,UAAM,MAAM,MAAM,QAAQ,CAAC;AAC3B,QAAI,OAAO,IAAI,SAAS,QAAQ,IAAI,MAAM,KAAK;AAC3C,cAAQ,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;AAAA,IACxD;AACA,UAAM,UAAU,IAAI,OAAO,EAAE,IAAI,IAAI,OAAO,KAAK;AACjD,UAAM,WAAW;AAAA;AAAA,EAAQ,OAAO;AAAA,EAAK,OAAO;AAAA;AAAA,EAChD;AACJ;;;ACtDA,SAAS,aAAa,QAAQ,EAAE,MAAM,WAAW,MAAM,QAAQ,SAAS,cAAc,eAAe,GAAG;AACpG,MAAI,cAAc;AAClB,MAAI,YAAY;AAChB,MAAI,WAAW;AACf,MAAI,UAAU;AACd,MAAI,aAAa;AACjB,MAAI,aAAa;AACjB,MAAI,WAAW;AACf,MAAI,MAAM;AACV,MAAI,SAAS;AACb,MAAI,MAAM;AACV,MAAI,mBAAmB;AACvB,MAAI,QAAQ;AACZ,MAAI,QAAQ;AACZ,MAAI,QAAQ;AACZ,aAAW,SAAS,QAAQ;AACxB,QAAI,UAAU;AACV,UAAI,MAAM,SAAS,WACf,MAAM,SAAS,aACf,MAAM,SAAS;AACf,gBAAQ,MAAM,QAAQ,gBAAgB,uEAAuE;AACjH,iBAAW;AAAA,IACf;AACA,QAAI,KAAK;AACL,UAAI,aAAa,MAAM,SAAS,aAAa,MAAM,SAAS,WAAW;AACnE,gBAAQ,KAAK,iBAAiB,qCAAqC;AAAA,MACvE;AACA,YAAM;AAAA,IACV;AACA,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK;AAID,YAAI,CAAC,SACA,cAAc,gBAAe,6BAAM,UAAS,sBAC7C,MAAM,OAAO,SAAS,GAAI,GAAG;AAC7B,gBAAM;AAAA,QACV;AACA,mBAAW;AACX;AAAA,MACJ,KAAK,WAAW;AACZ,YAAI,CAAC;AACD,kBAAQ,OAAO,gBAAgB,wEAAwE;AAC3G,cAAM,KAAK,MAAM,OAAO,UAAU,CAAC,KAAK;AACxC,YAAI,CAAC;AACD,oBAAU;AAAA;AAEV,qBAAW,aAAa;AAC5B,qBAAa;AACb,oBAAY;AACZ;AAAA,MACJ;AAAA,MACA,KAAK;AACD,YAAI,WAAW;AACX,cAAI;AACA,uBAAW,MAAM;AAAA,mBACZ,CAAC,SAAS,cAAc;AAC7B,0BAAc;AAAA,QACtB;AAEI,wBAAc,MAAM;AACxB,oBAAY;AACZ,qBAAa;AACb,YAAI,UAAU;AACV,6BAAmB;AACvB,mBAAW;AACX;AAAA,MACJ,KAAK;AACD,YAAI;AACA,kBAAQ,OAAO,oBAAoB,oCAAoC;AAC3E,YAAI,MAAM,OAAO,SAAS,GAAG;AACzB,kBAAQ,MAAM,SAAS,MAAM,OAAO,SAAS,GAAG,aAAa,mCAAmC,IAAI;AACxG,iBAAS;AACT,kBAAU,QAAQ,MAAM;AACxB,oBAAY;AACZ,mBAAW;AACX,mBAAW;AACX;AAAA,MACJ,KAAK,OAAO;AACR,YAAI;AACA,kBAAQ,OAAO,iBAAiB,iCAAiC;AACrE,cAAM;AACN,kBAAU,QAAQ,MAAM;AACxB,oBAAY;AACZ,mBAAW;AACX,mBAAW;AACX;AAAA,MACJ;AAAA,MACA,KAAK;AAED,YAAI,UAAU;AACV,kBAAQ,OAAO,kBAAkB,sCAAsC,MAAM,MAAM,YAAY;AACnG,YAAI;AACA,kBAAQ,OAAO,oBAAoB,cAAc,MAAM,MAAM,OAAO,QAAQ,YAAY,EAAE;AAC9F,gBAAQ;AACR,oBACI,cAAc,kBAAkB,cAAc;AAClD,mBAAW;AACX;AAAA,MACJ,KAAK;AACD,YAAI,MAAM;AACN,cAAI;AACA,oBAAQ,OAAO,oBAAoB,mBAAmB,IAAI,EAAE;AAChE,kBAAQ;AACR,sBAAY;AACZ,qBAAW;AACX;AAAA,QACJ;AAAA;AAAA,MAEJ;AACI,gBAAQ,OAAO,oBAAoB,cAAc,MAAM,IAAI,QAAQ;AACnE,oBAAY;AACZ,mBAAW;AAAA,IACnB;AAAA,EACJ;AACA,QAAM,OAAO,OAAO,OAAO,SAAS,CAAC;AACrC,QAAM,MAAM,OAAO,KAAK,SAAS,KAAK,OAAO,SAAS;AACtD,MAAI,YACA,QACA,KAAK,SAAS,WACd,KAAK,SAAS,aACd,KAAK,SAAS,YACb,KAAK,SAAS,YAAY,KAAK,WAAW,KAAK;AAChD,YAAQ,KAAK,QAAQ,gBAAgB,uEAAuE;AAAA,EAChH;AACA,MAAI,QACE,aAAa,IAAI,UAAU,iBACzB,6BAAM,UAAS,gBACf,6BAAM,UAAS;AACnB,YAAQ,KAAK,iBAAiB,qCAAqC;AACvE,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,SAAS;AAAA,EACpB;AACJ;;;AC/IA,SAAS,gBAAgB,KAAK;AAC1B,MAAI,CAAC;AACD,WAAO;AACX,UAAQ,IAAI,MAAM;AAAA,IACd,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,UAAI,IAAI,OAAO,SAAS,IAAI;AACxB,eAAO;AACX,UAAI,IAAI;AACJ,mBAAW,MAAM,IAAI;AACjB,cAAI,GAAG,SAAS;AACZ,mBAAO;AAAA;AACnB,aAAO;AAAA,IACX,KAAK;AACD,iBAAW,MAAM,IAAI,OAAO;AACxB,mBAAW,MAAM,GAAG;AAChB,cAAI,GAAG,SAAS;AACZ,mBAAO;AACf,YAAI,GAAG;AACH,qBAAW,MAAM,GAAG;AAChB,gBAAI,GAAG,SAAS;AACZ,qBAAO;AAAA;AACnB,YAAI,gBAAgB,GAAG,GAAG,KAAK,gBAAgB,GAAG,KAAK;AACnD,iBAAO;AAAA,MACf;AACA,aAAO;AAAA,IACX;AACI,aAAO;AAAA,EACf;AACJ;;;AC7BA,SAAS,gBAAgB,QAAQ,IAAI,SAAS;AAC1C,OAAI,yBAAI,UAAS,mBAAmB;AAChC,UAAM,MAAM,GAAG,IAAI,CAAC;AACpB,QAAI,IAAI,WAAW,WACd,IAAI,WAAW,OAAO,IAAI,WAAW,QACtC,gBAAgB,EAAE,GAAG;AACrB,YAAM,MAAM;AACZ,cAAQ,KAAK,cAAc,KAAK,IAAI;AAAA,IACxC;AAAA,EACJ;AACJ;;;ACVA,SAAS,YAAY,KAAK,OAAO,QAAQ;AACrC,QAAM,EAAE,WAAW,IAAI,IAAI;AAC3B,MAAI,eAAe;AACf,WAAO;AACX,QAAM,UAAU,OAAO,eAAe,aAChC,aACA,CAAC,GAAG,MAAM,MAAM,KAAM,SAAS,CAAC,KAAK,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE;AACxE,SAAO,MAAM,KAAK,UAAQ,QAAQ,KAAK,KAAK,MAAM,CAAC;AACvD;;;ACHA,IAAM,cAAc;AACpB,SAAS,gBAAgB,EAAE,aAAAC,cAAa,kBAAAC,kBAAiB,GAAG,KAAK,IAAI,SAAS,KAAK;AARnF;AASI,QAAM,aAAY,2BAAK,cAAa;AACpC,QAAMC,OAAM,IAAI,UAAU,IAAI,MAAM;AACpC,MAAI,IAAI;AACJ,QAAI,SAAS;AACjB,MAAI,SAAS,GAAG;AAChB,MAAI,aAAa;AACjB,aAAW,YAAY,GAAG,OAAO;AAC7B,UAAM,EAAE,OAAO,KAAK,KAAK,MAAM,IAAI;AAEnC,UAAM,WAAW,aAAa,OAAO;AAAA,MACjC,WAAW;AAAA,MACX,MAAM,QAAO,2BAAM;AAAA,MACnB;AAAA,MACA;AAAA,MACA,cAAc,GAAG;AAAA,MACjB,gBAAgB;AAAA,IACpB,CAAC;AACD,UAAM,cAAc,CAAC,SAAS;AAC9B,QAAI,aAAa;AACb,UAAI,KAAK;AACL,YAAI,IAAI,SAAS;AACb,kBAAQ,QAAQ,yBAAyB,yDAAyD;AAAA,iBAC7F,YAAY,OAAO,IAAI,WAAW,GAAG;AAC1C,kBAAQ,QAAQ,cAAc,WAAW;AAAA,MACjD;AACA,UAAI,CAAC,SAAS,UAAU,CAAC,SAAS,OAAO,CAAC,KAAK;AAC3C,qBAAa,SAAS;AACtB,YAAI,SAAS,SAAS;AAClB,cAAIA,KAAI;AACJ,YAAAA,KAAI,WAAW,OAAO,SAAS;AAAA;AAE/B,YAAAA,KAAI,UAAU,SAAS;AAAA,QAC/B;AACA;AAAA,MACJ;AACA,UAAI,SAAS,oBAAoB,gBAAgB,GAAG,GAAG;AACnD,gBAAQ,OAAO,MAAM,MAAM,SAAS,CAAC,GAAG,0BAA0B,2CAA2C;AAAA,MACjH;AAAA,IACJ,aACS,cAAS,UAAT,mBAAgB,YAAW,GAAG,QAAQ;AAC3C,cAAQ,QAAQ,cAAc,WAAW;AAAA,IAC7C;AAEA,QAAI,QAAQ;AACZ,UAAM,WAAW,SAAS;AAC1B,UAAM,UAAU,MACVF,aAAY,KAAK,KAAK,UAAU,OAAO,IACvCC,kBAAiB,KAAK,UAAU,OAAO,MAAM,UAAU,OAAO;AACpE,QAAI,IAAI,OAAO;AACX,sBAAgB,GAAG,QAAQ,KAAK,OAAO;AAC3C,QAAI,QAAQ;AACZ,QAAI,YAAY,KAAKC,KAAI,OAAO,OAAO;AACnC,cAAQ,UAAU,iBAAiB,yBAAyB;AAEhE,UAAM,aAAa,aAAa,OAAO,CAAC,GAAG;AAAA,MACvC,WAAW;AAAA,MACX,MAAM;AAAA,MACN,QAAQ,QAAQ,MAAM,CAAC;AAAA,MACvB;AAAA,MACA,cAAc,GAAG;AAAA,MACjB,gBAAgB,CAAC,OAAO,IAAI,SAAS;AAAA,IACzC,CAAC;AACD,aAAS,WAAW;AACpB,QAAI,WAAW,OAAO;AAClB,UAAI,aAAa;AACb,aAAI,+BAAO,UAAS,eAAe,CAAC,WAAW;AAC3C,kBAAQ,QAAQ,yBAAyB,qDAAqD;AAClG,YAAI,IAAI,QAAQ,UACZ,SAAS,QAAQ,WAAW,MAAM,SAAS;AAC3C,kBAAQ,QAAQ,OAAO,uBAAuB,6FAA6F;AAAA,MACnJ;AAEA,YAAM,YAAY,QACZF,aAAY,KAAK,OAAO,YAAY,OAAO,IAC3CC,kBAAiB,KAAK,QAAQ,KAAK,MAAM,YAAY,OAAO;AAClE,UAAI,IAAI,OAAO;AACX,wBAAgB,GAAG,QAAQ,OAAO,OAAO;AAC7C,eAAS,UAAU,MAAM,CAAC;AAC1B,YAAM,OAAO,IAAI,KAAK,SAAS,SAAS;AACxC,UAAI,IAAI,QAAQ;AACZ,aAAK,WAAW;AACpB,MAAAC,KAAI,MAAM,KAAK,IAAI;AAAA,IACvB,OACK;AAED,UAAI;AACA,gBAAQ,QAAQ,OAAO,gBAAgB,qDAAqD;AAChG,UAAI,WAAW,SAAS;AACpB,YAAI,QAAQ;AACR,kBAAQ,WAAW,OAAO,WAAW;AAAA;AAErC,kBAAQ,UAAU,WAAW;AAAA,MACrC;AACA,YAAM,OAAO,IAAI,KAAK,OAAO;AAC7B,UAAI,IAAI,QAAQ;AACZ,aAAK,WAAW;AACpB,MAAAA,KAAI,MAAM,KAAK,IAAI;AAAA,IACvB;AAAA,EACJ;AACA,MAAI,cAAc,aAAa;AAC3B,YAAQ,YAAY,cAAc,mCAAmC;AACzE,EAAAA,KAAI,QAAQ,CAAC,GAAG,QAAQ,QAAQ,cAAc,MAAM;AACpD,SAAOA;AACX;;;AC5GA,SAAS,gBAAgB,EAAE,aAAAC,cAAa,kBAAAC,kBAAiB,GAAG,KAAK,IAAI,SAAS,KAAK;AAC/E,QAAM,aAAY,2BAAK,cAAa;AACpC,QAAMC,OAAM,IAAI,UAAU,IAAI,MAAM;AACpC,MAAI,IAAI;AACJ,QAAI,SAAS;AACjB,MAAI,IAAI;AACJ,QAAI,QAAQ;AAChB,MAAI,SAAS,GAAG;AAChB,MAAI,aAAa;AACjB,aAAW,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO;AACrC,UAAM,QAAQ,aAAa,OAAO;AAAA,MAC9B,WAAW;AAAA,MACX,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,cAAc,GAAG;AAAA,MACjB,gBAAgB;AAAA,IACpB,CAAC;AACD,QAAI,CAAC,MAAM,OAAO;AACd,UAAI,MAAM,UAAU,MAAM,OAAO,OAAO;AACpC,YAAI,SAAS,MAAM,SAAS;AACxB,kBAAQ,MAAM,KAAK,cAAc,kDAAkD;AAAA;AAEnF,kBAAQ,QAAQ,gBAAgB,mCAAmC;AAAA,MAC3E,OACK;AACD,qBAAa,MAAM;AACnB,YAAI,MAAM;AACN,UAAAA,KAAI,UAAU,MAAM;AACxB;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,OAAO,QACPF,aAAY,KAAK,OAAO,OAAO,OAAO,IACtCC,kBAAiB,KAAK,MAAM,KAAK,OAAO,MAAM,OAAO,OAAO;AAClE,QAAI,IAAI,OAAO;AACX,sBAAgB,GAAG,QAAQ,OAAO,OAAO;AAC7C,aAAS,KAAK,MAAM,CAAC;AACrB,IAAAC,KAAI,MAAM,KAAK,IAAI;AAAA,EACvB;AACA,EAAAA,KAAI,QAAQ,CAAC,GAAG,QAAQ,QAAQ,cAAc,MAAM;AACpD,SAAOA;AACX;;;AC9CA,SAAS,WAAW,KAAK,QAAQ,UAAU,SAAS;AAChD,MAAI,UAAU;AACd,MAAI,KAAK;AACL,QAAI,WAAW;AACf,QAAI,MAAM;AACV,eAAW,SAAS,KAAK;AACrB,YAAM,EAAE,QAAQ,KAAK,IAAI;AACzB,cAAQ,MAAM;AAAA,QACV,KAAK;AACD,qBAAW;AACX;AAAA,QACJ,KAAK,WAAW;AACZ,cAAI,YAAY,CAAC;AACb,oBAAQ,OAAO,gBAAgB,wEAAwE;AAC3G,gBAAM,KAAK,OAAO,UAAU,CAAC,KAAK;AAClC,cAAI,CAAC;AACD,sBAAU;AAAA;AAEV,uBAAW,MAAM;AACrB,gBAAM;AACN;AAAA,QACJ;AAAA,QACA,KAAK;AACD,cAAI;AACA,mBAAO;AACX,qBAAW;AACX;AAAA,QACJ;AACI,kBAAQ,OAAO,oBAAoB,cAAc,IAAI,cAAc;AAAA,MAC3E;AACA,gBAAU,OAAO;AAAA,IACrB;AAAA,EACJ;AACA,SAAO,EAAE,SAAS,OAAO;AAC7B;;;ACzBA,IAAM,WAAW;AACjB,IAAM,UAAU,CAAC,UAAU,UAAU,MAAM,SAAS,eAAe,MAAM,SAAS;AAClF,SAAS,sBAAsB,EAAE,aAAAC,cAAa,kBAAAC,kBAAiB,GAAG,KAAK,IAAI,SAAS,KAAK;AACrF,QAAMC,SAAQ,GAAG,MAAM,WAAW;AAClC,QAAM,SAASA,SAAQ,aAAa;AACpC,QAAM,aAAa,2BAAK,eAAcA,SAAQ,UAAU;AACxD,QAAM,OAAO,IAAI,UAAU,IAAI,MAAM;AACrC,OAAK,OAAO;AACZ,QAAM,SAAS,IAAI;AACnB,MAAI;AACA,QAAI,SAAS;AACjB,MAAI,IAAI;AACJ,QAAI,QAAQ;AAChB,MAAI,SAAS,GAAG,SAAS,GAAG,MAAM,OAAO;AACzC,WAAS,IAAI,GAAG,IAAI,GAAG,MAAM,QAAQ,EAAE,GAAG;AACtC,UAAM,WAAW,GAAG,MAAM,CAAC;AAC3B,UAAM,EAAE,OAAO,KAAK,KAAK,MAAM,IAAI;AACnC,UAAM,QAAQ,aAAa,OAAO;AAAA,MAC9B,MAAM;AAAA,MACN,WAAW;AAAA,MACX,MAAM,QAAO,2BAAM;AAAA,MACnB;AAAA,MACA;AAAA,MACA,cAAc,GAAG;AAAA,MACjB,gBAAgB;AAAA,IACpB,CAAC;AACD,QAAI,CAAC,MAAM,OAAO;AACd,UAAI,CAAC,MAAM,UAAU,CAAC,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO;AAC/C,YAAI,MAAM,KAAK,MAAM;AACjB,kBAAQ,MAAM,OAAO,oBAAoB,mBAAmB,MAAM,EAAE;AAAA,iBAC/D,IAAI,GAAG,MAAM,SAAS;AAC3B,kBAAQ,MAAM,OAAO,oBAAoB,4BAA4B,MAAM,EAAE;AACjF,YAAI,MAAM,SAAS;AACf,cAAI,KAAK;AACL,iBAAK,WAAW,OAAO,MAAM;AAAA;AAE7B,iBAAK,UAAU,MAAM;AAAA,QAC7B;AACA,iBAAS,MAAM;AACf;AAAA,MACJ;AACA,UAAI,CAACA,UAAS,IAAI,QAAQ,UAAU,gBAAgB,GAAG;AACnD;AAAA,UAAQ;AAAA;AAAA,UACR;AAAA,UAA0B;AAAA,QAAkE;AAAA,IACpG;AACA,QAAI,MAAM,GAAG;AACT,UAAI,MAAM;AACN,gBAAQ,MAAM,OAAO,oBAAoB,mBAAmB,MAAM,EAAE;AAAA,IAC5E,OACK;AACD,UAAI,CAAC,MAAM;AACP,gBAAQ,MAAM,OAAO,gBAAgB,qBAAqB,MAAM,QAAQ;AAC5E,UAAI,MAAM,SAAS;AACf,YAAI,kBAAkB;AACtB,aAAM,YAAW,MAAM,OAAO;AAC1B,kBAAQ,GAAG,MAAM;AAAA,YACb,KAAK;AAAA,YACL,KAAK;AACD;AAAA,YACJ,KAAK;AACD,gCAAkB,GAAG,OAAO,UAAU,CAAC;AACvC,oBAAM;AAAA,YACV;AACI,oBAAM;AAAA,UACd;AAAA,QACJ;AACA,YAAI,iBAAiB;AACjB,cAAI,OAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAC3C,cAAI,OAAO,IAAI;AACX,mBAAO,KAAK,SAAS,KAAK;AAC9B,cAAI,KAAK;AACL,iBAAK,WAAW,OAAO;AAAA;AAEvB,iBAAK,UAAU;AACnB,gBAAM,UAAU,MAAM,QAAQ,UAAU,gBAAgB,SAAS,CAAC;AAAA,QACtE;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,CAACA,UAAS,CAAC,OAAO,CAAC,MAAM,OAAO;AAGhC,YAAM,YAAY,QACZF,aAAY,KAAK,OAAO,OAAO,OAAO,IACtCC,kBAAiB,KAAK,MAAM,KAAK,KAAK,MAAM,OAAO,OAAO;AAChE,WAAK,MAAM,KAAK,SAAS;AACzB,eAAS,UAAU,MAAM,CAAC;AAC1B,UAAI,QAAQ,KAAK;AACb,gBAAQ,UAAU,OAAO,iBAAiB,QAAQ;AAAA,IAC1D,OACK;AAGD,UAAI,QAAQ;AACZ,YAAM,WAAW,MAAM;AACvB,YAAM,UAAU,MACVD,aAAY,KAAK,KAAK,OAAO,OAAO,IACpCC,kBAAiB,KAAK,UAAU,OAAO,MAAM,OAAO,OAAO;AACjE,UAAI,QAAQ,GAAG;AACX,gBAAQ,QAAQ,OAAO,iBAAiB,QAAQ;AACpD,UAAI,QAAQ;AAEZ,YAAM,aAAa,aAAa,OAAO,CAAC,GAAG;AAAA,QACvC,MAAM;AAAA,QACN,WAAW;AAAA,QACX,MAAM;AAAA,QACN,QAAQ,QAAQ,MAAM,CAAC;AAAA,QACvB;AAAA,QACA,cAAc,GAAG;AAAA,QACjB,gBAAgB;AAAA,MACpB,CAAC;AACD,UAAI,WAAW,OAAO;AAClB,YAAI,CAACC,UAAS,CAAC,MAAM,SAAS,IAAI,QAAQ,QAAQ;AAC9C,cAAI;AACA,uBAAW,MAAM,KAAK;AAClB,kBAAI,OAAO,WAAW;AAClB;AACJ,kBAAI,GAAG,SAAS,WAAW;AACvB,wBAAQ,IAAI,0BAA0B,kEAAkE;AACxG;AAAA,cACJ;AAAA,YACJ;AACJ,cAAI,MAAM,QAAQ,WAAW,MAAM,SAAS;AACxC,oBAAQ,WAAW,OAAO,uBAAuB,6FAA6F;AAAA,QACtJ;AAAA,MACJ,WACS,OAAO;AACZ,YAAI,YAAY,SAAS,MAAM,UAAU,MAAM,OAAO,CAAC,MAAM;AACzD,kBAAQ,OAAO,gBAAgB,4BAA4B,MAAM,EAAE;AAAA;AAEnE,kBAAQ,WAAW,OAAO,gBAAgB,0BAA0B,MAAM,QAAQ;AAAA,MAC1F;AAEA,YAAM,YAAY,QACZF,aAAY,KAAK,OAAO,YAAY,OAAO,IAC3C,WAAW,QACPC,kBAAiB,KAAK,WAAW,KAAK,KAAK,MAAM,YAAY,OAAO,IACpE;AACV,UAAI,WAAW;AACX,YAAI,QAAQ,KAAK;AACb,kBAAQ,UAAU,OAAO,iBAAiB,QAAQ;AAAA,MAC1D,WACS,WAAW,SAAS;AACzB,YAAI,QAAQ;AACR,kBAAQ,WAAW,OAAO,WAAW;AAAA;AAErC,kBAAQ,UAAU,WAAW;AAAA,MACrC;AACA,YAAM,OAAO,IAAI,KAAK,SAAS,SAAS;AACxC,UAAI,IAAI,QAAQ;AACZ,aAAK,WAAW;AACpB,UAAIC,QAAO;AACP,cAAMC,OAAM;AACZ,YAAI,YAAY,KAAKA,KAAI,OAAO,OAAO;AACnC,kBAAQ,UAAU,iBAAiB,yBAAyB;AAChE,QAAAA,KAAI,MAAM,KAAK,IAAI;AAAA,MACvB,OACK;AACD,cAAMA,OAAM,IAAI,QAAQ,IAAI,MAAM;AAClC,QAAAA,KAAI,OAAO;AACX,QAAAA,KAAI,MAAM,KAAK,IAAI;AACnB,cAAM,YAAY,aAAa,SAAS;AACxC,QAAAA,KAAI,QAAQ,CAAC,QAAQ,MAAM,CAAC,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC;AACvD,aAAK,MAAM,KAAKA,IAAG;AAAA,MACvB;AACA,eAAS,YAAY,UAAU,MAAM,CAAC,IAAI,WAAW;AAAA,IACzD;AAAA,EACJ;AACA,QAAM,cAAcD,SAAQ,MAAM;AAClC,QAAM,CAAC,IAAI,GAAG,EAAE,IAAI,GAAG;AACvB,MAAI,QAAQ;AACZ,MAAI,MAAM,GAAG,WAAW;AACpB,YAAQ,GAAG,SAAS,GAAG,OAAO;AAAA,OAC7B;AACD,UAAM,OAAO,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,UAAU,CAAC;AACzD,UAAM,MAAM,SACN,GAAG,IAAI,oBAAoB,WAAW,KACtC,GAAG,IAAI,qEAAqE,WAAW;AAC7F,YAAQ,QAAQ,SAAS,iBAAiB,cAAc,GAAG;AAC3D,QAAI,MAAM,GAAG,OAAO,WAAW;AAC3B,SAAG,QAAQ,EAAE;AAAA,EACrB;AACA,MAAI,GAAG,SAAS,GAAG;AACf,UAAM,MAAM,WAAW,IAAI,OAAO,IAAI,QAAQ,QAAQ,OAAO;AAC7D,QAAI,IAAI,SAAS;AACb,UAAI,KAAK;AACL,aAAK,WAAW,OAAO,IAAI;AAAA;AAE3B,aAAK,UAAU,IAAI;AAAA,IAC3B;AACA,SAAK,QAAQ,CAAC,GAAG,QAAQ,OAAO,IAAI,MAAM;AAAA,EAC9C,OACK;AACD,SAAK,QAAQ,CAAC,GAAG,QAAQ,OAAO,KAAK;AAAA,EACzC;AACA,SAAO;AACX;;;ACpMA,SAAS,kBAAkBE,KAAI,KAAK,OAAO,SAAS,SAAS,KAAK;AAC9D,QAAM,OAAO,MAAM,SAAS,cACtB,gBAAgBA,KAAI,KAAK,OAAO,SAAS,GAAG,IAC5C,MAAM,SAAS,cACX,gBAAgBA,KAAI,KAAK,OAAO,SAAS,GAAG,IAC5C,sBAAsBA,KAAI,KAAK,OAAO,SAAS,GAAG;AAC5D,QAAM,OAAO,KAAK;AAGlB,MAAI,YAAY,OAAO,YAAY,KAAK,SAAS;AAC7C,SAAK,MAAM,KAAK;AAChB,WAAO;AAAA,EACX;AACA,MAAI;AACA,SAAK,MAAM;AACf,SAAO;AACX;AACA,SAAS,kBAAkBA,KAAI,KAAK,OAAO,OAAO,SAAS;AAzB3D;AA0BI,QAAM,WAAW,MAAM;AACvB,QAAM,UAAU,CAAC,WACX,OACA,IAAI,WAAW,QAAQ,SAAS,QAAQ,SAAO,QAAQ,UAAU,sBAAsB,GAAG,CAAC;AACjG,MAAI,MAAM,SAAS,aAAa;AAC5B,UAAM,EAAE,QAAQ,kBAAkB,GAAG,IAAI;AACzC,UAAM,WAAW,UAAU,WACrB,OAAO,SAAS,SAAS,SACrB,SACA,WACH,UAAU;AACjB,QAAI,aAAa,CAAC,MAAM,GAAG,SAAS,SAAS,SAAS;AAClD,YAAM,UAAU;AAChB,cAAQ,UAAU,gBAAgB,OAAO;AAAA,IAC7C;AAAA,EACJ;AACA,QAAM,UAAU,MAAM,SAAS,cACzB,QACA,MAAM,SAAS,cACX,QACA,MAAM,MAAM,WAAW,MACnB,QACA;AAGd,MAAI,CAAC,YACD,CAAC,WACD,YAAY,OACX,YAAY,QAAQ,WAAW,YAAY,SAC3C,YAAY,QAAQ,WAAW,YAAY,OAAQ;AACpD,WAAO,kBAAkBA,KAAI,KAAK,OAAO,SAAS,OAAO;AAAA,EAC7D;AACA,MAAI,MAAM,IAAI,OAAO,KAAK,KAAK,OAAK,EAAE,QAAQ,WAAW,EAAE,eAAe,OAAO;AACjF,MAAI,CAAC,KAAK;AACN,UAAM,KAAK,IAAI,OAAO,UAAU,OAAO;AACvC,QAAI,MAAM,GAAG,eAAe,SAAS;AACjC,UAAI,OAAO,KAAK,KAAK,OAAO,OAAO,CAAC,GAAG,IAAI,EAAE,SAAS,MAAM,CAAC,CAAC;AAC9D,YAAM;AAAA,IACV,OACK;AACD,UAAI,IAAI;AACJ,gBAAQ,UAAU,uBAAuB,GAAG,GAAG,GAAG,aAAa,OAAO,4BAA4B,GAAG,cAAc,QAAQ,IAAI,IAAI;AAAA,MACvI,OACK;AACD,gBAAQ,UAAU,sBAAsB,mBAAmB,OAAO,IAAI,IAAI;AAAA,MAC9E;AACA,aAAO,kBAAkBA,KAAI,KAAK,OAAO,SAAS,OAAO;AAAA,IAC7D;AAAA,EACJ;AACA,QAAM,OAAO,kBAAkBA,KAAI,KAAK,OAAO,SAAS,SAAS,GAAG;AACpE,QAAM,QAAM,SAAI,YAAJ,6BAAc,MAAM,SAAO,QAAQ,UAAU,sBAAsB,GAAG,GAAG,IAAI,aAAY;AACrG,QAAM,OAAO,OAAO,GAAG,IACjB,MACA,IAAI,OAAO,GAAG;AACpB,OAAK,QAAQ,KAAK;AAClB,OAAK,MAAM;AACX,MAAI,2BAAK;AACL,SAAK,SAAS,IAAI;AACtB,SAAO;AACX;;;ACnFA,SAAS,mBAAmB,KAAK,QAAQ,SAAS;AAC9C,QAAM,QAAQ,OAAO;AACrB,QAAM,SAAS,uBAAuB,QAAQ,IAAI,QAAQ,QAAQ,OAAO;AACzE,MAAI,CAAC;AACD,WAAO,EAAE,OAAO,IAAI,MAAM,MAAM,SAAS,IAAI,OAAO,CAAC,OAAO,OAAO,KAAK,EAAE;AAC9E,QAAM,OAAO,OAAO,SAAS,MAAM,OAAO,eAAe,OAAO;AAChE,QAAM,QAAQ,OAAO,SAAS,WAAW,OAAO,MAAM,IAAI,CAAC;AAE3D,MAAI,aAAa,MAAM;AACvB,WAAS,IAAI,MAAM,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACxC,UAAM,UAAU,MAAM,CAAC,EAAE,CAAC;AAC1B,QAAI,YAAY,MAAM,YAAY;AAC9B,mBAAa;AAAA;AAEb;AAAA,EACR;AAEA,MAAI,eAAe,GAAG;AAClB,UAAMC,SAAQ,OAAO,UAAU,OAAO,MAAM,SAAS,IAC/C,KAAK,OAAO,KAAK,IAAI,GAAG,MAAM,SAAS,CAAC,CAAC,IACzC;AACN,QAAIC,OAAM,QAAQ,OAAO;AACzB,QAAI,OAAO;AACP,MAAAA,QAAO,OAAO,OAAO;AACzB,WAAO,EAAE,OAAAD,QAAO,MAAM,SAAS,OAAO,SAAS,OAAO,CAAC,OAAOC,MAAKA,IAAG,EAAE;AAAA,EAC5E;AAEA,MAAI,aAAa,OAAO,SAAS,OAAO;AACxC,MAAI,SAAS,OAAO,SAAS,OAAO;AACpC,MAAI,eAAe;AACnB,WAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AACjC,UAAM,CAAC,QAAQ,OAAO,IAAI,MAAM,CAAC;AACjC,QAAI,YAAY,MAAM,YAAY,MAAM;AACpC,UAAI,OAAO,WAAW,KAAK,OAAO,SAAS;AACvC,qBAAa,OAAO;AAAA,IAC5B,OACK;AACD,UAAI,OAAO,SAAS,YAAY;AAC5B,cAAM,UAAU;AAChB,gBAAQ,SAAS,OAAO,QAAQ,gBAAgB,OAAO;AAAA,MAC3D;AACA,UAAI,OAAO,WAAW;AAClB,qBAAa,OAAO;AACxB,qBAAe;AACf,UAAI,eAAe,KAAK,CAAC,IAAI,QAAQ;AACjC,cAAM,UAAU;AAChB,gBAAQ,QAAQ,cAAc,OAAO;AAAA,MACzC;AACA;AAAA,IACJ;AACA,cAAU,OAAO,SAAS,QAAQ,SAAS;AAAA,EAC/C;AAEA,WAAS,IAAI,MAAM,SAAS,GAAG,KAAK,YAAY,EAAE,GAAG;AACjD,QAAI,MAAM,CAAC,EAAE,CAAC,EAAE,SAAS;AACrB,mBAAa,IAAI;AAAA,EACzB;AACA,MAAI,QAAQ;AACZ,MAAI,MAAM;AACV,MAAI,mBAAmB;AAEvB,WAAS,IAAI,GAAG,IAAI,cAAc,EAAE;AAChC,aAAS,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,UAAU,IAAI;AAC7C,WAAS,IAAI,cAAc,IAAI,YAAY,EAAE,GAAG;AAC5C,QAAI,CAAC,QAAQ,OAAO,IAAI,MAAM,CAAC;AAC/B,cAAU,OAAO,SAAS,QAAQ,SAAS;AAC3C,UAAM,OAAO,QAAQ,QAAQ,SAAS,CAAC,MAAM;AAC7C,QAAI;AACA,gBAAU,QAAQ,MAAM,GAAG,EAAE;AAEjC,QAAI,WAAW,OAAO,SAAS,YAAY;AACvC,YAAM,MAAM,OAAO,SACb,mCACA;AACN,YAAM,UAAU,2DAA2D,GAAG;AAC9E,cAAQ,SAAS,QAAQ,UAAU,OAAO,IAAI,IAAI,cAAc,OAAO;AACvE,eAAS;AAAA,IACb;AACA,QAAI,SAAS,OAAO,eAAe;AAC/B,eAAS,MAAM,OAAO,MAAM,UAAU,IAAI;AAC1C,YAAM;AAAA,IACV,WACS,OAAO,SAAS,cAAc,QAAQ,CAAC,MAAM,KAAM;AAExD,UAAI,QAAQ;AACR,cAAM;AAAA,eACD,CAAC,oBAAoB,QAAQ;AAClC,cAAM;AACV,eAAS,MAAM,OAAO,MAAM,UAAU,IAAI;AAC1C,YAAM;AACN,yBAAmB;AAAA,IACvB,WACS,YAAY,IAAI;AAErB,UAAI,QAAQ;AACR,iBAAS;AAAA;AAET,cAAM;AAAA,IACd,OACK;AACD,eAAS,MAAM;AACf,YAAM;AACN,yBAAmB;AAAA,IACvB;AAAA,EACJ;AACA,UAAQ,OAAO,OAAO;AAAA,IAClB,KAAK;AACD;AAAA,IACJ,KAAK;AACD,eAAS,IAAI,YAAY,IAAI,MAAM,QAAQ,EAAE;AACzC,iBAAS,OAAO,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,UAAU;AAChD,UAAI,MAAM,MAAM,SAAS,CAAC,MAAM;AAC5B,iBAAS;AACb;AAAA,IACJ;AACI,eAAS;AAAA,EACjB;AACA,QAAM,MAAM,QAAQ,OAAO,SAAS,OAAO,OAAO;AAClD,SAAO,EAAE,OAAO,MAAM,SAAS,OAAO,SAAS,OAAO,CAAC,OAAO,KAAK,GAAG,EAAE;AAC5E;AACA,SAAS,uBAAuB,EAAE,QAAQ,MAAM,GAAG,QAAQ,SAAS;AAEhE,MAAI,MAAM,CAAC,EAAE,SAAS,uBAAuB;AACzC,YAAQ,MAAM,CAAC,GAAG,cAAc,+BAA+B;AAC/D,WAAO;AAAA,EACX;AACA,QAAM,EAAE,OAAO,IAAI,MAAM,CAAC;AAC1B,QAAM,OAAO,OAAO,CAAC;AACrB,MAAI,SAAS;AACb,MAAI,QAAQ;AACZ,MAAI,QAAQ;AACZ,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACpC,UAAM,KAAK,OAAO,CAAC;AACnB,QAAI,CAAC,UAAU,OAAO,OAAO,OAAO;AAChC,cAAQ;AAAA,SACP;AACD,YAAM,IAAI,OAAO,EAAE;AACnB,UAAI,CAAC,UAAU;AACX,iBAAS;AAAA,eACJ,UAAU;AACf,gBAAQ,SAAS;AAAA,IACzB;AAAA,EACJ;AACA,MAAI,UAAU;AACV,YAAQ,OAAO,oBAAoB,kDAAkD,MAAM,EAAE;AACjG,MAAI,WAAW;AACf,MAAI,UAAU;AACd,MAAI,SAAS,OAAO;AACpB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACnC,UAAM,QAAQ,MAAM,CAAC;AACrB,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK;AACD,mBAAW;AAAA;AAAA,MAEf,KAAK;AACD,kBAAU,MAAM,OAAO;AACvB;AAAA,MACJ,KAAK;AACD,YAAI,UAAU,CAAC,UAAU;AACrB,gBAAM,UAAU;AAChB,kBAAQ,OAAO,gBAAgB,OAAO;AAAA,QAC1C;AACA,kBAAU,MAAM,OAAO;AACvB,kBAAU,MAAM,OAAO,UAAU,CAAC;AAClC;AAAA,MACJ,KAAK;AACD,gBAAQ,OAAO,oBAAoB,MAAM,OAAO;AAChD,kBAAU,MAAM,OAAO;AACvB;AAAA;AAAA,MAEJ,SAAS;AACL,cAAM,UAAU,4CAA4C,MAAM,IAAI;AACtE,gBAAQ,OAAO,oBAAoB,OAAO;AAC1C,cAAM,KAAK,MAAM;AACjB,YAAI,MAAM,OAAO,OAAO;AACpB,oBAAU,GAAG;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO,EAAE,MAAM,QAAQ,OAAO,SAAS,OAAO;AAClD;AAEA,SAAS,WAAW,QAAQ;AACxB,QAAM,QAAQ,OAAO,MAAM,QAAQ;AACnC,QAAM,QAAQ,MAAM,CAAC;AACrB,QAAM,IAAI,MAAM,MAAM,OAAO;AAC7B,QAAM,SAAQ,uBAAI,MACZ,CAAC,EAAE,CAAC,GAAG,MAAM,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,IAC/B,CAAC,IAAI,KAAK;AAChB,QAAM,QAAQ,CAAC,KAAK;AACpB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,UAAM,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC;AACvC,SAAO;AACX;;;AChMA,SAAS,kBAAkB,QAAQ,QAAQ,SAAS;AAChD,QAAM,EAAE,QAAQ,MAAM,QAAQ,IAAI,IAAI;AACtC,MAAI;AACJ,MAAI;AACJ,QAAM,WAAW,CAAC,KAAK,MAAM,QAAQ,QAAQ,SAAS,KAAK,MAAM,GAAG;AACpE,UAAQ,MAAM;AAAA,IACV,KAAK;AACD,cAAQ,OAAO;AACf,cAAQ,WAAW,QAAQ,QAAQ;AACnC;AAAA,IACJ,KAAK;AACD,cAAQ,OAAO;AACf,cAAQ,kBAAkB,QAAQ,QAAQ;AAC1C;AAAA,IACJ,KAAK;AACD,cAAQ,OAAO;AACf,cAAQ,kBAAkB,QAAQ,QAAQ;AAC1C;AAAA;AAAA,IAEJ;AACI,cAAQ,QAAQ,oBAAoB,4CAA4C,IAAI,EAAE;AACtF,aAAO;AAAA,QACH,OAAO;AAAA,QACP,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAO,CAAC,QAAQ,SAAS,OAAO,QAAQ,SAAS,OAAO,MAAM;AAAA,MAClE;AAAA,EACR;AACA,QAAM,WAAW,SAAS,OAAO;AACjC,QAAM,KAAK,WAAW,KAAK,UAAU,QAAQ,OAAO;AACpD,SAAO;AAAA,IACH;AAAA,IACA,MAAM;AAAA,IACN,SAAS,GAAG;AAAA,IACZ,OAAO,CAAC,QAAQ,UAAU,GAAG,MAAM;AAAA,EACvC;AACJ;AACA,SAAS,WAAW,QAAQ,SAAS;AACjC,MAAI,UAAU;AACd,UAAQ,OAAO,CAAC,GAAG;AAAA;AAAA,IAEf,KAAK;AACD,gBAAU;AACV;AAAA,IACJ,KAAK;AACD,gBAAU;AACV;AAAA,IACJ,KAAK;AACD,gBAAU;AACV;AAAA,IACJ,KAAK;AAAA,IACL,KAAK,KAAK;AACN,gBAAU,0BAA0B,OAAO,CAAC,CAAC;AAC7C;AAAA,IACJ;AAAA,IACA,KAAK;AAAA,IACL,KAAK,KAAK;AACN,gBAAU,sBAAsB,OAAO,CAAC,CAAC;AACzC;AAAA,IACJ;AAAA,EACJ;AACA,MAAI;AACA,YAAQ,GAAG,oBAAoB,iCAAiC,OAAO,EAAE;AAC7E,SAAO,UAAU,MAAM;AAC3B;AACA,SAAS,kBAAkB,QAAQ,SAAS;AACxC,MAAI,OAAO,OAAO,SAAS,CAAC,MAAM,OAAO,OAAO,WAAW;AACvD,YAAQ,OAAO,QAAQ,gBAAgB,wBAAwB;AACnE,SAAO,UAAU,OAAO,MAAM,GAAG,EAAE,CAAC,EAAE,QAAQ,OAAO,GAAG;AAC5D;AACA,SAAS,UAAU,QAAQ;AAQvB,MAAI,OAAO;AACX,MAAI;AACA,YAAQ,IAAI,OAAO,4BAA8B,IAAI;AACrD,WAAO,IAAI,OAAO,sCAAyC,IAAI;AAAA,EACnE,QACM;AACF,YAAQ;AACR,WAAO;AAAA,EACX;AACA,MAAI,QAAQ,MAAM,KAAK,MAAM;AAC7B,MAAI,CAAC;AACD,WAAO;AACX,MAAI,MAAM,MAAM,CAAC;AACjB,MAAI,MAAM;AACV,MAAI,MAAM,MAAM;AAChB,OAAK,YAAY;AACjB,SAAQ,QAAQ,KAAK,KAAK,MAAM,GAAI;AAChC,QAAI,MAAM,CAAC,MAAM,IAAI;AACjB,UAAI,QAAQ;AACR,eAAO;AAAA;AAEP,cAAM;AAAA,IACd,OACK;AACD,aAAO,MAAM,MAAM,CAAC;AACpB,YAAM;AAAA,IACV;AACA,UAAM,KAAK;AAAA,EACf;AACA,QAAM,OAAO;AACb,OAAK,YAAY;AACjB,UAAQ,KAAK,KAAK,MAAM;AACxB,SAAO,MAAM,QAAO,+BAAQ,OAAM;AACtC;AACA,SAAS,kBAAkB,QAAQ,SAAS;AACxC,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,OAAO,SAAS,GAAG,EAAE,GAAG;AACxC,UAAM,KAAK,OAAO,CAAC;AACnB,QAAI,OAAO,QAAQ,OAAO,IAAI,CAAC,MAAM;AACjC;AACJ,QAAI,OAAO,MAAM;AACb,YAAM,EAAE,MAAM,OAAO,IAAI,YAAY,QAAQ,CAAC;AAC9C,aAAO;AACP,UAAI;AAAA,IACR,WACS,OAAO,MAAM;AAClB,UAAI,OAAO,OAAO,EAAE,CAAC;AACrB,YAAM,KAAK,YAAY,IAAI;AAC3B,UAAI;AACA,eAAO;AAAA,eACF,SAAS,MAAM;AAEpB,eAAO,OAAO,IAAI,CAAC;AACnB,eAAO,SAAS,OAAO,SAAS;AAC5B,iBAAO,OAAO,EAAE,IAAI,CAAC;AAAA,MAC7B,WACS,SAAS,QAAQ,OAAO,IAAI,CAAC,MAAM,MAAM;AAE9C,eAAO,OAAO,EAAE,IAAI,CAAC;AACrB,eAAO,SAAS,OAAO,SAAS;AAC5B,iBAAO,OAAO,EAAE,IAAI,CAAC;AAAA,MAC7B,WACS,SAAS,OAAO,SAAS,OAAO,SAAS,KAAK;AACnD,cAAM,SAAS,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI;AACxC,eAAO,cAAc,QAAQ,IAAI,GAAG,QAAQ,OAAO;AACnD,aAAK;AAAA,MACT,OACK;AACD,cAAM,MAAM,OAAO,OAAO,IAAI,GAAG,CAAC;AAClC,gBAAQ,IAAI,GAAG,iBAAiB,2BAA2B,GAAG,EAAE;AAChE,eAAO;AAAA,MACX;AAAA,IACJ,WACS,OAAO,OAAO,OAAO,KAAM;AAEhC,YAAM,UAAU;AAChB,UAAI,OAAO,OAAO,IAAI,CAAC;AACvB,aAAO,SAAS,OAAO,SAAS;AAC5B,eAAO,OAAO,EAAE,IAAI,CAAC;AACzB,UAAI,SAAS,QAAQ,EAAE,SAAS,QAAQ,OAAO,IAAI,CAAC,MAAM;AACtD,eAAO,IAAI,UAAU,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;AAAA,IAC5D,OACK;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AACA,MAAI,OAAO,OAAO,SAAS,CAAC,MAAM,OAAO,OAAO,WAAW;AACvD,YAAQ,OAAO,QAAQ,gBAAgB,wBAAwB;AACnE,SAAO;AACX;AAKA,SAAS,YAAY,QAAQ,QAAQ;AACjC,MAAI,OAAO;AACX,MAAI,KAAK,OAAO,SAAS,CAAC;AAC1B,SAAO,OAAO,OAAO,OAAO,OAAQ,OAAO,QAAQ,OAAO,MAAM;AAC5D,QAAI,OAAO,QAAQ,OAAO,SAAS,CAAC,MAAM;AACtC;AACJ,QAAI,OAAO;AACP,cAAQ;AACZ,cAAU;AACV,SAAK,OAAO,SAAS,CAAC;AAAA,EAC1B;AACA,MAAI,CAAC;AACD,WAAO;AACX,SAAO,EAAE,MAAM,OAAO;AAC1B;AACA,IAAM,cAAc;AAAA,EAChB,KAAK;AAAA;AAAA,EACL,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,GAAG;AAAA;AAAA,EACH,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,MAAM;AAAA,EACN,KAAM;AACV;AACA,SAAS,cAAc,QAAQ,QAAQ,QAAQ,SAAS;AACpD,QAAM,KAAK,OAAO,OAAO,QAAQ,MAAM;AACvC,QAAM,KAAK,GAAG,WAAW,UAAU,iBAAiB,KAAK,EAAE;AAC3D,QAAM,OAAO,KAAK,SAAS,IAAI,EAAE,IAAI;AACrC,MAAI,MAAM,IAAI,GAAG;AACb,UAAM,MAAM,OAAO,OAAO,SAAS,GAAG,SAAS,CAAC;AAChD,YAAQ,SAAS,GAAG,iBAAiB,2BAA2B,GAAG,EAAE;AACrE,WAAO;AAAA,EACX;AACA,SAAO,OAAO,cAAc,IAAI;AACpC;;;ACvNA,SAAS,cAAc,KAAK,OAAO,UAAU,SAAS;AAClD,QAAM,EAAE,OAAO,MAAM,SAAS,MAAM,IAAI,MAAM,SAAS,iBACjD,mBAAmB,KAAK,OAAO,OAAO,IACtC,kBAAkB,OAAO,IAAI,QAAQ,QAAQ,OAAO;AAC1D,QAAM,UAAU,WACV,IAAI,WAAW,QAAQ,SAAS,QAAQ,SAAO,QAAQ,UAAU,sBAAsB,GAAG,CAAC,IAC3F;AACN,MAAI;AACJ,MAAI,IAAI,QAAQ,cAAc,IAAI,OAAO;AACrC,UAAM,IAAI,OAAO,MAAM;AAAA,EAC3B,WACS;AACL,UAAM,oBAAoB,IAAI,QAAQ,OAAO,SAAS,UAAU,OAAO;AAAA,WAClE,MAAM,SAAS;AACpB,UAAM,oBAAoB,KAAK,OAAO,OAAO,OAAO;AAAA;AAEpD,UAAM,IAAI,OAAO,MAAM;AAC3B,MAAI;AACJ,MAAI;AACA,UAAM,MAAM,IAAI,QAAQ,OAAO,SAAO,QAAQ,YAAY,OAAO,sBAAsB,GAAG,GAAG,IAAI,OAAO;AACxG,aAAS,SAAS,GAAG,IAAI,MAAM,IAAI,OAAO,GAAG;AAAA,EACjD,SACO,OAAO;AACV,UAAM,MAAM,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AACjE,YAAQ,YAAY,OAAO,sBAAsB,GAAG;AACpD,aAAS,IAAI,OAAO,KAAK;AAAA,EAC7B;AACA,SAAO,QAAQ;AACf,SAAO,SAAS;AAChB,MAAI;AACA,WAAO,OAAO;AAClB,MAAI;AACA,WAAO,MAAM;AACjB,MAAI,IAAI;AACJ,WAAO,SAAS,IAAI;AACxB,MAAI;AACA,WAAO,UAAU;AACrB,SAAO;AACX;AACA,SAAS,oBAAoBC,SAAQ,OAAO,SAAS,UAAU,SAAS;AA5CxE;AA6CI,MAAI,YAAY;AACZ,WAAOA,QAAO,MAAM;AACxB,QAAM,gBAAgB,CAAC;AACvB,aAAW,OAAOA,QAAO,MAAM;AAC3B,QAAI,CAAC,IAAI,cAAc,IAAI,QAAQ,SAAS;AACxC,UAAI,IAAI,WAAW,IAAI;AACnB,sBAAc,KAAK,GAAG;AAAA;AAEtB,eAAO;AAAA,IACf;AAAA,EACJ;AACA,aAAW,OAAO;AACd,SAAI,SAAI,SAAJ,mBAAU,KAAK;AACf,aAAO;AACf,QAAM,KAAKA,QAAO,UAAU,OAAO;AACnC,MAAI,MAAM,CAAC,GAAG,YAAY;AAGtB,IAAAA,QAAO,KAAK,KAAK,OAAO,OAAO,CAAC,GAAG,IAAI,EAAE,SAAS,OAAO,MAAM,OAAU,CAAC,CAAC;AAC3E,WAAO;AAAA,EACX;AACA,UAAQ,UAAU,sBAAsB,mBAAmB,OAAO,IAAI,YAAY,uBAAuB;AACzG,SAAOA,QAAO,MAAM;AACxB;AACA,SAAS,oBAAoB,EAAE,OAAO,YAAY,QAAAA,QAAO,GAAG,OAAO,OAAO,SAAS;AAC/E,QAAM,MAAMA,QAAO,KAAK,KAAK,CAAAC,SAAI;AAtErC;AAsEyC,YAAAA,KAAI,YAAY,QAAS,SAASA,KAAI,YAAY,YACnF,KAAAA,KAAI,SAAJ,mBAAU,KAAK;AAAA,GAAM,KAAKD,QAAO,MAAM;AAC3C,MAAIA,QAAO,QAAQ;AACf,UAAM,SAASA,QAAO,OAAO,KAAK,CAAAC,SAAI;AAzE9C;AAyEiD,aAAAA,KAAI,aAAW,KAAAA,KAAI,SAAJ,mBAAU,KAAK;AAAA,KAAM,KACzED,QAAO,MAAM;AACjB,QAAI,IAAI,QAAQ,OAAO,KAAK;AACxB,YAAM,KAAK,WAAW,UAAU,IAAI,GAAG;AACvC,YAAM,KAAK,WAAW,UAAU,OAAO,GAAG;AAC1C,YAAM,MAAM,iCAAiC,EAAE,OAAO,EAAE;AACxD,cAAQ,OAAO,sBAAsB,KAAK,IAAI;AAAA,IAClD;AAAA,EACJ;AACA,SAAO;AACX;;;ACnFA,SAAS,oBAAoB,QAAQ,QAAQ,KAAK;AAC9C,MAAI,QAAQ;AACR,YAAQ,MAAM,OAAO;AACrB,aAAS,IAAI,MAAM,GAAG,KAAK,GAAG,EAAE,GAAG;AAC/B,UAAI,KAAK,OAAO,CAAC;AACjB,cAAQ,GAAG,MAAM;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,oBAAU,GAAG,OAAO;AACpB;AAAA,MACR;AAGA,WAAK,OAAO,EAAE,CAAC;AACf,cAAO,yBAAI,UAAS,SAAS;AACzB,kBAAU,GAAG,OAAO;AACpB,aAAK,OAAO,EAAE,CAAC;AAAA,MACnB;AACA;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;;;AChBA,IAAM,KAAK,EAAE,aAAa,iBAAiB;AAC3C,SAAS,YAAY,KAAK,OAAO,OAAO,SAAS;AAC7C,QAAM,QAAQ,IAAI;AAClB,QAAM,EAAE,aAAa,SAAS,QAAQ,IAAI,IAAI;AAC9C,MAAI;AACJ,MAAI,aAAa;AACjB,UAAQ,MAAM,MAAM;AAAA,IAChB,KAAK;AACD,aAAO,aAAa,KAAK,OAAO,OAAO;AACvC,UAAI,UAAU;AACV,gBAAQ,OAAO,eAAe,+CAA+C;AACjF;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO,cAAc,KAAK,OAAO,KAAK,OAAO;AAC7C,UAAI;AACA,aAAK,SAAS,OAAO,OAAO,UAAU,CAAC;AAC3C;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO,kBAAkB,IAAI,KAAK,OAAO,OAAO,OAAO;AACvD,UAAI;AACA,aAAK,SAAS,OAAO,OAAO,UAAU,CAAC;AAC3C;AAAA,IACJ,SAAS;AACL,YAAM,UAAU,MAAM,SAAS,UACzB,MAAM,UACN,4BAA4B,MAAM,IAAI;AAC5C,cAAQ,OAAO,oBAAoB,OAAO;AAC1C,aAAO,iBAAiB,KAAK,MAAM,QAAQ,QAAW,MAAM,OAAO,OAAO;AAC1E,mBAAa;AAAA,IACjB;AAAA,EACJ;AACA,MAAI,UAAU,KAAK,WAAW;AAC1B,YAAQ,QAAQ,aAAa,kCAAkC;AACnE,MAAI,SACA,IAAI,QAAQ,eACX,CAAC,SAAS,IAAI,KACX,OAAO,KAAK,UAAU,YACrB,KAAK,OAAO,KAAK,QAAQ,0BAA2B;AACzD,UAAM,MAAM;AACZ,YAAQ,OAAO,OAAO,kBAAkB,GAAG;AAAA,EAC/C;AACA,MAAI;AACA,SAAK,cAAc;AACvB,MAAI,SAAS;AACT,QAAI,MAAM,SAAS,YAAY,MAAM,WAAW;AAC5C,WAAK,UAAU;AAAA;AAEf,WAAK,gBAAgB;AAAA,EAC7B;AAEA,MAAI,IAAI,QAAQ,oBAAoB;AAChC,SAAK,WAAW;AACpB,SAAO;AACX;AACA,SAAS,iBAAiB,KAAK,QAAQ,QAAQ,KAAK,EAAE,aAAa,SAAS,QAAQ,KAAK,IAAI,GAAG,SAAS;AACrG,QAAM,QAAQ;AAAA,IACV,MAAM;AAAA,IACN,QAAQ,oBAAoB,QAAQ,QAAQ,GAAG;AAAA,IAC/C,QAAQ;AAAA,IACR,QAAQ;AAAA,EACZ;AACA,QAAM,OAAO,cAAc,KAAK,OAAO,KAAK,OAAO;AACnD,MAAI,QAAQ;AACR,SAAK,SAAS,OAAO,OAAO,UAAU,CAAC;AACvC,QAAI,KAAK,WAAW;AAChB,cAAQ,QAAQ,aAAa,kCAAkC;AAAA,EACvE;AACA,MAAI;AACA,SAAK,cAAc;AACvB,MAAI,SAAS;AACT,SAAK,UAAU;AACf,SAAK,MAAM,CAAC,IAAI;AAAA,EACpB;AACA,SAAO;AACX;AACA,SAAS,aAAa,EAAE,QAAQ,GAAG,EAAE,QAAQ,QAAQ,IAAI,GAAG,SAAS;AACjE,QAAM,QAAQ,IAAI,MAAM,OAAO,UAAU,CAAC,CAAC;AAC3C,MAAI,MAAM,WAAW;AACjB,YAAQ,QAAQ,aAAa,iCAAiC;AAClE,MAAI,MAAM,OAAO,SAAS,GAAG;AACzB,YAAQ,SAAS,OAAO,SAAS,GAAG,aAAa,kCAAkC,IAAI;AAC3F,QAAM,WAAW,SAAS,OAAO;AACjC,QAAM,KAAK,WAAW,KAAK,UAAU,QAAQ,QAAQ,OAAO;AAC5D,QAAM,QAAQ,CAAC,QAAQ,UAAU,GAAG,MAAM;AAC1C,MAAI,GAAG;AACH,UAAM,UAAU,GAAG;AACvB,SAAO;AACX;;;AC9FA,SAAS,WAAW,SAAS,YAAY,EAAE,QAAQ,OAAO,OAAO,IAAI,GAAG,SAAS;AAC7E,QAAM,OAAO,OAAO,OAAO,EAAE,aAAa,WAAW,GAAG,OAAO;AAC/D,QAAM,MAAM,IAAI,SAAS,QAAW,IAAI;AACxC,QAAM,MAAM;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,YAAY,IAAI;AAAA,IAChB,SAAS,IAAI;AAAA,IACb,QAAQ,IAAI;AAAA,EAChB;AACA,QAAM,QAAQ,aAAa,OAAO;AAAA,IAC9B,WAAW;AAAA,IACX,MAAM,UAAS,2BAAM;AAAA,IACrB;AAAA,IACA;AAAA,IACA,cAAc;AAAA,IACd,gBAAgB;AAAA,EACpB,CAAC;AACD,MAAI,MAAM,OAAO;AACb,QAAI,WAAW,WAAW;AAC1B,QAAI,UACC,MAAM,SAAS,eAAe,MAAM,SAAS,gBAC9C,CAAC,MAAM;AACP,cAAQ,MAAM,KAAK,gBAAgB,uEAAuE;AAAA,EAClH;AAEA,MAAI,WAAW,QACT,YAAY,KAAK,OAAO,OAAO,OAAO,IACtC,iBAAiB,KAAK,MAAM,KAAK,OAAO,MAAM,OAAO,OAAO;AAClE,QAAM,aAAa,IAAI,SAAS,MAAM,CAAC;AACvC,QAAM,KAAK,WAAW,KAAK,YAAY,OAAO,OAAO;AACrD,MAAI,GAAG;AACH,QAAI,UAAU,GAAG;AACrB,MAAI,QAAQ,CAAC,QAAQ,YAAY,GAAG,MAAM;AAC1C,SAAO;AACX;;;ACjCA,SAAS,YAAY,KAAK;AACtB,MAAI,OAAO,QAAQ;AACf,WAAO,CAAC,KAAK,MAAM,CAAC;AACxB,MAAI,MAAM,QAAQ,GAAG;AACjB,WAAO,IAAI,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACnD,QAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,SAAO,CAAC,QAAQ,UAAU,OAAO,WAAW,WAAW,OAAO,SAAS,EAAE;AAC7E;AACA,SAAS,aAAa,SAAS;AAf/B;AAgBI,MAAI,UAAU;AACd,MAAI,YAAY;AAChB,MAAI,iBAAiB;AACrB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACrC,UAAM,SAAS,QAAQ,CAAC;AACxB,YAAQ,OAAO,CAAC,GAAG;AAAA,MACf,KAAK;AACD,oBACK,YAAY,KAAK,KAAK,iBAAiB,SAAS,SAC5C,OAAO,UAAU,CAAC,KAAK;AAChC,oBAAY;AACZ,yBAAiB;AACjB;AAAA,MACJ,KAAK;AACD,cAAI,aAAQ,IAAI,CAAC,MAAb,mBAAiB,QAAO;AACxB,eAAK;AACT,oBAAY;AACZ;AAAA,MACJ;AAEI,YAAI,CAAC;AACD,2BAAiB;AACrB,oBAAY;AAAA,IACpB;AAAA,EACJ;AACA,SAAO,EAAE,SAAS,eAAe;AACrC;AAYA,IAAM,WAAN,MAAe;AAAA,EACX,YAAY,UAAU,CAAC,GAAG;AACtB,SAAK,MAAM;AACX,SAAK,eAAe;AACpB,SAAK,UAAU,CAAC;AAChB,SAAK,SAAS,CAAC;AACf,SAAK,WAAW,CAAC;AACjB,SAAK,UAAU,CAAC,QAAQ,MAAM,SAAS,YAAY;AAC/C,YAAM,MAAM,YAAY,MAAM;AAC9B,UAAI;AACA,aAAK,SAAS,KAAK,IAAI,YAAY,KAAK,MAAM,OAAO,CAAC;AAAA;AAEtD,aAAK,OAAO,KAAK,IAAI,eAAe,KAAK,MAAM,OAAO,CAAC;AAAA,IAC/D;AAEA,SAAK,aAAa,IAAI,WAAW,EAAE,SAAS,QAAQ,WAAW,MAAM,CAAC;AACtE,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,SAAS,KAAK,UAAU;AACpB,UAAM,EAAE,SAAS,eAAe,IAAI,aAAa,KAAK,OAAO;AAE7D,QAAI,SAAS;AACT,YAAM,KAAK,IAAI;AACf,UAAI,UAAU;AACV,YAAI,UAAU,IAAI,UAAU,GAAG,IAAI,OAAO;AAAA,EAAK,OAAO,KAAK;AAAA,MAC/D,WACS,kBAAkB,IAAI,WAAW,YAAY,CAAC,IAAI;AACvD,YAAI,gBAAgB;AAAA,MACxB,WACS,aAAa,EAAE,KAAK,CAAC,GAAG,QAAQ,GAAG,MAAM,SAAS,GAAG;AAC1D,YAAI,KAAK,GAAG,MAAM,CAAC;AACnB,YAAI,OAAO,EAAE;AACT,eAAK,GAAG;AACZ,cAAM,KAAK,GAAG;AACd,WAAG,gBAAgB,KAAK,GAAG,OAAO;AAAA,EAAK,EAAE,KAAK;AAAA,MAClD,OACK;AACD,cAAM,KAAK,GAAG;AACd,WAAG,gBAAgB,KAAK,GAAG,OAAO;AAAA,EAAK,EAAE,KAAK;AAAA,MAClD;AAAA,IACJ;AACA,QAAI,UAAU;AACV,YAAM,UAAU,KAAK,MAAM,IAAI,QAAQ,KAAK,MAAM;AAClD,YAAM,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,QAAQ;AAAA,IAC1D,OACK;AACD,UAAI,SAAS,KAAK;AAClB,UAAI,WAAW,KAAK;AAAA,IACxB;AACA,SAAK,UAAU,CAAC;AAChB,SAAK,SAAS,CAAC;AACf,SAAK,WAAW,CAAC;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa;AACT,WAAO;AAAA,MACH,SAAS,aAAa,KAAK,OAAO,EAAE;AAAA,MACpC,YAAY,KAAK;AAAA,MACjB,QAAQ,KAAK;AAAA,MACb,UAAU,KAAK;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,CAAC,QAAQ,QAAQ,WAAW,OAAO,YAAY,IAAI;AAC/C,eAAW,SAAS;AAChB,aAAO,KAAK,KAAK,KAAK;AAC1B,WAAO,KAAK,IAAI,UAAU,SAAS;AAAA,EACvC;AAAA;AAAA,EAEA,CAAC,KAAK,OAAO;AACT,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK;AACD,aAAK,WAAW,IAAI,MAAM,QAAQ,CAAC,QAAQ,SAAS,YAAY;AAC5D,gBAAM,MAAM,YAAY,KAAK;AAC7B,cAAI,CAAC,KAAK;AACV,eAAK,QAAQ,KAAK,iBAAiB,SAAS,OAAO;AAAA,QACvD,CAAC;AACD,aAAK,QAAQ,KAAK,MAAM,MAAM;AAC9B,aAAK,eAAe;AACpB;AAAA,MACJ,KAAK,YAAY;AACb,cAAM,MAAM,WAAW,KAAK,SAAS,KAAK,YAAY,OAAO,KAAK,OAAO;AACzE,YAAI,KAAK,gBAAgB,CAAC,IAAI,WAAW;AACrC,eAAK,QAAQ,OAAO,gBAAgB,iDAAiD;AACzF,aAAK,SAAS,KAAK,KAAK;AACxB,YAAI,KAAK;AACL,gBAAM,KAAK;AACf,aAAK,MAAM;AACX,aAAK,eAAe;AACpB;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AACD;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,aAAK,QAAQ,KAAK,MAAM,MAAM;AAC9B;AAAA,MACJ,KAAK,SAAS;AACV,cAAM,MAAM,MAAM,SACZ,GAAG,MAAM,OAAO,KAAK,KAAK,UAAU,MAAM,MAAM,CAAC,KACjD,MAAM;AACZ,cAAM,QAAQ,IAAI,eAAe,YAAY,KAAK,GAAG,oBAAoB,GAAG;AAC5E,YAAI,KAAK,gBAAgB,CAAC,KAAK;AAC3B,eAAK,OAAO,KAAK,KAAK;AAAA;AAEtB,eAAK,IAAI,OAAO,KAAK,KAAK;AAC9B;AAAA,MACJ;AAAA,MACA,KAAK,WAAW;AACZ,YAAI,CAAC,KAAK,KAAK;AACX,gBAAM,MAAM;AACZ,eAAK,OAAO,KAAK,IAAI,eAAe,YAAY,KAAK,GAAG,oBAAoB,GAAG,CAAC;AAChF;AAAA,QACJ;AACA,aAAK,IAAI,WAAW,SAAS;AAC7B,cAAM,MAAM,WAAW,MAAM,KAAK,MAAM,SAAS,MAAM,OAAO,QAAQ,KAAK,IAAI,QAAQ,QAAQ,KAAK,OAAO;AAC3G,aAAK,SAAS,KAAK,KAAK,IAAI;AAC5B,YAAI,IAAI,SAAS;AACb,gBAAM,KAAK,KAAK,IAAI;AACpB,eAAK,IAAI,UAAU,KAAK,GAAG,EAAE;AAAA,EAAK,IAAI,OAAO,KAAK,IAAI;AAAA,QAC1D;AACA,aAAK,IAAI,MAAM,CAAC,IAAI,IAAI;AACxB;AAAA,MACJ;AAAA,MACA;AACI,aAAK,OAAO,KAAK,IAAI,eAAe,YAAY,KAAK,GAAG,oBAAoB,qBAAqB,MAAM,IAAI,EAAE,CAAC;AAAA,IACtH;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,CAAC,IAAI,WAAW,OAAO,YAAY,IAAI;AACnC,QAAI,KAAK,KAAK;AACV,WAAK,SAAS,KAAK,KAAK,IAAI;AAC5B,YAAM,KAAK;AACX,WAAK,MAAM;AAAA,IACf,WACS,UAAU;AACf,YAAM,OAAO,OAAO,OAAO,EAAE,aAAa,KAAK,WAAW,GAAG,KAAK,OAAO;AACzE,YAAM,MAAM,IAAI,SAAS,QAAW,IAAI;AACxC,UAAI,KAAK;AACL,aAAK,QAAQ,WAAW,gBAAgB,uCAAuC;AACnF,UAAI,QAAQ,CAAC,GAAG,WAAW,SAAS;AACpC,WAAK,SAAS,KAAK,KAAK;AACxB,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;;;ACtNA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAE;AAAA,EAAA;AAAA,sBAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,mBAAAC;AAAA,EAAA;AAAA,eAAAC;AAAA;;;ACKA,SAAS,gBAAgB,OAAO,SAAS,MAAM,SAAS;AACpD,MAAI,OAAO;AACP,UAAM,WAAW,CAAC,KAAK,MAAM,YAAY;AACrC,YAAM,SAAS,OAAO,QAAQ,WAAW,MAAM,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI;AACjF,UAAI;AACA,gBAAQ,QAAQ,MAAM,OAAO;AAAA;AAE7B,cAAM,IAAI,eAAe,CAAC,QAAQ,SAAS,CAAC,GAAG,MAAM,OAAO;AAAA,IACpE;AACA,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,kBAAkB,OAAO,QAAQ,QAAQ;AAAA,MACpD,KAAK;AACD,eAAO,mBAAmB,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,QAAQ;AAAA,IAC1E;AAAA,EACJ;AACA,SAAO;AACX;AAeA,SAAS,kBAAkB,OAAO,SAAS;AACvC,QAAM,EAAE,cAAc,OAAO,QAAQ,SAAS,OAAO,SAAS,IAAI,OAAO,QAAQ,IAAI;AACrF,QAAM,SAAS,gBAAgB,EAAE,MAAM,MAAM,GAAG;AAAA,IAC5C;AAAA,IACA,QAAQ,SAAS,IAAI,IAAI,OAAO,MAAM,IAAI;AAAA,IAC1C;AAAA,IACA,SAAS,EAAE,YAAY,MAAM,WAAW,GAAG;AAAA,EAC/C,CAAC;AACD,QAAM,MAAM,QAAQ,OAAO;AAAA,IACvB,EAAE,MAAM,WAAW,QAAQ,IAAI,QAAQ,QAAQ,KAAK;AAAA,EACxD;AACA,UAAQ,OAAO,CAAC,GAAG;AAAA,IACf,KAAK;AAAA,IACL,KAAK,KAAK;AACN,YAAM,KAAK,OAAO,QAAQ,IAAI;AAC9B,YAAM,OAAO,OAAO,UAAU,GAAG,EAAE;AACnC,YAAM,OAAO,OAAO,UAAU,KAAK,CAAC,IAAI;AACxC,YAAM,QAAQ;AAAA,QACV,EAAE,MAAM,uBAAuB,QAAQ,QAAQ,QAAQ,KAAK;AAAA,MAChE;AACA,UAAI,CAAC,mBAAmB,OAAO,GAAG;AAC9B,cAAM,KAAK,EAAE,MAAM,WAAW,QAAQ,IAAI,QAAQ,QAAQ,KAAK,CAAC;AACpE,aAAO,EAAE,MAAM,gBAAgB,QAAQ,QAAQ,OAAO,QAAQ,KAAK;AAAA,IACvE;AAAA,IACA,KAAK;AACD,aAAO,EAAE,MAAM,wBAAwB,QAAQ,QAAQ,QAAQ,IAAI;AAAA,IACvE,KAAK;AACD,aAAO,EAAE,MAAM,wBAAwB,QAAQ,QAAQ,QAAQ,IAAI;AAAA,IACvE;AACI,aAAO,EAAE,MAAM,UAAU,QAAQ,QAAQ,QAAQ,IAAI;AAAA,EAC7D;AACJ;AAiBA,SAAS,eAAe,OAAO,OAAO,UAAU,CAAC,GAAG;AAChD,MAAI,EAAE,WAAW,OAAO,cAAc,OAAO,SAAS,OAAO,KAAK,IAAI;AACtE,MAAI,SAAS,YAAY,QAAQ,MAAM,SAAS;AAChD,MAAI,YAAY,OAAO,WAAW;AAC9B,cAAU;AACd,MAAI,CAAC;AACD,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK;AACD,eAAO;AACP;AAAA,MACJ,KAAK;AACD,eAAO;AACP;AAAA,MACJ,KAAK,gBAAgB;AACjB,cAAM,SAAS,MAAM,MAAM,CAAC;AAC5B,YAAI,OAAO,SAAS;AAChB,gBAAM,IAAI,MAAM,6BAA6B;AACjD,eAAO,OAAO,OAAO,CAAC,MAAM,MAAM,iBAAiB;AACnD;AAAA,MACJ;AAAA,MACA;AACI,eAAO;AAAA,IACf;AACJ,QAAM,SAAS,gBAAgB,EAAE,MAAM,MAAM,GAAG;AAAA,IAC5C,aAAa,eAAe,WAAW;AAAA,IACvC,QAAQ,WAAW,QAAQ,SAAS,IAAI,IAAI,OAAO,MAAM,IAAI;AAAA,IAC7D;AAAA,IACA,SAAS,EAAE,YAAY,MAAM,WAAW,GAAG;AAAA,EAC/C,CAAC;AACD,UAAQ,OAAO,CAAC,GAAG;AAAA,IACf,KAAK;AAAA,IACL,KAAK;AACD,0BAAoB,OAAO,MAAM;AACjC;AAAA,IACJ,KAAK;AACD,yBAAmB,OAAO,QAAQ,sBAAsB;AACxD;AAAA,IACJ,KAAK;AACD,yBAAmB,OAAO,QAAQ,sBAAsB;AACxD;AAAA,IACJ;AACI,yBAAmB,OAAO,QAAQ,QAAQ;AAAA,EAClD;AACJ;AACA,SAAS,oBAAoB,OAAO,QAAQ;AACxC,QAAM,KAAK,OAAO,QAAQ,IAAI;AAC9B,QAAM,OAAO,OAAO,UAAU,GAAG,EAAE;AACnC,QAAM,OAAO,OAAO,UAAU,KAAK,CAAC,IAAI;AACxC,MAAI,MAAM,SAAS,gBAAgB;AAC/B,UAAM,SAAS,MAAM,MAAM,CAAC;AAC5B,QAAI,OAAO,SAAS;AAChB,YAAM,IAAI,MAAM,6BAA6B;AACjD,WAAO,SAAS;AAChB,UAAM,SAAS;AAAA,EACnB,OACK;AACD,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,SAAS,YAAY,QAAQ,MAAM,SAAS;AAClD,UAAM,QAAQ;AAAA,MACV,EAAE,MAAM,uBAAuB,QAAQ,QAAQ,QAAQ,KAAK;AAAA,IAChE;AACA,QAAI,CAAC,mBAAmB,OAAO,SAAS,QAAQ,MAAM,MAAM,MAAS;AACjE,YAAM,KAAK,EAAE,MAAM,WAAW,QAAQ,IAAI,QAAQ,QAAQ,KAAK,CAAC;AACpE,eAAW,OAAO,OAAO,KAAK,KAAK;AAC/B,UAAI,QAAQ,UAAU,QAAQ;AAC1B,eAAO,MAAM,GAAG;AACxB,WAAO,OAAO,OAAO,EAAE,MAAM,gBAAgB,QAAQ,OAAO,QAAQ,KAAK,CAAC;AAAA,EAC9E;AACJ;AAEA,SAAS,mBAAmB,OAAO,KAAK;AACpC,MAAI;AACA,eAAW,MAAM;AACb,cAAQ,GAAG,MAAM;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AACD,gBAAM,KAAK,EAAE;AACb;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,EAAE;AACb,iBAAO;AAAA,MACf;AACR,SAAO;AACX;AACA,SAAS,mBAAmB,OAAO,QAAQ,MAAM;AAC7C,UAAQ,MAAM,MAAM;AAAA,IAChB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,YAAM,OAAO;AACb,YAAM,SAAS;AACf;AAAA,IACJ,KAAK,gBAAgB;AACjB,YAAM,MAAM,MAAM,MAAM,MAAM,CAAC;AAC/B,UAAI,KAAK,OAAO;AAChB,UAAI,MAAM,MAAM,CAAC,EAAE,SAAS;AACxB,cAAM,MAAM,MAAM,CAAC,EAAE,OAAO;AAChC,iBAAW,OAAO;AACd,YAAI,UAAU;AAClB,aAAO,MAAM;AACb,aAAO,OAAO,OAAO,EAAE,MAAM,QAAQ,IAAI,CAAC;AAC1C;AAAA,IACJ;AAAA,IACA,KAAK;AAAA,IACL,KAAK,aAAa;AACd,YAAM,SAAS,MAAM,SAAS,OAAO;AACrC,YAAM,KAAK,EAAE,MAAM,WAAW,QAAQ,QAAQ,MAAM,QAAQ,QAAQ,KAAK;AACzE,aAAO,MAAM;AACb,aAAO,OAAO,OAAO,EAAE,MAAM,QAAQ,KAAK,CAAC,EAAE,EAAE,CAAC;AAChD;AAAA,IACJ;AAAA,IACA,SAAS;AACL,YAAM,SAAS,YAAY,QAAQ,MAAM,SAAS;AAClD,YAAM,MAAM,SAAS,SAAS,MAAM,QAAQ,MAAM,GAAG,IAC/C,MAAM,IAAI,OAAO,QAAM,GAAG,SAAS,WACjC,GAAG,SAAS,aACZ,GAAG,SAAS,SAAS,IACvB,CAAC;AACP,iBAAW,OAAO,OAAO,KAAK,KAAK;AAC/B,YAAI,QAAQ,UAAU,QAAQ;AAC1B,iBAAO,MAAM,GAAG;AACxB,aAAO,OAAO,OAAO,EAAE,MAAM,QAAQ,QAAQ,IAAI,CAAC;AAAA,IACtD;AAAA,EACJ;AACJ;;;AC7MA,IAAMC,aAAY,CAAC,QAAQ,UAAU,MAAM,eAAe,GAAG,IAAI,cAAc,GAAG;AAClF,SAAS,eAAe,OAAO;AAC3B,UAAQ,MAAM,MAAM;AAAA,IAChB,KAAK,gBAAgB;AACjB,UAAI,MAAM;AACV,iBAAW,OAAO,MAAM;AACpB,eAAO,eAAe,GAAG;AAC7B,aAAO,MAAM,MAAM;AAAA,IACvB;AAAA,IACA,KAAK;AAAA,IACL,KAAK,aAAa;AACd,UAAI,MAAM;AACV,iBAAW,QAAQ,MAAM;AACrB,eAAO,cAAc,IAAI;AAC7B,aAAO;AAAA,IACX;AAAA,IACA,KAAK,mBAAmB;AACpB,UAAI,MAAM,MAAM,MAAM;AACtB,iBAAW,QAAQ,MAAM;AACrB,eAAO,cAAc,IAAI;AAC7B,iBAAW,MAAM,MAAM;AACnB,eAAO,GAAG;AACd,aAAO;AAAA,IACX;AAAA,IACA,KAAK,YAAY;AACb,UAAI,MAAM,cAAc,KAAK;AAC7B,UAAI,MAAM;AACN,mBAAW,MAAM,MAAM;AACnB,iBAAO,GAAG;AAClB,aAAO;AAAA,IACX;AAAA,IACA,SAAS;AACL,UAAI,MAAM,MAAM;AAChB,UAAI,SAAS,SAAS,MAAM;AACxB,mBAAW,MAAM,MAAM;AACnB,iBAAO,GAAG;AAClB,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AACA,SAAS,cAAc,EAAE,OAAO,KAAK,KAAK,MAAM,GAAG;AAC/C,MAAI,MAAM;AACV,aAAW,MAAM;AACb,WAAO,GAAG;AACd,MAAI;AACA,WAAO,eAAe,GAAG;AAC7B,MAAI;AACA,eAAW,MAAM;AACb,aAAO,GAAG;AAClB,MAAI;AACA,WAAO,eAAe,KAAK;AAC/B,SAAO;AACX;;;AC1DA,IAAMC,SAAQ,OAAO,aAAa;AAClC,IAAMC,QAAO,OAAO,eAAe;AACnC,IAAMC,UAAS,OAAO,aAAa;AA6BnC,SAASC,OAAM,KAAK,SAAS;AACzB,MAAI,UAAU,OAAO,IAAI,SAAS;AAC9B,UAAM,EAAE,OAAO,IAAI,OAAO,OAAO,IAAI,MAAM;AAC/C,SAAO,OAAO,OAAO,CAAC,CAAC,GAAG,KAAK,OAAO;AAC1C;AAKAA,OAAM,QAAQH;AAEdG,OAAM,OAAOF;AAEbE,OAAM,SAASD;AAEfC,OAAM,aAAa,CAAC,KAAK,SAAS;AAC9B,MAAI,OAAO;AACX,aAAW,CAAC,OAAO,KAAK,KAAK,MAAM;AAC/B,UAAM,MAAM,6BAAO;AACnB,QAAI,OAAO,WAAW,KAAK;AACvB,aAAO,IAAI,MAAM,KAAK;AAAA,IAC1B;AAEI,aAAO;AAAA,EACf;AACA,SAAO;AACX;AAMAA,OAAM,mBAAmB,CAAC,KAAK,SAAS;AACpC,QAAM,SAASA,OAAM,WAAW,KAAK,KAAK,MAAM,GAAG,EAAE,CAAC;AACtD,QAAM,QAAQ,KAAK,KAAK,SAAS,CAAC,EAAE,CAAC;AACrC,QAAM,OAAO,iCAAS;AACtB,MAAI,QAAQ,WAAW;AACnB,WAAO;AACX,QAAM,IAAI,MAAM,6BAA6B;AACjD;AACA,SAAS,OAAO,MAAM,MAAM,SAAS;AACjC,MAAI,OAAO,QAAQ,MAAM,IAAI;AAC7B,MAAI,OAAO,SAAS;AAChB,WAAO;AACX,aAAW,SAAS,CAAC,OAAO,OAAO,GAAG;AAClC,UAAM,QAAQ,KAAK,KAAK;AACxB,QAAI,SAAS,WAAW,OAAO;AAC3B,eAAS,IAAI,GAAG,IAAI,MAAM,MAAM,QAAQ,EAAE,GAAG;AACzC,cAAM,KAAK,OAAO,OAAO,OAAO,KAAK,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,OAAO;AACnF,YAAI,OAAO,OAAO;AACd,cAAI,KAAK;AAAA,iBACJ,OAAOH;AACZ,iBAAOA;AAAA,iBACF,OAAOE,SAAQ;AACpB,gBAAM,MAAM,OAAO,GAAG,CAAC;AACvB,eAAK;AAAA,QACT;AAAA,MACJ;AACA,UAAI,OAAO,SAAS,cAAc,UAAU;AACxC,eAAO,KAAK,MAAM,IAAI;AAAA,IAC9B;AAAA,EACJ;AACA,SAAO,OAAO,SAAS,aAAa,KAAK,MAAM,IAAI,IAAI;AAC3D;;;AHzFA,IAAM,MAAM;AAEZ,IAAM,WAAW;AAEjB,IAAM,WAAW;AAEjB,IAAME,UAAS;AAEf,IAAMC,gBAAe,CAAC,UAAU,CAAC,CAAC,SAAS,WAAW;AAEtD,IAAMC,YAAW,CAAC,UAAU,CAAC,CAAC,UACzB,MAAM,SAAS,YACZ,MAAM,SAAS,0BACf,MAAM,SAAS,0BACf,MAAM,SAAS;AAGvB,SAAS,YAAY,OAAO;AACxB,UAAQ,OAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAKF;AACD,aAAO;AAAA,IACX;AACI,aAAO,KAAK,UAAU,KAAK;AAAA,EACnC;AACJ;AAEA,SAAS,UAAU,QAAQ;AACvB,UAAQ,QAAQ;AAAA,IACZ,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAKA;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,EACf;AACA,UAAQ,OAAO,CAAC,GAAG;AAAA,IACf,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,EACf;AACA,SAAO;AACX;;;AI1BA,SAAS,QAAQ,IAAI;AACjB,UAAQ,IAAI;AAAA,IACR,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,aAAO;AAAA,EACf;AACJ;AACA,IAAM,YAAY,IAAI,IAAI,wBAAwB;AAClD,IAAM,WAAW,IAAI,IAAI,mFAAmF;AAC5G,IAAM,qBAAqB,IAAI,IAAI,OAAO;AAC1C,IAAM,qBAAqB,IAAI,IAAI,aAAc;AACjD,IAAM,kBAAkB,CAAC,OAAO,CAAC,MAAM,mBAAmB,IAAI,EAAE;AAgBhE,IAAM,QAAN,MAAY;AAAA,EACR,cAAc;AAKV,SAAK,QAAQ;AAMb,SAAK,oBAAoB;AAMzB,SAAK,kBAAkB;AAEvB,SAAK,SAAS;AAKd,SAAK,UAAU;AAEf,SAAK,YAAY;AAKjB,SAAK,aAAa;AAElB,SAAK,cAAc;AAEnB,SAAK,aAAa;AAElB,SAAK,OAAO;AAEZ,SAAK,MAAM;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,CAAC,IAAI,QAAQ,aAAa,OAAO;AAC7B,QAAI,QAAQ;AACR,UAAI,OAAO,WAAW;AAClB,cAAM,UAAU,wBAAwB;AAC5C,WAAK,SAAS,KAAK,SAAS,KAAK,SAAS,SAAS;AACnD,WAAK,aAAa;AAAA,IACtB;AACA,SAAK,QAAQ,CAAC;AACd,QAAI,OAAO,KAAK,QAAQ;AACxB,WAAO,SAAS,cAAc,KAAK,SAAS,CAAC;AACzC,aAAO,OAAO,KAAK,UAAU,IAAI;AAAA,EACzC;AAAA,EACA,YAAY;AACR,QAAI,IAAI,KAAK;AACb,QAAI,KAAK,KAAK,OAAO,CAAC;AACtB,WAAO,OAAO,OAAO,OAAO;AACxB,WAAK,KAAK,OAAO,EAAE,CAAC;AACxB,QAAI,CAAC,MAAM,OAAO,OAAO,OAAO;AAC5B,aAAO;AACX,QAAI,OAAO;AACP,aAAO,KAAK,OAAO,IAAI,CAAC,MAAM;AAClC,WAAO;AAAA,EACX;AAAA,EACA,OAAO,GAAG;AACN,WAAO,KAAK,OAAO,KAAK,MAAM,CAAC;AAAA,EACnC;AAAA,EACA,eAAe,QAAQ;AACnB,QAAI,KAAK,KAAK,OAAO,MAAM;AAC3B,QAAI,KAAK,aAAa,GAAG;AACrB,UAAI,SAAS;AACb,aAAO,OAAO;AACV,aAAK,KAAK,OAAO,EAAE,SAAS,MAAM;AACtC,UAAI,OAAO,MAAM;AACb,cAAM,OAAO,KAAK,OAAO,SAAS,SAAS,CAAC;AAC5C,YAAI,SAAS,QAAS,CAAC,QAAQ,CAAC,KAAK;AACjC,iBAAO,SAAS,SAAS;AAAA,MACjC;AACA,aAAO,OAAO,QAAQ,UAAU,KAAK,cAAe,CAAC,MAAM,CAAC,KAAK,QAC3D,SAAS,SACT;AAAA,IACV;AACA,QAAI,OAAO,OAAO,OAAO,KAAK;AAC1B,YAAM,KAAK,KAAK,OAAO,OAAO,QAAQ,CAAC;AACvC,WAAK,OAAO,SAAS,OAAO,UAAU,QAAQ,KAAK,OAAO,SAAS,CAAC,CAAC;AACjE,eAAO;AAAA,IACf;AACA,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,QAAI,MAAM,KAAK;AACf,QAAI,OAAO,QAAQ,YAAa,QAAQ,MAAM,MAAM,KAAK,KAAM;AAC3D,YAAM,KAAK,OAAO,QAAQ,MAAM,KAAK,GAAG;AACxC,WAAK,aAAa;AAAA,IACtB;AACA,QAAI,QAAQ;AACR,aAAO,KAAK,QAAQ,KAAK,OAAO,UAAU,KAAK,GAAG,IAAI;AAC1D,QAAI,KAAK,OAAO,MAAM,CAAC,MAAM;AACzB,aAAO;AACX,WAAO,KAAK,OAAO,UAAU,KAAK,KAAK,GAAG;AAAA,EAC9C;AAAA,EACA,SAAS,GAAG;AACR,WAAO,KAAK,MAAM,KAAK,KAAK,OAAO;AAAA,EACvC;AAAA,EACA,QAAQ,OAAO;AACX,SAAK,SAAS,KAAK,OAAO,UAAU,KAAK,GAAG;AAC5C,SAAK,MAAM;AACX,SAAK,aAAa;AAClB,SAAK,OAAO;AACZ,WAAO;AAAA,EACX;AAAA,EACA,KAAK,GAAG;AACJ,WAAO,KAAK,OAAO,OAAO,KAAK,KAAK,CAAC;AAAA,EACzC;AAAA,EACA,CAAC,UAAU,MAAM;AACb,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,eAAO,OAAO,KAAK,YAAY;AAAA,MACnC,KAAK;AACD,eAAO,OAAO,KAAK,eAAe;AAAA,MACtC,KAAK;AACD,eAAO,OAAO,KAAK,gBAAgB;AAAA,MACvC,KAAK;AACD,eAAO,OAAO,KAAK,cAAc;AAAA,MACrC,KAAK;AACD,eAAO,OAAO,KAAK,oBAAoB;AAAA,MAC3C,KAAK;AACD,eAAO,OAAO,KAAK,kBAAkB;AAAA,MACzC,KAAK;AACD,eAAO,OAAO,KAAK,iBAAiB;AAAA,MACxC,KAAK;AACD,eAAO,OAAO,KAAK,iBAAiB;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,CAAC,cAAc;AACX,QAAI,OAAO,KAAK,QAAQ;AACxB,QAAI,SAAS;AACT,aAAO,KAAK,QAAQ,QAAQ;AAChC,QAAI,KAAK,CAAC,MAAM,KAAK;AACjB,aAAO,KAAK,UAAU,CAAC;AACvB,aAAO,KAAK,UAAU,CAAC;AAAA,IAC3B;AACA,QAAI,KAAK,CAAC,MAAM,KAAK;AACjB,UAAI,SAAS,KAAK;AAClB,UAAI,KAAK,KAAK,QAAQ,GAAG;AACzB,aAAO,OAAO,IAAI;AACd,cAAM,KAAK,KAAK,KAAK,CAAC;AACtB,YAAI,OAAO,OAAO,OAAO,KAAM;AAC3B,mBAAS,KAAK;AACd;AAAA,QACJ,OACK;AACD,eAAK,KAAK,QAAQ,KAAK,KAAK,CAAC;AAAA,QACjC;AAAA,MACJ;AACA,aAAO,MAAM;AACT,cAAM,KAAK,KAAK,SAAS,CAAC;AAC1B,YAAI,OAAO,OAAO,OAAO;AACrB,oBAAU;AAAA;AAEV;AAAA,MACR;AACA,YAAM,KAAK,OAAO,KAAK,UAAU,MAAM,MAAM,OAAO,KAAK,WAAW,IAAI;AACxE,aAAO,KAAK,UAAU,KAAK,SAAS,CAAC;AACrC,WAAK,YAAY;AACjB,aAAO;AAAA,IACX;AACA,QAAI,KAAK,UAAU,GAAG;AAClB,YAAM,KAAK,OAAO,KAAK,WAAW,IAAI;AACtC,aAAO,KAAK,UAAU,KAAK,SAAS,EAAE;AACtC,aAAO,KAAK,YAAY;AACxB,aAAO;AAAA,IACX;AACA,UAAM;AACN,WAAO,OAAO,KAAK,eAAe;AAAA,EACtC;AAAA,EACA,CAAC,iBAAiB;AACd,UAAM,KAAK,KAAK,OAAO,CAAC;AACxB,QAAI,CAAC,MAAM,CAAC,KAAK;AACb,aAAO,KAAK,QAAQ,YAAY;AACpC,QAAI,OAAO,OAAO,OAAO,KAAK;AAC1B,UAAI,CAAC,KAAK,SAAS,CAAC,KAAK,SAAS,CAAC;AAC/B,eAAO,KAAK,QAAQ,YAAY;AACpC,YAAM,IAAI,KAAK,KAAK,CAAC;AACrB,WAAK,MAAM,SAAS,MAAM,UAAU,QAAQ,KAAK,OAAO,CAAC,CAAC,GAAG;AACzD,eAAO,KAAK,UAAU,CAAC;AACvB,aAAK,cAAc;AACnB,aAAK,aAAa;AAClB,eAAO,MAAM,QAAQ,QAAQ;AAAA,MACjC;AAAA,IACJ;AACA,SAAK,cAAc,OAAO,KAAK,WAAW,KAAK;AAC/C,QAAI,KAAK,aAAa,KAAK,eAAe,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC;AAC7D,WAAK,aAAa,KAAK;AAC3B,WAAO,OAAO,KAAK,gBAAgB;AAAA,EACvC;AAAA,EACA,CAAC,kBAAkB;AACf,UAAM,CAAC,KAAK,GAAG,IAAI,KAAK,KAAK,CAAC;AAC9B,QAAI,CAAC,OAAO,CAAC,KAAK;AACd,aAAO,KAAK,QAAQ,aAAa;AACrC,SAAK,QAAQ,OAAO,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,GAAG,GAAG;AAC7D,YAAM,KAAK,OAAO,KAAK,UAAU,CAAC,MAAM,OAAO,KAAK,WAAW,IAAI;AACnE,WAAK,aAAa,KAAK,cAAc;AACrC,WAAK,eAAe;AACpB,aAAO,OAAO,KAAK,gBAAgB;AAAA,IACvC;AACA,WAAO;AAAA,EACX;AAAA,EACA,CAAC,gBAAgB;AACb,WAAO,KAAK,WAAW,IAAI;AAC3B,UAAM,OAAO,KAAK,QAAQ;AAC1B,QAAI,SAAS;AACT,aAAO,KAAK,QAAQ,KAAK;AAC7B,QAAI,IAAI,OAAO,KAAK,eAAe;AACnC,YAAQ,KAAK,CAAC,GAAG;AAAA,MACb,KAAK;AACD,eAAO,KAAK,UAAU,KAAK,SAAS,CAAC;AAAA;AAAA,MAEzC,KAAK;AACD,eAAO,KAAK,YAAY;AACxB,eAAO,OAAO,KAAK,eAAe;AAAA,MACtC,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,UAAU,CAAC;AACvB,aAAK,UAAU;AACf,aAAK,YAAY;AACjB,eAAO;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AAED,eAAO,KAAK,UAAU,CAAC;AACvB,eAAO;AAAA,MACX,KAAK;AACD,eAAO,KAAK,UAAU,eAAe;AACrC,eAAO;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AACD,eAAO,OAAO,KAAK,kBAAkB;AAAA,MACzC,KAAK;AAAA,MACL,KAAK;AACD,aAAK,OAAO,KAAK,uBAAuB;AACxC,aAAK,OAAO,KAAK,WAAW,IAAI;AAChC,eAAO,KAAK,UAAU,KAAK,SAAS,CAAC;AACrC,eAAO,KAAK,YAAY;AACxB,eAAO,OAAO,KAAK,iBAAiB;AAAA,MACxC;AACI,eAAO,OAAO,KAAK,iBAAiB;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,CAAC,sBAAsB;AACnB,QAAI,IAAI;AACR,QAAI,SAAS;AACb,OAAG;AACC,WAAK,OAAO,KAAK,YAAY;AAC7B,UAAI,KAAK,GAAG;AACR,aAAK,OAAO,KAAK,WAAW,KAAK;AACjC,aAAK,cAAc,SAAS;AAAA,MAChC,OACK;AACD,aAAK;AAAA,MACT;AACA,YAAM,OAAO,KAAK,WAAW,IAAI;AAAA,IACrC,SAAS,KAAK,KAAK;AACnB,UAAM,OAAO,KAAK,QAAQ;AAC1B,QAAI,SAAS;AACT,aAAO,KAAK,QAAQ,MAAM;AAC9B,QAAK,WAAW,MAAM,SAAS,KAAK,cAAc,KAAK,CAAC,MAAM,OACzD,WAAW,MACP,KAAK,WAAW,KAAK,KAAK,KAAK,WAAW,KAAK,MAChD,QAAQ,KAAK,CAAC,CAAC,GAAI;AAIvB,YAAM,kBAAkB,WAAW,KAAK,aAAa,KACjD,KAAK,cAAc,MAClB,KAAK,CAAC,MAAM,OAAO,KAAK,CAAC,MAAM;AACpC,UAAI,CAAC,iBAAiB;AAElB,aAAK,YAAY;AACjB,cAAM;AACN,eAAO,OAAO,KAAK,eAAe;AAAA,MACtC;AAAA,IACJ;AACA,QAAI,IAAI;AACR,WAAO,KAAK,CAAC,MAAM,KAAK;AACpB,WAAK,OAAO,KAAK,UAAU,CAAC;AAC5B,WAAK,OAAO,KAAK,WAAW,IAAI;AAChC,WAAK,UAAU;AAAA,IACnB;AACA,SAAK,OAAO,KAAK,eAAe;AAChC,YAAQ,KAAK,CAAC,GAAG;AAAA,MACb,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO,KAAK,UAAU,KAAK,SAAS,CAAC;AACrC,eAAO;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,UAAU,CAAC;AACvB,aAAK,UAAU;AACf,aAAK,aAAa;AAClB,eAAO;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,UAAU,CAAC;AACvB,aAAK,UAAU;AACf,aAAK,aAAa;AAClB,eAAO,KAAK,YAAY,SAAS;AAAA,MACrC,KAAK;AACD,eAAO,KAAK,UAAU,eAAe;AACrC,eAAO;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AACD,aAAK,UAAU;AACf,eAAO,OAAO,KAAK,kBAAkB;AAAA,MACzC,KAAK,KAAK;AACN,cAAM,OAAO,KAAK,OAAO,CAAC;AAC1B,YAAI,KAAK,WAAW,QAAQ,IAAI,KAAK,SAAS,KAAK;AAC/C,eAAK,UAAU;AACf,iBAAO,KAAK,UAAU,CAAC;AACvB,iBAAO,KAAK,WAAW,IAAI;AAC3B,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA;AAAA,MAEA;AACI,aAAK,UAAU;AACf,eAAO,OAAO,KAAK,iBAAiB;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,CAAC,oBAAoB;AACjB,UAAM,QAAQ,KAAK,OAAO,CAAC;AAC3B,QAAI,MAAM,KAAK,OAAO,QAAQ,OAAO,KAAK,MAAM,CAAC;AACjD,QAAI,UAAU,KAAK;AACf,aAAO,QAAQ,MAAM,KAAK,OAAO,MAAM,CAAC,MAAM;AAC1C,cAAM,KAAK,OAAO,QAAQ,KAAK,MAAM,CAAC;AAAA,IAC9C,OACK;AAED,aAAO,QAAQ,IAAI;AACf,YAAI,IAAI;AACR,eAAO,KAAK,OAAO,MAAM,IAAI,CAAC,MAAM;AAChC,eAAK;AACT,YAAI,IAAI,MAAM;AACV;AACJ,cAAM,KAAK,OAAO,QAAQ,KAAK,MAAM,CAAC;AAAA,MAC1C;AAAA,IACJ;AAEA,UAAM,KAAK,KAAK,OAAO,UAAU,GAAG,GAAG;AACvC,QAAI,KAAK,GAAG,QAAQ,MAAM,KAAK,GAAG;AAClC,QAAI,OAAO,IAAI;AACX,aAAO,OAAO,IAAI;AACd,cAAM,KAAK,KAAK,eAAe,KAAK,CAAC;AACrC,YAAI,OAAO;AACP;AACJ,aAAK,GAAG,QAAQ,MAAM,EAAE;AAAA,MAC5B;AACA,UAAI,OAAO,IAAI;AAEX,cAAM,MAAM,GAAG,KAAK,CAAC,MAAM,OAAO,IAAI;AAAA,MAC1C;AAAA,IACJ;AACA,QAAI,QAAQ,IAAI;AACZ,UAAI,CAAC,KAAK;AACN,eAAO,KAAK,QAAQ,eAAe;AACvC,YAAM,KAAK,OAAO;AAAA,IACtB;AACA,WAAO,KAAK,YAAY,MAAM,GAAG,KAAK;AACtC,WAAO,KAAK,YAAY,SAAS;AAAA,EACrC;AAAA,EACA,CAAC,yBAAyB;AACtB,SAAK,oBAAoB;AACzB,SAAK,kBAAkB;AACvB,QAAI,IAAI,KAAK;AACb,WAAO,MAAM;AACT,YAAM,KAAK,KAAK,OAAO,EAAE,CAAC;AAC1B,UAAI,OAAO;AACP,aAAK,kBAAkB;AAAA,eAClB,KAAK,OAAO,MAAM;AACvB,aAAK,oBAAoB,OAAO,EAAE,IAAI;AAAA,eACjC,OAAO;AACZ;AAAA,IACR;AACA,WAAO,OAAO,KAAK,UAAU,QAAM,QAAQ,EAAE,KAAK,OAAO,GAAG;AAAA,EAChE;AAAA,EACA,CAAC,mBAAmB;AAChB,QAAI,KAAK,KAAK,MAAM;AACpB,QAAI,SAAS;AACb,QAAI;AACJ,SAAM,UAASG,KAAI,KAAK,KAAM,KAAK,KAAK,OAAOA,EAAC,GAAI,EAAEA,IAAG;AACrD,cAAQ,IAAI;AAAA,QACR,KAAK;AACD,oBAAU;AACV;AAAA,QACJ,KAAK;AACD,eAAKA;AACL,mBAAS;AACT;AAAA,QACJ,KAAK,MAAM;AACP,gBAAM,OAAO,KAAK,OAAOA,KAAI,CAAC;AAC9B,cAAI,CAAC,QAAQ,CAAC,KAAK;AACf,mBAAO,KAAK,QAAQ,cAAc;AACtC,cAAI,SAAS;AACT;AAAA,QACR;AAAA;AAAA,QACA;AACI,gBAAM;AAAA,MACd;AAAA,IACJ;AACA,QAAI,CAAC,MAAM,CAAC,KAAK;AACb,aAAO,KAAK,QAAQ,cAAc;AACtC,QAAI,UAAU,KAAK,YAAY;AAC3B,UAAI,KAAK,sBAAsB;AAC3B,aAAK,aAAa;AAAA,WACjB;AACD,aAAK,aACD,KAAK,qBAAqB,KAAK,eAAe,IAAI,IAAI,KAAK;AAAA,MACnE;AACA,SAAG;AACC,cAAM,KAAK,KAAK,eAAe,KAAK,CAAC;AACrC,YAAI,OAAO;AACP;AACJ,aAAK,KAAK,OAAO,QAAQ,MAAM,EAAE;AAAA,MACrC,SAAS,OAAO;AAChB,UAAI,OAAO,IAAI;AACX,YAAI,CAAC,KAAK;AACN,iBAAO,KAAK,QAAQ,cAAc;AACtC,aAAK,KAAK,OAAO;AAAA,MACrB;AAAA,IACJ;AAGA,QAAI,IAAI,KAAK;AACb,SAAK,KAAK,OAAO,CAAC;AAClB,WAAO,OAAO;AACV,WAAK,KAAK,OAAO,EAAE,CAAC;AACxB,QAAI,OAAO,KAAM;AACb,aAAO,OAAO,OAAQ,OAAO,OAAO,OAAO,QAAQ,OAAO;AACtD,aAAK,KAAK,OAAO,EAAE,CAAC;AACxB,WAAK,IAAI;AAAA,IACb,WACS,CAAC,KAAK,iBAAiB;AAC5B,SAAG;AACC,YAAIA,KAAI,KAAK;AACb,YAAIC,MAAK,KAAK,OAAOD,EAAC;AACtB,YAAIC,QAAO;AACP,UAAAA,MAAK,KAAK,OAAO,EAAED,EAAC;AACxB,cAAM,WAAWA;AACjB,eAAOC,QAAO;AACV,UAAAA,MAAK,KAAK,OAAO,EAAED,EAAC;AACxB,YAAIC,QAAO,QAAQD,MAAK,KAAK,OAAOA,KAAI,IAAI,SAAS;AACjD,eAAKA;AAAA;AAEL;AAAA,MACR,SAAS;AAAA,IACb;AACA,UAAME;AACN,WAAO,KAAK,YAAY,KAAK,GAAG,IAAI;AACpC,WAAO,OAAO,KAAK,eAAe;AAAA,EACtC;AAAA,EACA,CAAC,mBAAmB;AAChB,UAAM,SAAS,KAAK,YAAY;AAChC,QAAI,MAAM,KAAK,MAAM;AACrB,QAAI,IAAI,KAAK,MAAM;AACnB,QAAI;AACJ,WAAQ,KAAK,KAAK,OAAO,EAAE,CAAC,GAAI;AAC5B,UAAI,OAAO,KAAK;AACZ,cAAM,OAAO,KAAK,OAAO,IAAI,CAAC;AAC9B,YAAI,QAAQ,IAAI,KAAM,UAAU,mBAAmB,IAAI,IAAI;AACvD;AACJ,cAAM;AAAA,MACV,WACS,QAAQ,EAAE,GAAG;AAClB,YAAI,OAAO,KAAK,OAAO,IAAI,CAAC;AAC5B,YAAI,OAAO,MAAM;AACb,cAAI,SAAS,MAAM;AACf,iBAAK;AACL,iBAAK;AACL,mBAAO,KAAK,OAAO,IAAI,CAAC;AAAA,UAC5B;AAEI,kBAAM;AAAA,QACd;AACA,YAAI,SAAS,OAAQ,UAAU,mBAAmB,IAAI,IAAI;AACtD;AACJ,YAAI,OAAO,MAAM;AACb,gBAAM,KAAK,KAAK,eAAe,IAAI,CAAC;AACpC,cAAI,OAAO;AACP;AACJ,cAAI,KAAK,IAAI,GAAG,KAAK,CAAC;AAAA,QAC1B;AAAA,MACJ,OACK;AACD,YAAI,UAAU,mBAAmB,IAAI,EAAE;AACnC;AACJ,cAAM;AAAA,MACV;AAAA,IACJ;AACA,QAAI,CAAC,MAAM,CAAC,KAAK;AACb,aAAO,KAAK,QAAQ,cAAc;AACtC,UAAMA;AACN,WAAO,KAAK,YAAY,MAAM,GAAG,IAAI;AACrC,WAAO,SAAS,SAAS;AAAA,EAC7B;AAAA,EACA,CAAC,UAAU,GAAG;AACV,QAAI,IAAI,GAAG;AACP,YAAM,KAAK,OAAO,OAAO,KAAK,KAAK,CAAC;AACpC,WAAK,OAAO;AACZ,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,CAAC,YAAY,GAAG,YAAY;AACxB,UAAM,IAAI,KAAK,OAAO,MAAM,KAAK,KAAK,CAAC;AACvC,QAAI,GAAG;AACH,YAAM;AACN,WAAK,OAAO,EAAE;AACd,aAAO,EAAE;AAAA,IACb,WACS;AACL,YAAM;AACV,WAAO;AAAA,EACX;AAAA,EACA,CAAC,iBAAiB;AACd,YAAQ,KAAK,OAAO,CAAC,GAAG;AAAA,MACpB,KAAK;AACD,gBAAS,OAAO,KAAK,QAAQ,MACxB,OAAO,KAAK,WAAW,IAAI,MAC3B,OAAO,KAAK,eAAe;AAAA,MACpC,KAAK;AACD,gBAAS,OAAO,KAAK,UAAU,eAAe,MACzC,OAAO,KAAK,WAAW,IAAI,MAC3B,OAAO,KAAK,eAAe;AAAA,MACpC,KAAK;AAAA;AAAA,MACL,KAAK;AAAA;AAAA,MACL,KAAK,KAAK;AACN,cAAM,SAAS,KAAK,YAAY;AAChC,cAAM,MAAM,KAAK,OAAO,CAAC;AACzB,YAAI,QAAQ,GAAG,KAAM,UAAU,mBAAmB,IAAI,GAAG,GAAI;AACzD,cAAI,CAAC;AACD,iBAAK,aAAa,KAAK,cAAc;AAAA,mBAChC,KAAK;AACV,iBAAK,UAAU;AACnB,kBAAS,OAAO,KAAK,UAAU,CAAC,MAC3B,OAAO,KAAK,WAAW,IAAI,MAC3B,OAAO,KAAK,eAAe;AAAA,QACpC;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,CAAC,UAAU;AACP,QAAI,KAAK,OAAO,CAAC,MAAM,KAAK;AACxB,UAAI,IAAI,KAAK,MAAM;AACnB,UAAI,KAAK,KAAK,OAAO,CAAC;AACtB,aAAO,CAAC,QAAQ,EAAE,KAAK,OAAO;AAC1B,aAAK,KAAK,OAAO,EAAE,CAAC;AACxB,aAAO,OAAO,KAAK,YAAY,OAAO,MAAM,IAAI,IAAI,GAAG,KAAK;AAAA,IAChE,OACK;AACD,UAAI,IAAI,KAAK,MAAM;AACnB,UAAI,KAAK,KAAK,OAAO,CAAC;AACtB,aAAO,IAAI;AACP,YAAI,SAAS,IAAI,EAAE;AACf,eAAK,KAAK,OAAO,EAAE,CAAC;AAAA,iBACf,OAAO,OACZ,UAAU,IAAI,KAAK,OAAO,IAAI,CAAC,CAAC,KAChC,UAAU,IAAI,KAAK,OAAO,IAAI,CAAC,CAAC,GAAG;AACnC,eAAK,KAAK,OAAQ,KAAK,CAAE;AAAA,QAC7B;AAEI;AAAA,MACR;AACA,aAAO,OAAO,KAAK,YAAY,GAAG,KAAK;AAAA,IAC3C;AAAA,EACJ;AAAA,EACA,CAAC,cAAc;AACX,UAAM,KAAK,KAAK,OAAO,KAAK,GAAG;AAC/B,QAAI,OAAO;AACP,aAAO,OAAO,KAAK,UAAU,CAAC;AAAA,aACzB,OAAO,QAAQ,KAAK,OAAO,CAAC,MAAM;AACvC,aAAO,OAAO,KAAK,UAAU,CAAC;AAAA;AAE9B,aAAO;AAAA,EACf;AAAA,EACA,CAAC,WAAW,WAAW;AACnB,QAAI,IAAI,KAAK,MAAM;AACnB,QAAI;AACJ,OAAG;AACC,WAAK,KAAK,OAAO,EAAE,CAAC;AAAA,IACxB,SAAS,OAAO,OAAQ,aAAa,OAAO;AAC5C,UAAM,IAAI,IAAI,KAAK;AACnB,QAAI,IAAI,GAAG;AACP,YAAM,KAAK,OAAO,OAAO,KAAK,KAAK,CAAC;AACpC,WAAK,MAAM;AAAA,IACf;AACA,WAAO;AAAA,EACX;AAAA,EACA,CAAC,UAAU,MAAM;AACb,QAAI,IAAI,KAAK;AACb,QAAI,KAAK,KAAK,OAAO,CAAC;AACtB,WAAO,CAAC,KAAK,EAAE;AACX,WAAK,KAAK,OAAO,EAAE,CAAC;AACxB,WAAO,OAAO,KAAK,YAAY,GAAG,KAAK;AAAA,EAC3C;AACJ;;;ACrsBA,IAAM,cAAN,MAAkB;AAAA,EACd,cAAc;AACV,SAAK,aAAa,CAAC;AAKnB,SAAK,aAAa,CAAC,WAAW,KAAK,WAAW,KAAK,MAAM;AAMzD,SAAK,UAAU,CAAC,WAAW;AACvB,UAAI,MAAM;AACV,UAAI,OAAO,KAAK,WAAW;AAC3B,aAAO,MAAM,MAAM;AACf,cAAM,MAAO,MAAM,QAAS;AAC5B,YAAI,KAAK,WAAW,GAAG,IAAI;AACvB,gBAAM,MAAM;AAAA;AAEZ,iBAAO;AAAA,MACf;AACA,UAAI,KAAK,WAAW,GAAG,MAAM;AACzB,eAAO,EAAE,MAAM,MAAM,GAAG,KAAK,EAAE;AACnC,UAAI,QAAQ;AACR,eAAO,EAAE,MAAM,GAAG,KAAK,OAAO;AAClC,YAAM,QAAQ,KAAK,WAAW,MAAM,CAAC;AACrC,aAAO,EAAE,MAAM,KAAK,KAAK,SAAS,QAAQ,EAAE;AAAA,IAChD;AAAA,EACJ;AACJ;;;ACjCA,SAAS,cAAc,MAAM,MAAM;AAC/B,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE;AAC/B,QAAI,KAAK,CAAC,EAAE,SAAS;AACjB,aAAO;AACf,SAAO;AACX;AACA,SAAS,kBAAkB,MAAM;AAC7B,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAClC,YAAQ,KAAK,CAAC,EAAE,MAAM;AAAA,MAClB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD;AAAA,MACJ;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AACA,SAAO;AACX;AACA,SAAS,YAAY,OAAO;AACxB,UAAQ,+BAAO,MAAM;AAAA,IACjB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX;AACI,aAAO;AAAA,EACf;AACJ;AACA,SAAS,aAAa,QAAQ;AAC1B,UAAQ,OAAO,MAAM;AAAA,IACjB,KAAK;AACD,aAAO,OAAO;AAAA,IAClB,KAAK,aAAa;AACd,YAAM,KAAK,OAAO,MAAM,OAAO,MAAM,SAAS,CAAC;AAC/C,aAAO,GAAG,OAAO,GAAG;AAAA,IACxB;AAAA,IACA,KAAK;AACD,aAAO,OAAO,MAAM,OAAO,MAAM,SAAS,CAAC,EAAE;AAAA;AAAA,IAEjD;AACI,aAAO,CAAC;AAAA,EAChB;AACJ;AAEA,SAAS,sBAAsB,MAAM;AAlDrC;AAmDI,MAAI,KAAK,WAAW;AAChB,WAAO,CAAC;AACZ,MAAI,IAAI,KAAK;AACb,OAAM,QAAO,EAAE,KAAK,GAAG;AACnB,YAAQ,KAAK,CAAC,EAAE,MAAM;AAAA,MAClB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,cAAM;AAAA,IACd;AAAA,EACJ;AACA,WAAO,UAAK,EAAE,CAAC,MAAR,mBAAW,UAAS,SAAS;AAAA,EAEpC;AACA,SAAO,KAAK,OAAO,GAAG,KAAK,MAAM;AACrC;AACA,SAAS,gBAAgB,IAAI;AACzB,MAAI,GAAG,MAAM,SAAS,kBAAkB;AACpC,eAAW,MAAM,GAAG,OAAO;AACvB,UAAI,GAAG,OACH,CAAC,GAAG,SACJ,CAAC,cAAc,GAAG,OAAO,kBAAkB,KAC3C,CAAC,cAAc,GAAG,KAAK,eAAe,GAAG;AACzC,YAAI,GAAG;AACH,aAAG,QAAQ,GAAG;AAClB,eAAO,GAAG;AACV,YAAI,YAAY,GAAG,KAAK,GAAG;AACvB,cAAI,GAAG,MAAM;AACT,kBAAM,UAAU,KAAK,MAAM,GAAG,MAAM,KAAK,GAAG,GAAG;AAAA;AAE/C,eAAG,MAAM,MAAM,GAAG;AAAA,QAC1B;AAEI,gBAAM,UAAU,KAAK,MAAM,GAAG,OAAO,GAAG,GAAG;AAC/C,eAAO,GAAG;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AACJ;AA4BA,IAAM,SAAN,MAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKT,YAAY,WAAW;AAEnB,SAAK,YAAY;AAEjB,SAAK,WAAW;AAEhB,SAAK,SAAS;AAEd,SAAK,SAAS;AAEd,SAAK,YAAY;AAEjB,SAAK,QAAQ,CAAC;AAEd,SAAK,SAAS;AAEd,SAAK,OAAO;AAEZ,SAAK,QAAQ,IAAI,MAAM;AACvB,SAAK,YAAY;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,CAAC,MAAM,QAAQ,aAAa,OAAO;AAC/B,QAAI,KAAK,aAAa,KAAK,WAAW;AAClC,WAAK,UAAU,CAAC;AACpB,eAAW,UAAU,KAAK,MAAM,IAAI,QAAQ,UAAU;AAClD,aAAO,KAAK,KAAK,MAAM;AAC3B,QAAI,CAAC;AACD,aAAO,KAAK,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAIA,CAAC,KAAK,QAAQ;AACV,SAAK,SAAS;AACd,QAAI,KAAK,UAAU;AACf,WAAK,WAAW;AAChB,aAAO,KAAK,KAAK;AACjB,WAAK,UAAU,OAAO;AACtB;AAAA,IACJ;AACA,UAAM,OAAO,UAAU,MAAM;AAC7B,QAAI,CAAC,MAAM;AACP,YAAM,UAAU,qBAAqB,MAAM;AAC3C,aAAO,KAAK,IAAI,EAAE,MAAM,SAAS,QAAQ,KAAK,QAAQ,SAAS,OAAO,CAAC;AACvE,WAAK,UAAU,OAAO;AAAA,IAC1B,WACS,SAAS,UAAU;AACxB,WAAK,YAAY;AACjB,WAAK,WAAW;AAChB,WAAK,OAAO;AAAA,IAChB,OACK;AACD,WAAK,OAAO;AACZ,aAAO,KAAK,KAAK;AACjB,cAAQ,MAAM;AAAA,QACV,KAAK;AACD,eAAK,YAAY;AACjB,eAAK,SAAS;AACd,cAAI,KAAK;AACL,iBAAK,UAAU,KAAK,SAAS,OAAO,MAAM;AAC9C;AAAA,QACJ,KAAK;AACD,cAAI,KAAK,aAAa,OAAO,CAAC,MAAM;AAChC,iBAAK,UAAU,OAAO;AAC1B;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,cAAI,KAAK;AACL,iBAAK,UAAU,OAAO;AAC1B;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AACD;AAAA,QACJ;AACI,eAAK,YAAY;AAAA,MACzB;AACA,WAAK,UAAU,OAAO;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA,EAEA,CAAC,MAAM;AACH,WAAO,KAAK,MAAM,SAAS;AACvB,aAAO,KAAK,IAAI;AAAA,EACxB;AAAA,EACA,IAAI,cAAc;AACd,UAAM,KAAK;AAAA,MACP,MAAM,KAAK;AAAA,MACX,QAAQ,KAAK;AAAA,MACb,QAAQ,KAAK;AAAA,MACb,QAAQ,KAAK;AAAA,IACjB;AACA,WAAO;AAAA,EACX;AAAA,EACA,CAAC,OAAO;AACJ,UAAM,MAAM,KAAK,KAAK,CAAC;AACvB,QAAI,KAAK,SAAS,cAAc,CAAC,OAAO,IAAI,SAAS,YAAY;AAC7D,aAAO,KAAK,MAAM,SAAS;AACvB,eAAO,KAAK,IAAI;AACpB,WAAK,MAAM,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,QAAQ,KAAK;AAAA,QACb,QAAQ,KAAK;AAAA,MACjB,CAAC;AACD;AAAA,IACJ;AACA,QAAI,CAAC;AACD,aAAO,OAAO,KAAK,OAAO;AAC9B,YAAQ,IAAI,MAAM;AAAA,MACd,KAAK;AACD,eAAO,OAAO,KAAK,SAAS,GAAG;AAAA,MACnC,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,OAAO,KAAK,OAAO,GAAG;AAAA,MACjC,KAAK;AACD,eAAO,OAAO,KAAK,YAAY,GAAG;AAAA,MACtC,KAAK;AACD,eAAO,OAAO,KAAK,SAAS,GAAG;AAAA,MACnC,KAAK;AACD,eAAO,OAAO,KAAK,cAAc,GAAG;AAAA,MACxC,KAAK;AACD,eAAO,OAAO,KAAK,eAAe,GAAG;AAAA,MACzC,KAAK;AACD,eAAO,OAAO,KAAK,YAAY,GAAG;AAAA,IAC1C;AAEA,WAAO,KAAK,IAAI;AAAA,EACpB;AAAA,EACA,KAAK,GAAG;AACJ,WAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAAA,EAC3C;AAAA,EACA,CAAC,IAAI,OAAO;AACR,UAAM,QAAQ,SAAS,KAAK,MAAM,IAAI;AAEtC,QAAI,CAAC,OAAO;AACR,YAAM,UAAU;AAChB,YAAM,EAAE,MAAM,SAAS,QAAQ,KAAK,QAAQ,QAAQ,IAAI,QAAQ;AAAA,IACpE,WACS,KAAK,MAAM,WAAW,GAAG;AAC9B,YAAM;AAAA,IACV,OACK;AACD,YAAM,MAAM,KAAK,KAAK,CAAC;AACvB,UAAI,MAAM,SAAS,gBAAgB;AAE/B,cAAM,SAAS,YAAY,MAAM,IAAI,SAAS;AAAA,MAClD,WACS,MAAM,SAAS,qBAAqB,IAAI,SAAS,YAAY;AAElE,cAAM,SAAS;AAAA,MACnB;AACA,UAAI,MAAM,SAAS;AACf,wBAAgB,KAAK;AACzB,cAAQ,IAAI,MAAM;AAAA,QACd,KAAK;AACD,cAAI,QAAQ;AACZ;AAAA,QACJ,KAAK;AACD,cAAI,MAAM,KAAK,KAAK;AACpB;AAAA,QACJ,KAAK,aAAa;AACd,gBAAM,KAAK,IAAI,MAAM,IAAI,MAAM,SAAS,CAAC;AACzC,cAAI,GAAG,OAAO;AACV,gBAAI,MAAM,KAAK,EAAE,OAAO,CAAC,GAAG,KAAK,OAAO,KAAK,CAAC,EAAE,CAAC;AACjD,iBAAK,YAAY;AACjB;AAAA,UACJ,WACS,GAAG,KAAK;AACb,eAAG,QAAQ;AAAA,UACf,OACK;AACD,mBAAO,OAAO,IAAI,EAAE,KAAK,OAAO,KAAK,CAAC,EAAE,CAAC;AACzC,iBAAK,YAAY,CAAC,GAAG;AACrB;AAAA,UACJ;AACA;AAAA,QACJ;AAAA,QACA,KAAK,aAAa;AACd,gBAAM,KAAK,IAAI,MAAM,IAAI,MAAM,SAAS,CAAC;AACzC,cAAI,GAAG;AACH,gBAAI,MAAM,KAAK,EAAE,OAAO,CAAC,GAAG,OAAO,MAAM,CAAC;AAAA;AAE1C,eAAG,QAAQ;AACf;AAAA,QACJ;AAAA,QACA,KAAK,mBAAmB;AACpB,gBAAM,KAAK,IAAI,MAAM,IAAI,MAAM,SAAS,CAAC;AACzC,cAAI,CAAC,MAAM,GAAG;AACV,gBAAI,MAAM,KAAK,EAAE,OAAO,CAAC,GAAG,KAAK,OAAO,KAAK,CAAC,EAAE,CAAC;AAAA,mBAC5C,GAAG;AACR,eAAG,QAAQ;AAAA;AAEX,mBAAO,OAAO,IAAI,EAAE,KAAK,OAAO,KAAK,CAAC,EAAE,CAAC;AAC7C;AAAA,QACJ;AAAA;AAAA,QAEA;AACI,iBAAO,KAAK,IAAI;AAChB,iBAAO,KAAK,IAAI,KAAK;AAAA,MAC7B;AACA,WAAK,IAAI,SAAS,cACd,IAAI,SAAS,eACb,IAAI,SAAS,iBACZ,MAAM,SAAS,eAAe,MAAM,SAAS,cAAc;AAC5D,cAAM,OAAO,MAAM,MAAM,MAAM,MAAM,SAAS,CAAC;AAC/C,YAAI,QACA,CAAC,KAAK,OACN,CAAC,KAAK,SACN,KAAK,MAAM,SAAS,KACpB,kBAAkB,KAAK,KAAK,MAAM,OACjC,MAAM,WAAW,KACd,KAAK,MAAM,MAAM,QAAM,GAAG,SAAS,aAAa,GAAG,SAAS,MAAM,MAAM,IAAI;AAChF,cAAI,IAAI,SAAS;AACb,gBAAI,MAAM,KAAK;AAAA;AAEf,gBAAI,MAAM,KAAK,EAAE,OAAO,KAAK,MAAM,CAAC;AACxC,gBAAM,MAAM,OAAO,IAAI,CAAC;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,CAAC,SAAS;AACN,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AACD,cAAM,EAAE,MAAM,aAAa,QAAQ,KAAK,QAAQ,QAAQ,KAAK,OAAO;AACpE;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,cAAM,KAAK;AACX;AAAA,MACJ,KAAK;AAAA,MACL,KAAK,aAAa;AACd,cAAM,MAAM;AAAA,UACR,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,UACb,OAAO,CAAC;AAAA,QACZ;AACA,YAAI,KAAK,SAAS;AACd,cAAI,MAAM,KAAK,KAAK,WAAW;AACnC,aAAK,MAAM,KAAK,GAAG;AACnB;AAAA,MACJ;AAAA,IACJ;AACA,UAAM;AAAA,MACF,MAAM;AAAA,MACN,QAAQ,KAAK;AAAA,MACb,SAAS,cAAc,KAAK,IAAI;AAAA,MAChC,QAAQ,KAAK;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,CAAC,SAAS,KAAK;AACX,QAAI,IAAI;AACJ,aAAO,OAAO,KAAK,QAAQ,GAAG;AAClC,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK,aAAa;AACd,YAAI,kBAAkB,IAAI,KAAK,MAAM,IAAI;AACrC,iBAAO,KAAK,IAAI;AAChB,iBAAO,KAAK,KAAK;AAAA,QACrB;AAEI,cAAI,MAAM,KAAK,KAAK,WAAW;AACnC;AAAA,MACJ;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,YAAI,MAAM,KAAK,KAAK,WAAW;AAC/B;AAAA,IACR;AACA,UAAM,KAAK,KAAK,gBAAgB,GAAG;AACnC,QAAI;AACA,WAAK,MAAM,KAAK,EAAE;AAAA,SACjB;AACD,YAAM;AAAA,QACF,MAAM;AAAA,QACN,QAAQ,KAAK;AAAA,QACb,SAAS,cAAc,KAAK,IAAI;AAAA,QAChC,QAAQ,KAAK;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,CAAC,OAAO,QAAQ;AACZ,QAAI,KAAK,SAAS,iBAAiB;AAC/B,YAAM,OAAO,aAAa,KAAK,KAAK,CAAC,CAAC;AACtC,YAAM,QAAQ,sBAAsB,IAAI;AACxC,UAAI;AACJ,UAAI,OAAO,KAAK;AACZ,cAAM,OAAO;AACb,YAAI,KAAK,KAAK,WAAW;AACzB,eAAO,OAAO;AAAA,MAClB;AAEI,cAAM,CAAC,KAAK,WAAW;AAC3B,YAAMC,OAAM;AAAA,QACR,MAAM;AAAA,QACN,QAAQ,OAAO;AAAA,QACf,QAAQ,OAAO;AAAA,QACf,OAAO,CAAC,EAAE,OAAO,KAAK,QAAQ,IAAI,CAAC;AAAA,MACvC;AACA,WAAK,YAAY;AACjB,WAAK,MAAM,KAAK,MAAM,SAAS,CAAC,IAAIA;AAAA,IACxC;AAEI,aAAO,KAAK,QAAQ,MAAM;AAAA,EAClC;AAAA,EACA,CAAC,YAAY,QAAQ;AACjB,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,MAAM,KAAK,KAAK,WAAW;AAClC;AAAA,MACJ,KAAK;AACD,eAAO,SAAS,KAAK;AAErB,aAAK,YAAY;AACjB,aAAK,SAAS;AACd,YAAI,KAAK,WAAW;AAChB,cAAI,KAAK,KAAK,OAAO,QAAQ,IAAI,IAAI;AACrC,iBAAO,OAAO,GAAG;AACb,iBAAK,UAAU,KAAK,SAAS,EAAE;AAC/B,iBAAK,KAAK,OAAO,QAAQ,MAAM,EAAE,IAAI;AAAA,UACzC;AAAA,QACJ;AACA,eAAO,KAAK,IAAI;AAChB;AAAA;AAAA,MAEJ;AACI,eAAO,KAAK,IAAI;AAChB,eAAO,KAAK,KAAK;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,CAAC,SAASA,MAAK;AAtdnB;AAudQ,UAAM,KAAKA,KAAI,MAAMA,KAAI,MAAM,SAAS,CAAC;AAEzC,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AACD,aAAK,YAAY;AACjB,YAAI,GAAG,OAAO;AACV,gBAAM,MAAM,SAAS,GAAG,QAAQ,GAAG,MAAM,MAAM;AAC/C,gBAAM,OAAO,MAAM,QAAQ,GAAG,IAAI,IAAI,IAAI,SAAS,CAAC,IAAI;AACxD,eAAI,6BAAM,UAAS;AACf,uCAAK,KAAK,KAAK;AAAA;AAEf,YAAAA,KAAI,MAAM,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,QACpD,WACS,GAAG,KAAK;AACb,aAAG,IAAI,KAAK,KAAK,WAAW;AAAA,QAChC,OACK;AACD,aAAG,MAAM,KAAK,KAAK,WAAW;AAAA,QAClC;AACA;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,YAAI,GAAG,OAAO;AACV,UAAAA,KAAI,MAAM,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,QAChD,WACS,GAAG,KAAK;AACb,aAAG,IAAI,KAAK,KAAK,WAAW;AAAA,QAChC,OACK;AACD,cAAI,KAAK,kBAAkB,GAAG,OAAOA,KAAI,MAAM,GAAG;AAC9C,kBAAM,OAAOA,KAAI,MAAMA,KAAI,MAAM,SAAS,CAAC;AAC3C,kBAAM,OAAM,kCAAM,UAAN,mBAAa;AACzB,gBAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,oBAAM,UAAU,KAAK,MAAM,KAAK,GAAG,KAAK;AACxC,kBAAI,KAAK,KAAK,WAAW;AACzB,cAAAA,KAAI,MAAM,IAAI;AACd;AAAA,YACJ;AAAA,UACJ;AACA,aAAG,MAAM,KAAK,KAAK,WAAW;AAAA,QAClC;AACA;AAAA,IACR;AACA,QAAI,KAAK,UAAUA,KAAI,QAAQ;AAC3B,YAAM,cAAc,CAAC,KAAK,aAAa,KAAK,WAAWA,KAAI;AAC3D,YAAM,aAAa,gBACd,GAAG,OAAO,GAAG,gBACd,KAAK,SAAS;AAElB,UAAI,QAAQ,CAAC;AACb,UAAI,cAAc,GAAG,OAAO,CAAC,GAAG,OAAO;AACnC,cAAM,KAAK,CAAC;AACZ,iBAAS,IAAI,GAAG,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AACpC,gBAAM,KAAK,GAAG,IAAI,CAAC;AACnB,kBAAQ,GAAG,MAAM;AAAA,YACb,KAAK;AACD,iBAAG,KAAK,CAAC;AACT;AAAA,YACJ,KAAK;AACD;AAAA,YACJ,KAAK;AACD,kBAAI,GAAG,SAASA,KAAI;AAChB,mBAAG,SAAS;AAChB;AAAA,YACJ;AACI,iBAAG,SAAS;AAAA,UACpB;AAAA,QACJ;AACA,YAAI,GAAG,UAAU;AACb,kBAAQ,GAAG,IAAI,OAAO,GAAG,CAAC,CAAC;AAAA,MACnC;AACA,cAAQ,KAAK,MAAM;AAAA,QACf,KAAK;AAAA,QACL,KAAK;AACD,cAAI,cAAc,GAAG,OAAO;AACxB,kBAAM,KAAK,KAAK,WAAW;AAC3B,YAAAA,KAAI,MAAM,KAAK,EAAE,MAAM,CAAC;AACxB,iBAAK,YAAY;AAAA,UACrB,WACS,GAAG,KAAK;AACb,eAAG,IAAI,KAAK,KAAK,WAAW;AAAA,UAChC,OACK;AACD,eAAG,MAAM,KAAK,KAAK,WAAW;AAAA,UAClC;AACA;AAAA,QACJ,KAAK;AACD,cAAI,CAAC,GAAG,OAAO,CAAC,GAAG,aAAa;AAC5B,eAAG,MAAM,KAAK,KAAK,WAAW;AAC9B,eAAG,cAAc;AAAA,UACrB,WACS,cAAc,GAAG,OAAO;AAC7B,kBAAM,KAAK,KAAK,WAAW;AAC3B,YAAAA,KAAI,MAAM,KAAK,EAAE,OAAO,aAAa,KAAK,CAAC;AAAA,UAC/C,OACK;AACD,iBAAK,MAAM,KAAK;AAAA,cACZ,MAAM;AAAA,cACN,QAAQ,KAAK;AAAA,cACb,QAAQ,KAAK;AAAA,cACb,OAAO,CAAC,EAAE,OAAO,CAAC,KAAK,WAAW,GAAG,aAAa,KAAK,CAAC;AAAA,YAC5D,CAAC;AAAA,UACL;AACA,eAAK,YAAY;AACjB;AAAA,QACJ,KAAK;AACD,cAAI,GAAG,aAAa;AAChB,gBAAI,CAAC,GAAG,KAAK;AACT,kBAAI,cAAc,GAAG,OAAO,SAAS,GAAG;AACpC,uBAAO,OAAO,IAAI,EAAE,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,cAC5D,OACK;AACD,sBAAMC,SAAQ,sBAAsB,GAAG,KAAK;AAC5C,qBAAK,MAAM,KAAK;AAAA,kBACZ,MAAM;AAAA,kBACN,QAAQ,KAAK;AAAA,kBACb,QAAQ,KAAK;AAAA,kBACb,OAAO,CAAC,EAAE,OAAAA,QAAO,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,gBACzD,CAAC;AAAA,cACL;AAAA,YACJ,WACS,GAAG,OAAO;AACf,cAAAD,KAAI,MAAM,KAAK,EAAE,OAAO,CAAC,GAAG,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,YACpE,WACS,cAAc,GAAG,KAAK,eAAe,GAAG;AAC7C,mBAAK,MAAM,KAAK;AAAA,gBACZ,MAAM;AAAA,gBACN,QAAQ,KAAK;AAAA,gBACb,QAAQ,KAAK;AAAA,gBACb,OAAO,CAAC,EAAE,OAAO,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,cACzD,CAAC;AAAA,YACL,WACS,YAAY,GAAG,GAAG,KACvB,CAAC,cAAc,GAAG,KAAK,SAAS,GAAG;AACnC,oBAAMC,SAAQ,sBAAsB,GAAG,KAAK;AAC5C,oBAAM,MAAM,GAAG;AACf,oBAAM,MAAM,GAAG;AACf,kBAAI,KAAK,KAAK,WAAW;AAEzB,qBAAO,GAAG;AAEV,qBAAO,GAAG;AACV,mBAAK,MAAM,KAAK;AAAA,gBACZ,MAAM;AAAA,gBACN,QAAQ,KAAK;AAAA,gBACb,QAAQ,KAAK;AAAA,gBACb,OAAO,CAAC,EAAE,OAAAA,QAAO,KAAK,IAAI,CAAC;AAAA,cAC/B,CAAC;AAAA,YACL,WACS,MAAM,SAAS,GAAG;AAEvB,iBAAG,MAAM,GAAG,IAAI,OAAO,OAAO,KAAK,WAAW;AAAA,YAClD,OACK;AACD,iBAAG,IAAI,KAAK,KAAK,WAAW;AAAA,YAChC;AAAA,UACJ,OACK;AACD,gBAAI,CAAC,GAAG,KAAK;AACT,qBAAO,OAAO,IAAI,EAAE,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,YAC5D,WACS,GAAG,SAAS,YAAY;AAC7B,cAAAD,KAAI,MAAM,KAAK,EAAE,OAAO,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,YAChE,WACS,cAAc,GAAG,KAAK,eAAe,GAAG;AAC7C,mBAAK,MAAM,KAAK;AAAA,gBACZ,MAAM;AAAA,gBACN,QAAQ,KAAK;AAAA,gBACb,QAAQ,KAAK;AAAA,gBACb,OAAO,CAAC,EAAE,OAAO,CAAC,GAAG,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,cAC7D,CAAC;AAAA,YACL,OACK;AACD,iBAAG,IAAI,KAAK,KAAK,WAAW;AAAA,YAChC;AAAA,UACJ;AACA,eAAK,YAAY;AACjB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK,wBAAwB;AACzB,gBAAM,KAAK,KAAK,WAAW,KAAK,IAAI;AACpC,cAAI,cAAc,GAAG,OAAO;AACxB,YAAAA,KAAI,MAAM,KAAK,EAAE,OAAO,KAAK,IAAI,KAAK,CAAC,EAAE,CAAC;AAC1C,iBAAK,YAAY;AAAA,UACrB,WACS,GAAG,KAAK;AACb,iBAAK,MAAM,KAAK,EAAE;AAAA,UACtB,OACK;AACD,mBAAO,OAAO,IAAI,EAAE,KAAK,IAAI,KAAK,CAAC,EAAE,CAAC;AACtC,iBAAK,YAAY;AAAA,UACrB;AACA;AAAA,QACJ;AAAA,QACA,SAAS;AACL,gBAAM,KAAK,KAAK,gBAAgBA,IAAG;AACnC,cAAI,IAAI;AACJ,gBAAI,GAAG,SAAS,aAAa;AACzB,kBAAI,CAAC,GAAG,eACJ,GAAG,OACH,CAAC,cAAc,GAAG,KAAK,SAAS,GAAG;AACnC,uBAAO,KAAK,IAAI;AAAA,kBACZ,MAAM;AAAA,kBACN,QAAQ,KAAK;AAAA,kBACb,SAAS;AAAA,kBACT,QAAQ,KAAK;AAAA,gBACjB,CAAC;AACD;AAAA,cACJ;AAAA,YACJ,WACS,aAAa;AAClB,cAAAA,KAAI,MAAM,KAAK,EAAE,MAAM,CAAC;AAAA,YAC5B;AACA,iBAAK,MAAM,KAAK,EAAE;AAClB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,KAAK,IAAI;AAChB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,CAAC,cAAcE,MAAK;AAvrBxB;AAwrBQ,UAAM,KAAKA,KAAI,MAAMA,KAAI,MAAM,SAAS,CAAC;AACzC,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AACD,YAAI,GAAG,OAAO;AACV,gBAAM,MAAM,SAAS,GAAG,QAAQ,GAAG,MAAM,MAAM;AAC/C,gBAAM,OAAO,MAAM,QAAQ,GAAG,IAAI,IAAI,IAAI,SAAS,CAAC,IAAI;AACxD,eAAI,6BAAM,UAAS;AACf,uCAAK,KAAK,KAAK;AAAA;AAEf,YAAAA,KAAI,MAAM,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,QACpD;AAEI,aAAG,MAAM,KAAK,KAAK,WAAW;AAClC;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,YAAI,GAAG;AACH,UAAAA,KAAI,MAAM,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,aAC3C;AACD,cAAI,KAAK,kBAAkB,GAAG,OAAOA,KAAI,MAAM,GAAG;AAC9C,kBAAM,OAAOA,KAAI,MAAMA,KAAI,MAAM,SAAS,CAAC;AAC3C,kBAAM,OAAM,kCAAM,UAAN,mBAAa;AACzB,gBAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,oBAAM,UAAU,KAAK,MAAM,KAAK,GAAG,KAAK;AACxC,kBAAI,KAAK,KAAK,WAAW;AACzB,cAAAA,KAAI,MAAM,IAAI;AACd;AAAA,YACJ;AAAA,UACJ;AACA,aAAG,MAAM,KAAK,KAAK,WAAW;AAAA,QAClC;AACA;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,YAAI,GAAG,SAAS,KAAK,UAAUA,KAAI;AAC/B;AACJ,WAAG,MAAM,KAAK,KAAK,WAAW;AAC9B;AAAA,MACJ,KAAK;AACD,YAAI,KAAK,WAAWA,KAAI;AACpB;AACJ,YAAI,GAAG,SAAS,cAAc,GAAG,OAAO,cAAc;AAClD,UAAAA,KAAI,MAAM,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA;AAE5C,aAAG,MAAM,KAAK,KAAK,WAAW;AAClC;AAAA,IACR;AACA,QAAI,KAAK,SAASA,KAAI,QAAQ;AAC1B,YAAM,KAAK,KAAK,gBAAgBA,IAAG;AACnC,UAAI,IAAI;AACJ,aAAK,MAAM,KAAK,EAAE;AAClB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,KAAK,IAAI;AAChB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,CAAC,eAAe,IAAI;AAChB,UAAM,KAAK,GAAG,MAAM,GAAG,MAAM,SAAS,CAAC;AACvC,QAAI,KAAK,SAAS,kBAAkB;AAChC,UAAI;AACJ,SAAG;AACC,eAAO,KAAK,IAAI;AAChB,cAAM,KAAK,KAAK,CAAC;AAAA,MACrB,SAAS,OAAO,IAAI,SAAS;AAAA,IACjC,WACS,GAAG,IAAI,WAAW,GAAG;AAC1B,cAAQ,KAAK,MAAM;AAAA,QACf,KAAK;AAAA,QACL,KAAK;AACD,cAAI,CAAC,MAAM,GAAG;AACV,eAAG,MAAM,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA;AAE3C,eAAG,MAAM,KAAK,KAAK,WAAW;AAClC;AAAA,QACJ,KAAK;AACD,cAAI,CAAC,MAAM,GAAG;AACV,eAAG,MAAM,KAAK,EAAE,OAAO,CAAC,GAAG,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,mBAC1D,GAAG;AACR,eAAG,IAAI,KAAK,KAAK,WAAW;AAAA;AAE5B,mBAAO,OAAO,IAAI,EAAE,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAC5D;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,cAAI,CAAC,MAAM,GAAG;AACV,eAAG,MAAM,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,mBACtC,GAAG;AACR,eAAG,IAAI,KAAK,KAAK,WAAW;AAAA;AAE5B,eAAG,MAAM,KAAK,KAAK,WAAW;AAClC;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK,wBAAwB;AACzB,gBAAM,KAAK,KAAK,WAAW,KAAK,IAAI;AACpC,cAAI,CAAC,MAAM,GAAG;AACV,eAAG,MAAM,KAAK,EAAE,OAAO,CAAC,GAAG,KAAK,IAAI,KAAK,CAAC,EAAE,CAAC;AAAA,mBACxC,GAAG;AACR,iBAAK,MAAM,KAAK,EAAE;AAAA;AAElB,mBAAO,OAAO,IAAI,EAAE,KAAK,IAAI,KAAK,CAAC,EAAE,CAAC;AAC1C;AAAA,QACJ;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AACD,aAAG,IAAI,KAAK,KAAK,WAAW;AAC5B;AAAA,MACR;AACA,YAAM,KAAK,KAAK,gBAAgB,EAAE;AAElC,UAAI;AACA,aAAK,MAAM,KAAK,EAAE;AAAA,WACjB;AACD,eAAO,KAAK,IAAI;AAChB,eAAO,KAAK,KAAK;AAAA,MACrB;AAAA,IACJ,OACK;AACD,YAAM,SAAS,KAAK,KAAK,CAAC;AAC1B,UAAI,OAAO,SAAS,gBACd,KAAK,SAAS,mBAAmB,OAAO,WAAW,GAAG,UACnD,KAAK,SAAS,aACX,CAAC,OAAO,MAAM,OAAO,MAAM,SAAS,CAAC,EAAE,MAAO;AACtD,eAAO,KAAK,IAAI;AAChB,eAAO,KAAK,KAAK;AAAA,MACrB,WACS,KAAK,SAAS,mBACnB,OAAO,SAAS,mBAAmB;AACnC,cAAM,OAAO,aAAa,MAAM;AAChC,cAAM,QAAQ,sBAAsB,IAAI;AACxC,wBAAgB,EAAE;AAClB,cAAM,MAAM,GAAG,IAAI,OAAO,GAAG,GAAG,IAAI,MAAM;AAC1C,YAAI,KAAK,KAAK,WAAW;AACzB,cAAMF,OAAM;AAAA,UACR,MAAM;AAAA,UACN,QAAQ,GAAG;AAAA,UACX,QAAQ,GAAG;AAAA,UACX,OAAO,CAAC,EAAE,OAAO,KAAK,IAAI,IAAI,CAAC;AAAA,QACnC;AACA,aAAK,YAAY;AACjB,aAAK,MAAM,KAAK,MAAM,SAAS,CAAC,IAAIA;AAAA,MACxC,OACK;AACD,eAAO,KAAK,QAAQ,EAAE;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,MAAM;AACb,QAAI,KAAK,WAAW;AAChB,UAAI,KAAK,KAAK,OAAO,QAAQ,IAAI,IAAI;AACrC,aAAO,OAAO,GAAG;AACb,aAAK,UAAU,KAAK,SAAS,EAAE;AAC/B,aAAK,KAAK,OAAO,QAAQ,MAAM,EAAE,IAAI;AAAA,MACzC;AAAA,IACJ;AACA,WAAO;AAAA,MACH;AAAA,MACA,QAAQ,KAAK;AAAA,MACb,QAAQ,KAAK;AAAA,MACb,QAAQ,KAAK;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,gBAAgB,QAAQ;AACpB,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,WAAW,KAAK,IAAI;AAAA,MACpC,KAAK;AACD,eAAO;AAAA,UACH,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,UACb,QAAQ,KAAK;AAAA,UACb,OAAO,CAAC,KAAK,WAAW;AAAA,UACxB,QAAQ;AAAA,QACZ;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,eAAO;AAAA,UACH,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,UACb,QAAQ,KAAK;AAAA,UACb,OAAO,KAAK;AAAA,UACZ,OAAO,CAAC;AAAA,UACR,KAAK,CAAC;AAAA,QACV;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,UACb,QAAQ,KAAK;AAAA,UACb,OAAO,CAAC,EAAE,OAAO,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,QACzC;AAAA,MACJ,KAAK,oBAAoB;AACrB,aAAK,YAAY;AACjB,cAAM,OAAO,aAAa,MAAM;AAChC,cAAM,QAAQ,sBAAsB,IAAI;AACxC,cAAM,KAAK,KAAK,WAAW;AAC3B,eAAO;AAAA,UACH,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,UACb,QAAQ,KAAK;AAAA,UACb,OAAO,CAAC,EAAE,OAAO,aAAa,KAAK,CAAC;AAAA,QACxC;AAAA,MACJ;AAAA,MACA,KAAK,iBAAiB;AAClB,aAAK,YAAY;AACjB,cAAM,OAAO,aAAa,MAAM;AAChC,cAAM,QAAQ,sBAAsB,IAAI;AACxC,eAAO;AAAA,UACH,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,UACb,QAAQ,KAAK;AAAA,UACb,OAAO,CAAC,EAAE,OAAO,KAAK,MAAM,KAAK,CAAC,KAAK,WAAW,EAAE,CAAC;AAAA,QACzD;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB,OAAO,QAAQ;AAC7B,QAAI,KAAK,SAAS;AACd,aAAO;AACX,QAAI,KAAK,UAAU;AACf,aAAO;AACX,WAAO,MAAM,MAAM,QAAM,GAAG,SAAS,aAAa,GAAG,SAAS,OAAO;AAAA,EACzE;AAAA,EACA,CAAC,YAAY,QAAQ;AACjB,QAAI,KAAK,SAAS,YAAY;AAC1B,UAAI,OAAO;AACP,eAAO,IAAI,KAAK,KAAK,WAAW;AAAA;AAEhC,eAAO,MAAM,CAAC,KAAK,WAAW;AAClC,UAAI,KAAK,SAAS;AACd,eAAO,KAAK,IAAI;AAAA,IACxB;AAAA,EACJ;AAAA,EACA,CAAC,QAAQ,OAAO;AACZ,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,IAAI;AAChB,eAAO,KAAK,KAAK;AACjB;AAAA,MACJ,KAAK;AACD,aAAK,YAAY;AAAA;AAAA,MAErB,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAEI,YAAI,MAAM;AACN,gBAAM,IAAI,KAAK,KAAK,WAAW;AAAA;AAE/B,gBAAM,MAAM,CAAC,KAAK,WAAW;AACjC,YAAI,KAAK,SAAS;AACd,iBAAO,KAAK,IAAI;AAAA,IAC5B;AAAA,EACJ;AACJ;;;AC57BA,SAAS,aAAa,SAAS;AAC3B,QAAM,eAAe,QAAQ,iBAAiB;AAC9C,QAAM,cAAc,QAAQ,eAAgB,gBAAgB,IAAI,YAAY,KAAM;AAClF,SAAO,EAAE,aAAa,aAAa;AACvC;AAUA,SAAS,kBAAkB,QAAQ,UAAU,CAAC,GAAG;AAC7C,QAAM,EAAE,aAAa,aAAa,IAAI,aAAa,OAAO;AAC1D,QAAM,SAAS,IAAI,OAAO,2CAAa,UAAU;AACjD,QAAM,WAAW,IAAI,SAAS,OAAO;AACrC,QAAM,OAAO,MAAM,KAAK,SAAS,QAAQ,OAAO,MAAM,MAAM,CAAC,CAAC;AAC9D,MAAI,gBAAgB;AAChB,eAAW,OAAO,MAAM;AACpB,UAAI,OAAO,QAAQ,cAAc,QAAQ,WAAW,CAAC;AACrD,UAAI,SAAS,QAAQ,cAAc,QAAQ,WAAW,CAAC;AAAA,IAC3D;AACJ,MAAI,KAAK,SAAS;AACd,WAAO;AACX,SAAO,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,KAAK,GAAG,SAAS,WAAW,CAAC;AACnE;AAEA,SAAS,cAAc,QAAQ,UAAU,CAAC,GAAG;AACzC,QAAM,EAAE,aAAa,aAAa,IAAI,aAAa,OAAO;AAC1D,QAAM,SAAS,IAAI,OAAO,2CAAa,UAAU;AACjD,QAAM,WAAW,IAAI,SAAS,OAAO;AAErC,MAAI,MAAM;AACV,aAAW,QAAQ,SAAS,QAAQ,OAAO,MAAM,MAAM,GAAG,MAAM,OAAO,MAAM,GAAG;AAC5E,QAAI,CAAC;AACD,YAAM;AAAA,aACD,IAAI,QAAQ,aAAa,UAAU;AACxC,UAAI,OAAO,KAAK,IAAI,eAAe,KAAK,MAAM,MAAM,GAAG,CAAC,GAAG,iBAAiB,yEAAyE,CAAC;AACtJ;AAAA,IACJ;AAAA,EACJ;AACA,MAAI,gBAAgB,aAAa;AAC7B,QAAI,OAAO,QAAQ,cAAc,QAAQ,WAAW,CAAC;AACrD,QAAI,SAAS,QAAQ,cAAc,QAAQ,WAAW,CAAC;AAAA,EAC3D;AACA,SAAO;AACX;AACA,SAAS,MAAM,KAAK,SAAS,SAAS;AAClC,MAAI,WAAW;AACf,MAAI,OAAO,YAAY,YAAY;AAC/B,eAAW;AAAA,EACf,WACS,YAAY,UAAa,WAAW,OAAO,YAAY,UAAU;AACtE,cAAU;AAAA,EACd;AACA,QAAM,MAAM,cAAc,KAAK,OAAO;AACtC,MAAI,CAAC;AACD,WAAO;AACX,MAAI,SAAS,QAAQ,aAAW,KAAK,IAAI,QAAQ,UAAU,OAAO,CAAC;AACnE,MAAI,IAAI,OAAO,SAAS,GAAG;AACvB,QAAI,IAAI,QAAQ,aAAa;AACzB,YAAM,IAAI,OAAO,CAAC;AAAA;AAElB,UAAI,SAAS,CAAC;AAAA,EACtB;AACA,SAAO,IAAI,KAAK,OAAO,OAAO,EAAE,SAAS,SAAS,GAAG,OAAO,CAAC;AACjE;AACA,SAASG,WAAU,OAAO,UAAU,SAAS;AACzC,MAAI,YAAY;AAChB,MAAI,OAAO,aAAa,cAAc,MAAM,QAAQ,QAAQ,GAAG;AAC3D,gBAAY;AAAA,EAChB,WACS,YAAY,UAAa,UAAU;AACxC,cAAU;AAAA,EACd;AACA,MAAI,OAAO,YAAY;AACnB,cAAU,QAAQ;AACtB,MAAI,OAAO,YAAY,UAAU;AAC7B,UAAM,SAAS,KAAK,MAAM,OAAO;AACjC,cAAU,SAAS,IAAI,SAAY,SAAS,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO;AAAA,EAC7E;AACA,MAAI,UAAU,QAAW;AACrB,UAAM,EAAE,cAAc,IAAI,WAAW,YAAY,CAAC;AAClD,QAAI,CAAC;AACD,aAAO;AAAA,EACf;AACA,MAAI,WAAW,KAAK,KAAK,CAAC;AACtB,WAAO,MAAM,SAAS,OAAO;AACjC,SAAO,IAAI,SAAS,OAAO,WAAW,OAAO,EAAE,SAAS,OAAO;AACnE;;;AChGA,IAAO,kBAAQ;",
  "names": ["stringify", "res", "res", "map", "schema", "node", "schema", "i", "end", "isBlock", "_a", "map", "value", "map", "schema", "stringify", "comment", "str", "schema", "map", "map", "schema", "schema", "seq", "seq", "schema", "intIdentify", "schema", "seq", "schema", "pairs", "map", "schema", "pairs", "omap", "seq", "floatNaN", "floatExp", "float", "intIdentify", "intResolve", "n", "intStringify", "intOct", "int", "intHex", "schema", "set", "map", "res", "schema", "intOct", "int", "intHex", "floatNaN", "floatExp", "float", "schema", "tags", "merge", "schema", "res", "composeNode", "composeEmptyNode", "map", "composeNode", "composeEmptyNode", "seq", "composeNode", "composeEmptyNode", "isMap", "map", "CN", "value", "end", "schema", "tag", "SCALAR", "isCollection", "isScalar", "stringify", "visit", "stringify", "BREAK", "SKIP", "REMOVE", "visit", "SCALAR", "isCollection", "isScalar", "i", "ch", "SCALAR", "map", "start", "seq", "stringify"]
}
